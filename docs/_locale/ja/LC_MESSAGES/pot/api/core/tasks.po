# 
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-03 19:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../api/core/tasks.rst:3
msgid "Tasks"
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.Task:1
msgid ""
"Abstract base class for objects wishing to be picked up as Fabric tasks."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.Task:3
msgid ""
"Instances of subclasses will be treated as valid tasks when present in "
"fabfiles loaded by the :doc:`fab </usage/fab>` tool."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.Task:6
msgid ""
"For details on how to implement and use `~fabric.tasks.Task` subclasses, "
"please see the usage documentation on :ref:`new-style tasks <new-style-"
"tasks>`."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.Task.get_hosts:1
msgid "Return the host list the given task should be using."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.Task.get_hosts:3
msgid ""
"See :ref:`host-lists` for detailed documentation on how host lists are set."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.WrappedCallableTask:1
msgid ""
"Wraps a given callable transparently, while marking it as a valid Task."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.WrappedCallableTask:3
msgid "Generally used via `~fabric.decorators.task` and not directly."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.WrappedCallableTask:7
msgid "`~fabric.docs.unwrap_tasks`, `~fabric.decorators.task`"
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:1
msgid ""
"Execute ``task`` (callable or name), honoring host/role decorators, etc."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:3
msgid ""
"``task`` may be an actual callable object, or it may be a registered task "
"name, which is used to look up a callable just as if the name had been given"
" on the command line (including :ref:`namespaced tasks <namespaces>`, e.g. "
"``\"deploy.migrate\"``."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:8
msgid ""
"The task will then be executed once per host in its host list, which is "
"(again) assembled in the same manner as CLI-specified tasks: drawing from "
":option:`-H`, :ref:`env.hosts <hosts>`, the `~fabric.decorators.hosts` or "
"`~fabric.decorators.roles` decorators, and so forth."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:13
msgid ""
"``host``, ``hosts``, ``role``, ``roles`` and ``exclude_hosts`` kwargs will "
"be stripped out of the final call, and used to set the task's host list, as "
"if they had been specified on the command line like e.g. ``fab "
"taskname:host=hostname``."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:18
msgid ""
"Any other arguments or keyword arguments will be passed verbatim into "
"``task`` (the function itself -- not the ``@task`` decorator wrapping your "
"function!) when it is called, so ``execute(mytask, 'arg1', kwarg1='value')``"
" will (once per host) invoke ``mytask('arg1', kwarg1='value')``."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:24
msgid ""
"a dictionary mapping host strings to the given task's return value for that "
"host's execution run. For example, ``execute(foo, hosts=['a', 'b'])`` might "
"return ``{'a': None, 'b': 'bar'}`` if ``foo`` returned nothing on host `a` "
"but returned ``'bar'`` on host `b`.  In situations where a task execution "
"fails for a given host but overall progress does not abort (such as when "
":ref:`env.skip_bad_hosts <skip-bad-hosts>` is True) the return value for "
"that host will be the error object or message."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:25
msgid ""
"a dictionary mapping host strings to the given task's return value for that "
"host's execution run. For example, ``execute(foo, hosts=['a', 'b'])`` might "
"return ``{'a': None, 'b': 'bar'}`` if ``foo`` returned nothing on host `a` "
"but returned ``'bar'`` on host `b`."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:30
msgid ""
"In situations where a task execution fails for a given host but overall "
"progress does not abort (such as when :ref:`env.skip_bad_hosts <skip-bad-"
"hosts>` is True) the return value for that host will be the error object or "
"message."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:36
msgid ""
":ref:`The execute usage docs <execute>`, for an expanded explanation and "
"some examples."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:40
msgid ""
"Added the return value mapping; previously this function had no defined "
"return value."
msgstr ""
