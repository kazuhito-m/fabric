#
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-29 17:11+0900\n"
"PO-Revision-Date: 2014-01-24 17:07+0900\n"
"Last-Translator: JOTAKI, Taisuke <tekapo@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"X-Generator: Poedit 1.6.3\n"

#: ../../installation.rst:3
msgid "Installation"
msgstr "インストール"

#: ../../installation.rst:5
msgid ""
"Fabric is best installed via `pip <http://pip.openplans.org>`_ (highly "
"recommended) or `easy_install <http://wiki.python.org/moin/"
"CheeseShopTutorial>`_ (older, but still works fine), e.g.::"
msgstr ""
"Fabricのインストールの一番いい方法は `pip <http://pip.openplans.org>`_ (お勧"
"めです)もしくは `easy_install <http://wiki.python.org/moin/"
"CheeseShopTutorial>`_ (古いですが動作します)です。例えば::"

#: ../../installation.rst:12
msgid ""
"You may also opt to use your operating system's package manager; the package "
"is typically called ``fabric`` or ``python-fabric``. E.g.::"
msgstr ""
"また、お使いのオペレーティングシステムのパッケージマネージャーを利用してもい"
"いでしょう。パッケージ名はたいてい ``fabric`` もしくは ``python-fabric`` で"
"す。例えば::"

#: ../../installation.rst:17
msgid ""
"Advanced users wanting to install a development version may use ``pip`` to "
"grab the latest master branch (as well as the dev version of the Paramiko "
"dependency)::"
msgstr ""
"開発版のインストールを望む上級ユーザーは ``pip`` を使って最新のマスターブラン"
"チを取得できます。(依存のためParamikoの開発版も必要です)::"

#: ../../installation.rst:24
msgid ""
"Or, to install an editable version for debugging/hacking, execute ``pip "
"install -e .`` (or ``python setup.py install``) inside a :ref:`downloaded "
"<downloads>` or :ref:`cloned <source-code-checkouts>` copy of the source "
"code."
msgstr ""
"もしくは、デバッグやハッキングのために編集可能なバージョンをインストールした"
"い場合は、 :ref:`downloaded <downloads>` もしくは :ref:`cloned <source-code-"
"checkouts>` したソースコード内で ``pip install -e .`` (もしくは ``python "
"setup.py install``) を実行してください。"

#: ../../installation.rst:30
msgid ""
"Any development installs of Fabric (whether via ``==dev`` or ``install -e``) "
"require the development version of Paramiko to be installed beforehand, or "
"Fabric's installation may fail."
msgstr ""
"Fabricのどの開発版(``==dev`` もしくは ``install -e`` のどちらでも)でも"
"Paramikoの開発版の事前のインストールが必要です。さもないとFabricのインストー"
"ルに失敗します。"

#: ../../installation.rst:36
msgid "Dependencies"
msgstr "依存"

#: ../../installation.rst:38
msgid ""
"In order for Fabric's installation to succeed, you will need four primary "
"pieces of software:"
msgstr "Fabricのインストールには次の主に4つのソフトウェアが必要です:"

#: ../../installation.rst:40
msgid "the Python programming language;"
msgstr "Pythonプログラム言語"

#: ../../installation.rst:41
msgid "the ``setuptools`` packaging/installation library;"
msgstr "``setuptools`` パッケージング/インストールライブラリ"

#: ../../installation.rst:42
msgid "the Python ``paramiko`` SSH2 library;"
msgstr "Python ``paramiko`` SSH2 ライブラリ"

#: ../../installation.rst:43
msgid "and ``paramiko``'s dependency, the PyCrypto cryptography library."
msgstr "``paramiko`` の依存、PyCrypto 暗号ライブラリ"

#: ../../installation.rst:45
msgid "and, if using the :doc:`parallel execution mode </usage/parallel>`:"
msgstr ""
"そしてもし :doc:`parallel execution mode </usage/parallel>` を利用する場合は:"

#: ../../installation.rst:47
msgid "the `multiprocessing`_ library."
msgstr "`マルチプロセッシング`_ ライブラリ"

#: ../../installation.rst:49
msgid ""
"If you're using Paramiko 1.12 or above, you will also need an additional "
"dependency for Paramiko:"
msgstr ""
"Paramiko 1.12以上を使っている場合は、Paramikoの追加の依存も必要になるでしょ"
"う:"

#: ../../installation.rst:52
msgid "the `ecdsa <https://pypi.python.org/pypi/ecdsa/>`_ library"
msgstr "`ecdsa <https://pypi.python.org/pypi/ecdsa/>`_ ライブラリー"

#: ../../installation.rst:54
msgid ""
"Please read on for important details on these -- there are a few gotchas."
msgstr ""
"各依存については重要な詳細がありますので続けて読み進めてください。知っておい"
"たほうがいいことがいくつかあります。"

#: ../../installation.rst:57
msgid "Python"
msgstr "Python"

#: ../../installation.rst:59
msgid ""
"Fabric requires `Python <http://python.org>`_ version 2.5 or 2.6. Some "
"caveats and notes about other Python versions:"
msgstr ""
"Fabricは `Python <http://python.org>`_ バージョン2.5もしくは2.6を必要としま"
"す。Pythonの他のバージョンについてはいくつかの注意事項があります。"

#: ../../installation.rst:62
msgid ""
"We are not planning on supporting **Python 2.4** given its age and the "
"number of useful tools in Python 2.5 such as context managers and new "
"modules. That said, the actual amount of 2.5-specific functionality is not "
"prohibitively large, and we would link to -- but not support -- a third-"
"party 2.4-compatible fork. (No such fork exists at this time, to our "
"knowledge.)"
msgstr ""
"**Python 2.4** をサポートする予定はありません。このバージョンが古いということ"
"と、コンテキストマネージャーや新しいモジュールなど、Python 2.5の数多くの便利"
"なツールのためです。とは言え、2.5特有の機能の数は実際には特に多いということは"
"ないので、サードパーティの2.4互換フォークへのリンク -- サポートではなく -- を"
"紹介すると思います(今のところ、私たちの知っている限りではまだそうしたフォーク"
"はありませんが)。"

#: ../../installation.rst:67
msgid ""
"Fabric has not yet been tested on **Python 3.x** and is thus likely to be "
"incompatible with that line of development. However, we try to be at least "
"somewhat forward-looking (e.g. using ``print()`` instead of ``print``) and "
"will definitely be porting to 3.x in the future once our dependencies do."
msgstr ""
"Fabricは **Python 3.x** ではまだテストされていませんので互換性がないかもしれ"
"ません。とはいえ、少なくとも前向きに検討していて(例えば、``print`` ではなく "
"``print()`` を使用する)、将来的には依存するライブラリ等が3.xに移植されれば間"
"違いなくFabricも3.xに移植します。"

#: ../../installation.rst:73
msgid "setuptools"
msgstr "setuptools"

#: ../../installation.rst:75
msgid ""
"`Setuptools`_ comes with some Python installations by default; if yours "
"doesn't, you'll need to grab it. In such situations it's typically packaged "
"as ``python-setuptools``, ``py25-setuptools`` or similar. Fabric may drop "
"its setuptools dependency in the future, or include alternative support for "
"the `Distribute`_ project, but for now setuptools is required for "
"installation."
msgstr ""
"`Setuptools`_ はインストールされるPythonによってはデフォルトで同梱されていま"
"す。もしなければ、入れる必要があります。その場合、たいていはパッケージ名が "
"``python-setuptools`` や ``py25-setuptools``、もしくは似た名称になっていま"
"す。Fabricは将来的にはこのsetuptoolsへの依存をなくすか、代替の `Distribute`_ "
"プロジェクトへのサポートを含むようにします。しかし今のところはインストールに "
"setuptools が必要です。"

#: ../../installation.rst:85
msgid "PyCrypto"
msgstr "PyCrypto"

#: ../../installation.rst:87
msgid ""
"`PyCrypto <https://www.dlitz.net/software/pycrypto/>`_  provides the low-"
"level (C-based) encryption algorithms used to run SSH, and is thus required "
"by our SSH library. There are a couple gotchas associated with installing "
"PyCrypto: its compatibility with Python's package tools, and the fact that "
"it is a C-based extension."
msgstr ""
"`PyCrypto <https://www.dlitz.net/software/pycrypto/>`_ はSSHの実行で利用され"
"る低レベル (Cベース) の暗号アルゴリズムを提供していて、そのため、わたしたちの"
"SSHライブラリでも必要になります。PyCryptoのインストールに関してはいつくか知っ"
"ておいたほうがいいことがあります。Pythonのパッケージツールとの互換性とCベース"
"の拡張であるということです。"

#: ../../installation.rst:96
msgid "Package tools"
msgstr "パッケージツール"

#: ../../installation.rst:98
msgid ""
"We strongly recommend using ``pip`` to install Fabric as it is newer and "
"generally better than ``easy_install``. However, a combination of bugs in "
"specific versions of Python, ``pip`` and PyCrypto can prevent installation "
"of PyCrypto. Specifically:"
msgstr ""
"Fabricのインストールには ``pip`` の利用を強くおすすめします。"
"``easy_install`` よりも新しく、一般的に言っても優れているからです。とは言え、"
"Pythonと ``pip`` とPyCryptoの特定のバージョンでの組み合わせによってはバグがあ"
"り、PyCryptoのインストールができないことがあります。特に、"

#: ../../installation.rst:103
msgid "Python = 2.5.x"
msgstr "Python = 2.5.x"

#: ../../installation.rst:104
msgid "PyCrypto >= 2.1 (which is required to run Fabric >= 1.3)"
msgstr "PyCrypto >= 2.1 (これにはFabric >= 1.3が必要です)"

#: ../../installation.rst:105
msgid "``pip`` < 0.8.1"
msgstr "``pip`` < 0.8.1"

#: ../../installation.rst:107
msgid ""
"When all three criteria are met, you may encounter ``No such file or "
"directory`` IOErrors when trying to ``pip install Fabric`` or ``pip install "
"PyCrypto``."
msgstr ""
"この3つの条件がそろった時に ``pip install Fabric`` もしくは ``pip install "
"PyCrypto`` を実行しようとすると ``No such file or directory`` IOエラーに出く"
"わすでしょう。"

#: ../../installation.rst:111
msgid ""
"The fix is simply to make sure at least one of the above criteria is not "
"met, by doing the following (in order of preference):"
msgstr ""
"修正は簡単で、以下を実行し、上の3つの条件のうち一つでも満たさなくすることで"
"す (望ましい順):"

#: ../../installation.rst:114
msgid ""
"Upgrade to ``pip`` 0.8.1 or above, e.g. by running ``pip install -U pip``."
msgstr ""
"``pip install -U pip`` を実行するなどして ``pip`` 0.8.1 以上にアップグレード"
"する"

#: ../../installation.rst:115
msgid "Upgrade to Python 2.6 or above."
msgstr "Python 2.6以上にアップグレードする"

#: ../../installation.rst:116
msgid ""
"Downgrade to Fabric 1.2.x, which does not require PyCrypto >= 2.1, and "
"install PyCrypto 2.0.1 (the oldest version on PyPI which works with Fabric "
"1.2.)"
msgstr ""
"PyCrypto 2.1位上を必要としないFabric 1.2.x にダウングレードし、PyCrypto "
"2.0.1 (Fabric 1.2で動作するPyPIの最も古いバージョン)"

#: ../../installation.rst:122
msgid "C extension"
msgstr "C拡張"

#: ../../installation.rst:124
msgid ""
"Unless you are installing from a precompiled source such as a Debian apt "
"repository or RedHat RPM, or using :ref:`pypm <pypm>`, you will also need "
"the ability to build Python C-based modules from source in order to install "
"PyCrypto. Users on **Unix-based platforms** such as Ubuntu or Mac OS X will "
"need the traditional C build toolchain installed (e.g. Developer Tools / "
"XCode Tools on the Mac, or the ``build-essential`` package on Ubuntu or "
"Debian Linux -- basically, anything with ``gcc``, ``make`` and so forth) as "
"well as the Python development libraries, often named ``python-dev`` or "
"similar."
msgstr ""
"Debian aptリポジトリもしくはRedHat RPMなどのコンパイル済みのソースからインス"
"トールしたり、もしくは :ref:`pypm <pypm>` を使っていたりするのでなければ、"
"PyCryptoをインストールするためにはソースからPythonのCベースモジュールをビルド"
"できるようになっている必要があります。UbuntuやMac OS Xのような **Unixベースの"
"プラットフォーム** のユーザは、 ``python-dev`` もしくは似たような名称のPython"
"開発ライブラリとともに、伝統的なCのビルドツールチェインがインストールされてい"
"る必要があります。(例えば、MacならDeveloper Tools / XCode Tools、Ubuntuや"
"Debianなら ``build-essential`` パッケージ -- 基本的に ``gcc``、 ``make`` など"
"などが付帯しているものなんでも)"

#: ../../installation.rst:133
msgid ""
"For **Windows** users we recommend using :ref:`pypm`, installing a C "
"development environment such as `Cygwin <http://cygwin.com>`_ or obtaining a "
"precompiled Win32 PyCrypto package from `voidspace's Python modules page "
"<http://www.voidspace.org.uk/python/modules.shtml#pycrypto>`_."
msgstr ""
"**Windows** ユーザーは :ref:`pypm` の利用か、 `Cygwin <http://cygwin.com>`_ "
"などのC開発環境のインストール、もしくは `voidspaceのPythonモジュールページ "
"<http://www.voidspace.org.uk/python/modules.shtml#pycrypto>`_ からコンパイル"
"済みのWin32 PyCryptoパッケージの取得をおすすめします。"

#: ../../installation.rst:139
msgid ""
"Some Windows users whose Python is 64-bit have found that the PyCrypto "
"dependency ``winrandom`` may not install properly, leading to ImportErrors. "
"In this scenario, you'll probably need to compile ``winrandom`` yourself via "
"e.g. MS Visual Studio.  See :issue:`194` for info."
msgstr ""
"64ビットのPythonを使用しているWindowsユーザーによっては、PyCryptoの依存 "
"``winrandom`` が正しくインストールできず、ImportErrorsを引き起こすことがあり"
"ます。この場合、MS Visual Studioなどで ``winrandom`` をご自分でコンパイルする"
"必要があるかもしれません。詳細は :issue:`194` をご覧ください。"

#: ../../installation.rst:146
msgid "``multiprocessing``"
msgstr "``マルチプロセッシング``"

#: ../../installation.rst:148
msgid ""
"An optional dependency, the ``multiprocessing`` library is included in "
"Python's standard library in version 2.6 and higher. If you're using Python "
"2.5 and want to make use of Fabric's :doc:`parallel execution features </"
"usage/parallel>` you'll need to install it manually; the recommended route, "
"as usual, is via ``pip``.  Please see the `multiprocessing PyPI page <http://"
"pypi.python.org/pypi/multiprocessing/>`_ for details."
msgstr ""
"オプションの依存である ``multiprocessing`` ライブラリはPythonの2.6以上で標準"
"ライブラリに含まれています。もしPythonの2.5を利用していてFabricの :doc:`並列"
"実行機能 </usage/parallel>` を利用したい場合は、手動でインストールする必要が"
"あります。おすすめの方法は、いつもと同じく ``pip`` 経由です。詳細は `マルチプ"
"ロセッシングPyPIのページ <http://pypi.python.org/pypi/multiprocessing/>`_ を"
"ご覧ください。"

#: ../../installation.rst:157
msgid ""
"Early versions of Python 2.6 (in our testing, 2.6.0 through 2.6.2) ship with "
"a buggy ``multiprocessing`` module that appears to cause Fabric to hang at "
"the end of sessions involving large numbers of concurrent hosts. If you "
"encounter this problem, either use :ref:`env.pool_size / -z <pool-size>` to "
"limit the amount of concurrency, or upgrade to Python >=2.6.3."
msgstr ""
"Python 2.6の初期のバージョン(わたしたちのテストでは2.6.0から2.6.2)ではバギー"
"な ``multiprocessing`` モジュールが同梱されていて、並列ホストの数が多い時の"
"セッションの最後にFabricをハングさせることがあるようです。もしこの現象に出く"
"わしたら並列処理の数を制限するために :ref:`env.pool_size / -z <pool-size>` を"
"利用するか、Python 2.6.3位上にアップグレードしてください。"

#: ../../installation.rst:164
msgid ""
"Python 2.5 is unaffected, as it requires the PyPI version of "
"``multiprocessing``, which is newer than that shipped with Python <2.6.3."
msgstr ""
"Python 2.5 では影響はありません。``multiprocessing`` のPyPIバージョンを必要と"
"するからで、これはPython 2.6.3未満で同梱されているものより新しいからです。"

#: ../../installation.rst:168
msgid "Development dependencies"
msgstr "開発の依存"

#: ../../installation.rst:170
msgid ""
"If you are interested in doing development work on Fabric (or even just "
"running the test suite), you may also need to install some or all of the "
"following packages:"
msgstr ""
"Fabricの開発作業(もしくはただたんにテストの実行)に興味があるのなら、以下の"
"パッケージの一部もしくはすべてをインストールする必要があります:"

#: ../../installation.rst:174
msgid ""
"`git <http://git-scm.com>`_ and `Mercurial`_, in order to obtain some of the "
"other dependencies below;"
msgstr ""
"`git <http://git-scm.com>`_ と `Mercurial`_、以下の他の依存を取得するため;"

#: ../../installation.rst:176
msgid "`Nose <https://github.com/nose-devs/nose>`_"
msgstr "`Nose <https://github.com/nose-devs/nose>`_"

#: ../../installation.rst:177
msgid "`Coverage <http://nedbatchelder.com/code/modules/coverage.html>`_"
msgstr "`Coverage <http://nedbatchelder.com/code/modules/coverage.html>`_"

#: ../../installation.rst:178
msgid "`PyLint <http://www.logilab.org/857>`_"
msgstr "`PyLint <http://www.logilab.org/857>`_"

#: ../../installation.rst:179
msgid "`Fudge <http://farmdev.com/projects/fudge/index.html>`_"
msgstr "`Fudge <http://farmdev.com/projects/fudge/index.html>`_"

#: ../../installation.rst:180
msgid "`Sphinx <http://sphinx.pocoo.org/>`_"
msgstr "`Sphinx <http://sphinx.pocoo.org/>`_"

#: ../../installation.rst:182
msgid ""
"For an up-to-date list of exact testing/development requirements, including "
"version numbers, please see the ``requirements.txt`` file included with the "
"source distribution. This file is intended to be used with ``pip``, e.g. "
"``pip install -r requirements.txt``."
msgstr ""
"テスト/開発に必要なものやバージョンの正確な最新の一覧は配布ソースに含まれてい"
"る ``requirements.txt`` ファイルを参照してください。このファイルは  ``pip "
"install -r requirements.txt`` など ``pip`` の利用を前提としています。"

#: ../../installation.rst:193
msgid "Downloads"
msgstr "ダウンロード"

#: ../../installation.rst:195
msgid ""
"To obtain a tar.gz or zip archive of the Fabric source code, you may visit "
"`Fabric's PyPI page <http://pypi.python.org/pypi/Fabric>`_, which offers "
"manual downloads in addition to being the entry point for ``pip`` and ``easy-"
"install``."
msgstr ""
"Fabricソースコードのtar.gzもしくはzipアーカイブを取得するには `FabricのPyPI"
"ページ <http://pypi.python.org/pypi/Fabric>`_ を参照してください。 ``pip`` "
"や ``easy-install`` 以外の手動でのダウンロードができます。"

#: ../../installation.rst:204
msgid "Source code checkouts"
msgstr "ソースコードのチェックアウト"

#: ../../installation.rst:206
msgid ""
"The Fabric developers manage the project's source code with the `Git <http://"
"git-scm.com>`_ DVCS. To follow Fabric's development via Git instead of "
"downloading official releases, you have the following options:"
msgstr ""
"Fabricの開発者は `Git <http://git-scm.com>`_ DVCSでプロジェクトのソースコード"
"を管理しています。公式のリリースをダウンロードするのではなくGit経由でFabricの"
"開発を追うのなら、次のオプションがあります:"

#: ../../installation.rst:210
msgid ""
"Clone the canonical repository straight from `the Fabric organization's "
"repository on Github <https://github.com/fabric/fabric>`_, ``git://github."
"com/fabric/fabric.git``"
msgstr ""
"`Github上のFabricオーガナイザーのリポジトリ <https://github.com/fabric/"
"fabric>`_、 ``git://github.com/fabric/fabric.git`` から正規のリポジトリをク"
"ローンする"

#: ../../installation.rst:213
msgid ""
"Make your own fork of the Github repository by making a Github account, "
"visiting `fabric/fabric <http://github.com/fabric/fabric>`_ and clicking the "
"\"fork\" button."
msgstr ""
"GitHubアカウントを作成し、 `fabric/fabric <http://github.com/fabric/"
"fabric>`_ を開き \"fork\" ボタンをクリックしてGitHubリポジトリからフォークす"
"る"

#: ../../installation.rst:219
msgid ""
"If you've obtained the Fabric source via source control and plan on updating "
"your checkout in the future, we highly suggest using ``python setup.py "
"develop`` instead -- it will use symbolic links instead of file copies, "
"ensuring that imports of the library or use of the command-line tool will "
"always refer to your checkout."
msgstr ""
"Fabricのソースをソース管理経由で取得し、将来もそのチェックアウトをアップデー"
"トするつもりなら、 ``python setup.py develop`` の利用を強くおすすめします。こ"
"れはファイルのコピーの代わりにシンボリックリンクを利用し、ライブラリーのイン"
"ポートやコマンドラインツールの利用で常にそのチェックアウトを参照するようにし"
"ます。"

#: ../../installation.rst:225
msgid ""
"For information on the hows and whys of Fabric development, including which "
"branches may be of interest and how you can help out, please see the :doc:"
"`development` page."
msgstr ""
"Fabric開発の詳細、面白そうなブランチ、協力方法については :doc:`development` "
"のページを参照してください。"

#: ../../installation.rst:233
msgid "ActivePython and PyPM"
msgstr "ActivePythonとPyPM"

#: ../../installation.rst:235
msgid ""
"Windows users who already have ActiveState's `ActivePython <http://www."
"activestate.com/activepython/downloads>`_ distribution installed may find "
"Fabric is best installed with `its package manager, PyPM <http://code."
"activestate.com/pypm/>`_. Below is example output from an installation of "
"Fabric via ``pypm``::"
msgstr ""
"ActiveStateの `ActivePython <http://www.activestate.com/activepython/"
"downloads>`_ ディストリビューションがすでにインストールされているWindowsユー"
"ザーは、`そのパッケージマネージャーのPyPM <http://code.activestate.com/pypm/"
">`_ でFabricをインストールするのが一番です。以下は ``pypm`` 経由でFabricをイ"
"ンストールする時の出力の例です::"
