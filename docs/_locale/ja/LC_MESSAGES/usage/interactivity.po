#
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-15 23:24+0900\n"
"PO-Revision-Date: 2014-04-30 14:26+0900\n"
"Last-Translator: JOTAKI, Taisuke <tekapo@gmail.com>\n"
"Language-Team: Japanese (http://www.transifex.com/projects/p/fabric-"
"docs-1_8_2/language/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Language: ja\n"
"X-Generator: Poedit 1.6.5\n"

#: ../../usage/interactivity.rst:3
msgid "Interaction with remote programs"
msgstr "リモートプログラムとのやりとり"

#: ../../usage/interactivity.rst:5
msgid ""
"Fabric's primary operations, `~fabric.operations.run` and `~fabric."
"operations.sudo`, are capable of sending local input to the remote end, in a "
"manner nearly identical to the ``ssh`` program. For example, programs which "
"display password prompts (e.g. a database dump utility, or changing a user's "
"password) will behave just as if you were interacting with them directly."
msgstr ""
"Fabricの主な操作、 `~fabric.operations.run` と `~fabric.operations.sudo` で"
"は、ある意味 ``ssh`` とほとんど同じようにローカルの入力をリモート側に送ること"
"ができます。例えば、パスワードのプロンプトを表示するプログラム(例えば、データ"
"ベースのダンプユーティリティやユーザーパスワードの変更など)は直接やり取りをし"
"ているように振る舞います。"

#: ../../usage/interactivity.rst:12
msgid ""
"However, as with ``ssh`` itself, Fabric's implementation of this feature is "
"subject to a handful of limitations which are not always intuitive. This "
"document discusses such issues in detail."
msgstr ""
"とは言え、 ``ssh`` と同様に、Fabricのこの機能の実装も直感的とは限らないいくつ"
"かの制限に影響されます。このドキュメントではこうした問題について詳述します。"

#: ../../usage/interactivity.rst:17
msgid ""
"Readers unfamiliar with the basics of Unix stdout and stderr pipes, and/or "
"terminal devices, may wish to visit the Wikipedia pages for `Unix pipelines "
"<http://en.wikipedia.org/wiki/Pipe_(Unix)>`_ and `Pseudo terminals <http://"
"en.wikipedia.org/wiki/Pseudo_terminal>`_ respectively."
msgstr ""
"Unixの標準出力や標準エラー出力のパイプとターミナルデバイスに基礎に馴染みのな"
"い読者は `Unix パイプ <http://ja.wikipedia.org/wiki/"
"%E3%83%91%E3%82%A4%E3%83%97_%28%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC"
"%E3%82%BF%29>`_ や `擬似端末 <http://ja.wikipedia.org/wiki/%E6%93%AC%E4%BC%BC"
"%E7%AB%AF%E6%9C%AB>`_ を参照するとよいでしょう。"

#: ../../usage/interactivity.rst:26
msgid "Combining stdout and stderr"
msgstr "標準出力と標準エラー出力の結合"

#: ../../usage/interactivity.rst:28
msgid ""
"The first issue to be aware of is that of the stdout and stderr streams, and "
"why they are separated or combined as needed."
msgstr ""
"最初に気づく問題は標準出力と標準エラー出力のストリームで、なぜ両者が随時分離"
"したり結合したりするのかということです。"

#: ../../usage/interactivity.rst:32
msgid "Buffering"
msgstr "バッファリング"

#: ../../usage/interactivity.rst:34
msgid ""
"Fabric 0.9.x and earlier, and Python itself, buffer output on a line-by-line "
"basis: text is not printed to the user until a newline character is found. "
"This works fine in most situations but becomes problematic when one needs to "
"deal with partial-line output such as prompts."
msgstr ""
"Fabric 0.9.x以前では、またPython自身でも、バッファーの出力は原則的に行ごと"
"で、新しい文字が現れるまでテキストはユーザーに表示されませんでした。これは大"
"抵の場合は問題ありませんが、プロンプトのように一部分の行の出力を扱う必要があ"
"る場合には問題となります。"

#: ../../usage/interactivity.rst:40
msgid ""
"Line-buffered output can make programs appear to halt or freeze for no "
"reason, as prompts print out text without a newline, waiting for the user to "
"enter their input and press Return."
msgstr ""
"行でバッファされた出力はプログラムを理由なく中断させたりフリーズさせたりする"
"ように見えます。プロンプトは新しい行なしでテキストを表示し、ユーザーが入力し"
"てリターンを押すのを待ちます。"

#: ../../usage/interactivity.rst:44
msgid ""
"Newer Fabric versions buffer both input and output on a character-by-"
"character basis in order to make interaction with prompts possible. This has "
"the convenient side effect of enabling interaction with complex programs "
"utilizing the \"curses\" libraries or which otherwise redraw the screen "
"(think ``top``)."
msgstr ""
"新しいFabricのバージョンは入力と出力の両方ともを文字ごとにバッファし、プロン"
"プトとのやりとりを可能にします。これは、 \"呪われた\" ライブラリを活用する複"
"雑なプログラムとのやりとりを可能にします。さもなければスクリーンを再描画しま"
"す( ``top`` を考えてみてください)。"

#: ../../usage/interactivity.rst:50
msgid "Crossing the streams"
msgstr "ストリームの交差"

#: ../../usage/interactivity.rst:52
msgid ""
"Unfortunately, printing to stderr and stdout simultaneously (as many "
"programs do) means that when the two streams are printed independently one "
"byte at a time, they can become garbled or meshed together. While this can "
"sometimes be mitigated by line-buffering one of the streams and not the "
"other, it's still a serious issue."
msgstr ""
"残念ながら、標準エラー出力と標準出力へ同時に表示させるということは(多くのプロ"
"グラムで行われていますが)、この2つのストリームが無関係に1バイトずつ表示される"
"という意味であり、文字化けしたり、混ざって表示されたりすることがあります。こ"
"れはストリームの一方を行でバッファすることで緩和させることはできますが、重要"
"な問題であることには変わりありません。"

#: ../../usage/interactivity.rst:58
msgid ""
"To solve this problem, Fabric uses a setting in our SSH layer which merges "
"the two streams at a low level and causes output to appear more naturally. "
"This setting is represented in Fabric as the :ref:`combine-stderr` env var "
"and keyword argument, and is ``True`` by default."
msgstr ""
"この問題を解決するため、Fabricでは低レベルでこの2つをマージするSSH層の設定を"
"利用し、出力をより自然に表示するようにしています。この設定はFabricでは :ref:"
"`combine-stderr` env変数とキーワード引数として表され、デフォルトでは``True`` "
"が設定されています。"

#: ../../usage/interactivity.rst:63
msgid ""
"Due to this default setting, output will appear correctly, but at the cost "
"of an empty ``.stderr`` attribute on the return values of `~fabric."
"operations.run`/`~fabric.operations.sudo`, as all output will appear to be "
"stdout."
msgstr ""
"このデフォルトの設定のおかげで出力が正しく表示されますが、`~fabric."
"operations.run`/`~fabric.operations.sudo` の返り値に空の ``.stderr`` 属性とい"
"う代償を払っていて、すべての出力が標準出力に表示されてしまいます。"

#: ../../usage/interactivity.rst:68
msgid ""
"Conversely, users requiring a distinct stderr stream at the Python level and "
"who aren't bothered by garbled user-facing output (or who are hiding stdout "
"and stderr from the command in question) may opt to set this to ``False`` as "
"needed."
msgstr ""
"逆に、Pythonレベルでの標準エラー出力のストリームを区別した形で必要とするユー"
"ザーやユーザーが目にする出力が文字化けしていても構わないユーザー(あるいは、問"
"題となる標準出力や標準エラー出力をコマンドから隠しているユーザー)は、必要に応"
"じてこの値を ``False`` にセットすることもできます。"

#: ../../usage/interactivity.rst:77
msgid "Pseudo-terminals"
msgstr "擬似ターミナル"

#: ../../usage/interactivity.rst:79
msgid ""
"The other main issue to consider when presenting interactive prompts to "
"users is that of echoing the user's own input."
msgstr ""
"ユーザーに対話式プロンプトを表示するときに考慮すべきもう一つの大きな問題は、"
"ユーザー自身の入力のエコーです。"

#: ../../usage/interactivity.rst:83
msgid "Echoes"
msgstr "エコー"

#: ../../usage/interactivity.rst:85
msgid ""
"Typical terminal applications or bona fide text terminals (e.g. when using a "
"Unix system without a running GUI) present programs with a terminal device "
"called a tty or pty (for pseudo-terminal). These automatically echo all text "
"typed into them back out to the user (via stdout), as interaction without "
"seeing what you had just typed would be difficult. Terminal devices are also "
"able to conditionally turn off echoing, allowing secure password prompts."
msgstr ""
"一般的なターミナルアプリケーションや本物のテキストターミナル(例えば、GUIなし"
"でUnixシステムを使用している時)ではttyもしくはpty (pseudo-terminal - 擬似ター"
"ミナル)と呼ばれるターミナルデバイスとともにプログラムが表示されます。タイプし"
"た文字を見ずにやりとりするのは困難なため、これらでは、タイプされたすべてのテ"
"キストが(標準出力経由で)ユーザーに自動的にエコーされます。ターミナルデバイス"
"でもまた、条件付きでエコーを向こうにでき、パスワードのプロンプトを安全にでき"
"ます。"

#: ../../usage/interactivity.rst:92
msgid ""
"However, it's possible for programs to be run without a tty or pty present "
"at all (consider cron jobs, for example) and in this situation, any stdin "
"data being fed to the program won't be echoed. This is desirable for "
"programs being run without any humans around, and it's also Fabric's old "
"default mode of operation."
msgstr ""
"とは言え、ttyやptyをまったく表示させなくてもプログラムは実行可能(例えばcronの"
"ジョブを考えてみてください)で、このプログラムに注ぎ込まれるどんな標準入力の"
"データもエコーされません。これは人間が周りにいなくても実行されるプログラムに"
"とっては望ましい挙動で、Fabricの以前のデフォルトの操作モードでした。"

#: ../../usage/interactivity.rst:99
msgid "Fabric's approach"
msgstr "Fabricのアプローチ"

#: ../../usage/interactivity.rst:101
msgid ""
"Unfortunately, in the context of executing commands via Fabric, when no pty "
"is present to echo a user's stdin, Fabric must echo it for them. This is "
"sufficient for many applications, but it presents problems for password "
"prompts, which become insecure."
msgstr ""
"残念ながら、Fabric経由でコマンドを実行するということは、ユーザーの標準入力を"
"エコーするためのptyがないときにFabricがそれをエコーしなくてはならないというこ"
"とです。これは多くのアプリケーションでは問題ありませんが、パスワードプロンプ"
"トにとっては問題であり、安全ではありません。"

#: ../../usage/interactivity.rst:106
msgid ""
"In the interests of security and meeting the principle of least surprise "
"(insofar as users are typically expecting things to behave as they would "
"when run in a terminal emulator), Fabric 1.0 and greater force a pty by "
"default. With a pty enabled, Fabric simply allows the remote end to handle "
"echoing or hiding of stdin and does not echo anything itself."
msgstr ""
"セキュリティ上の理由と驚かすことは最小にするべきという原則に沿うため(ユーザー"
"が一般的にはターミナルエミュレータで動作しているときと同じような挙動を期待し"
"ている限りにおいては)、Fabric 1.0以上ではデフォルトでptyを強制します。ptyが有"
"効のとき、Fabricは単にリモート側でエコーを扱うようにするか、もしくは標準入力"
"を隠してまったく何もエコーしないようにします。"

#: ../../usage/interactivity.rst:113
#, fuzzy
msgid ""
"In addition to allowing normal echo behavior, a pty also means programs that "
"behave differently when attached to a terminal device will then do so. For "
"example, programs that colorize output on terminals but not when run in the "
"background will print colored output. Be wary of this if you inspect the "
"return value of `~fabric.operations.run` or `~fabric.operations.sudo`!"
msgstr "通常のエコーの挙動を許可することに加えて、ptyは"

#: ../../usage/interactivity.rst:119
msgid ""
"For situations requiring the pty behavior turned off, the :option:`--no-pty` "
"command-line argument and :ref:`always-use-pty` env var may be used."
msgstr ""
"ptyの挙動の無効が求められる場合は、 :option:`--no-pty` のコマンドライン引数"
"と :ref:`always-use-pty` env変数が利用可能です。"

#: ../../usage/interactivity.rst:124
msgid "Combining the two"
msgstr "この2つの統合"

#: ../../usage/interactivity.rst:126
#, fuzzy
msgid ""
"As a final note, keep in mind that use of pseudo-terminals effectively "
"implies combining stdout and stderr -- in much the same way as the :ref:"
"`combine_stderr <combine_streams>` setting does. This is because a terminal "
"device naturally sends both stdout and stderr to the same place -- the "
"user's display -- thus making it impossible to differentiate between them."
msgstr ""
"最後の注意点として、擬似ターミナルを効果的に利用する標準出力と標準エラー出力"
"を統合するたいていは :ref:`combine_stderr <combine_streams>` の設定と同じ方法"
"でこれはターミナルデバイスが当山ながら標準出力と標準エラー出力の両方を同じ場"
"所、ユーザーのディスプレイに送るためしたがってこれが両者の分化を不可能にして"
"います。"

#: ../../usage/interactivity.rst:132
msgid ""
"However, at the Fabric level, the two groups of settings are distinct from "
"one another and may be combined in various ways. The default is for both to "
"be set to ``True``; the other combinations are as follows:"
msgstr ""
"とは言え、Fabricレベルではこの2つの設定グループはそれぞれ明確に区別され、様々"
"な方法で統合することができます。デフォルトでは、両方とも ``True`` にセットさ"
"れています。他の組み合わせは以下になります。"

#: ../../usage/interactivity.rst:136
#, fuzzy
msgid ""
"``run(\"cmd\", pty=False, combine_stderr=True)``: will cause Fabric to echo "
"all stdin itself, including passwords, as well as potentially altering "
"``cmd``'s behavior. Useful if ``cmd`` behaves undesirably when run under a "
"pty and you're not concerned about password prompts."
msgstr ""
"``run(\"cmd\", pty=False, combine_stderr=True)``: Fabricはパスワードも含め、"
"すべての標準入力をエコーします、てptyで動作していてパスワードのプロンプトにつ"
"いて心配していない時に ``cmd`` の挙動が好ましくない場合に便利です。"

#: ../../usage/interactivity.rst:140
#, fuzzy
msgid ""
"``run(\"cmd\", pty=False, combine_stderr=False)``: with both settings "
"``False``, Fabric will echo stdin and won't issue a pty -- and this is "
"highly likely to result in undesired behavior for all but the simplest "
"commands. However, it is also the only way to access a distinct stderr "
"stream, which is occasionally useful."
msgstr ""
"``run(\"cmd\", pty=False, combine_stderr=False)``: 両方の設定が ``False`` の"
"時、Fabricは標準入力をエコーし、will echo stdin and won't issue a pty -- and "
"this is highly likely to result in undesired behavior for all but the "
"simplest commands. However, it is also the only way to access a distinct "
"stderr stream, which is occasionally useful."

#: ../../usage/interactivity.rst:145
msgid ""
"``run(\"cmd\", pty=True, combine_stderr=False)``: valid, but won't really "
"make much of a difference, as ``pty=True`` will still result in merged "
"streams. May be useful for avoiding any edge case problems in "
"``combine_stderr`` (none are presently known)."
msgstr ""
"``run(\"cmd\", pty=True, combine_stderr=False)``: 有効ですが、``pty=True`` は"
"それでも結果としてはストリームにマージされるため、実際には大した違いはありま"
"せん。``combine_stderr`` では問題があるまれなケースを避けるには便利かもしれま"
"せん(まだ知られたものはありませんが)。"
