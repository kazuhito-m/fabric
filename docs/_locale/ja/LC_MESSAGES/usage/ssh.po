#
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-15 23:24+0900\n"
"PO-Revision-Date: 2014-06-17 14:56+0900\n"
"Last-Translator: JOTAKI, Taisuke <tekapo@gmail.com>\n"
"Language-Team: jabric-ja <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Language: ja\n"
"X-Generator: Poedit 1.6.5\n"

#: ../../usage/ssh.rst:3
msgid "SSH behavior"
msgstr "SSHの動作"

#: ../../usage/ssh.rst:5
msgid ""
"Fabric currently makes use of a pure-Python SSH re-implementation for "
"managing connections, meaning that there are occasionally spots where it is "
"limited by that library's capabilities. Below are areas of note where Fabric "
"will exhibit behavior that isn't consistent with, or as flexible as, the "
"behavior of the ``ssh`` command-line program."
msgstr ""
"Fabricでは、接続の管理にピュアPythonのSSH再実装を利用しています。これはつま"
"り、このライブラリーの機能に制限される箇所があるということを意味します。以下"
"は ``ssh`` コマンドラインプログラムの動作とは同等ではないか、それほどには柔軟"
"性がない、Fabricが示す動作の領域です。"

#: ../../usage/ssh.rst:13
msgid "Unknown hosts"
msgstr "未知のホスト"

#: ../../usage/ssh.rst:15
msgid ""
"SSH's host key tracking mechanism keeps tabs on all the hosts you attempt to "
"connect to, and maintains a ``~/.ssh/known_hosts`` file with mappings "
"between identifiers (IP address, sometimes with a hostname as well) and SSH "
"keys. (For details on how this works, please see the `OpenSSH documentation "
"<http://openssh.org/manual.html>`_.)"
msgstr ""
"SSHのホストキートラッキングメカニズムは、接続を試行したすべてのホストを把握"
"し、識別子(IPアドレスや、ときにはホスト名も)とSSHキーをマッピングして ``~/."
"ssh/known_hosts`` で維持管理します。(この動作の詳細は `OpenSSH documentation "
"<http://openssh.org/manual.html>`_ を御覧ください。)"

#: ../../usage/ssh.rst:21
msgid ""
"The ``paramiko`` library is capable of loading up your ``known_hosts`` file, "
"and will then compare any host it connects to, with that mapping. Settings "
"are available to determine what happens when an unknown host (a host whose "
"username or IP is not found in ``known_hosts``) is seen:"
msgstr ""
"``paramiko`` ライブラリは ``known_hosts`` ファイルを読み込むことができ、この"
"マッピングとともに、接続するすべてのホストを比較します。未知のホスト(ユーザー"
"名やIPが ``known_hosts`` に見当たらないホスト名)に遭遇したときにどのように動"
"作させるかを決定する設定があります:"

#: ../../usage/ssh.rst:26
msgid ""
"**Reject**: the host key is rejected and the connection is not made. This "
"results in a Python exception, which will terminate your Fabric session with "
"a message that the host is unknown."
msgstr ""

#: ../../usage/ssh.rst:29
msgid ""
"**Add**: the new host key is added to the in-memory list of known hosts, the "
"connection is made, and things continue normally. Note that this does "
"**not** modify your on-disk ``known_hosts`` file!"
msgstr ""

#: ../../usage/ssh.rst:32
msgid ""
"**Ask**: not yet implemented at the Fabric level, this is a ``paramiko`` "
"library option which would result in the user being prompted about the "
"unknown key and whether to accept it."
msgstr ""

#: ../../usage/ssh.rst:36
msgid ""
"Whether to reject or add hosts, as above, is controlled in Fabric via the :"
"ref:`env.reject_unknown_hosts <reject-unknown-hosts>` option, which is False "
"by default for convenience's sake. We feel this is a valid tradeoff between "
"convenience and security; anyone who feels otherwise can easily modify their "
"fabfiles at module level to set ``env.reject_unknown_hosts = True``."
msgstr ""

#: ../../usage/ssh.rst:44
msgid "Known hosts with changed keys"
msgstr "変更されたキーの既知のホスト"

#: ../../usage/ssh.rst:46
msgid ""
"The point of SSH's key/fingerprint tracking is so that man-in-the-middle "
"attacks can be detected: if an attacker redirects your SSH traffic to a "
"computer under his control, and pretends to be your original destination "
"server, the host keys will not match. Thus, the default behavior of SSH (and "
"its Python implementation) is to immediately abort the connection when a "
"host previously recorded in ``known_hosts`` suddenly starts sending us a "
"different host key."
msgstr ""

#: ../../usage/ssh.rst:54
msgid ""
"In some edge cases such as some EC2 deployments, you may want to ignore this "
"potential problem. Our SSH layer, at the time of writing, doesn't give us "
"control over this exact behavior, but we can sidestep it by simply skipping "
"the loading of ``known_hosts`` -- if the host list being compared to is "
"empty, then there's no problem. Set :ref:`env.disable_known_hosts <disable-"
"known-hosts>` to True when you want this behavior; it is False by default, "
"in order to preserve default SSH behavior."
msgstr ""

#: ../../usage/ssh.rst:63
msgid ""
"Enabling :ref:`env.disable_known_hosts <disable-known-hosts>` will leave you "
"wide open to man-in-the-middle attacks! Please use with caution."
msgstr ""
