# 
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-29 17:11+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../api/contrib/console.rst:2
msgid "Console Output Utilities"
msgstr ""

#: ../../../fabric/contrib/console.pydocstring of fabric.contrib.console:1
msgid "Console/terminal user interface functionality."
msgstr ""

#: ../../../fabric/contrib/console.pydocstring of
#: fabric.contrib.console.confirm:1
msgid "Ask user a yes/no question and return their response as True or False."
msgstr ""

#: ../../../fabric/contrib/console.pydocstring of
#: fabric.contrib.console.confirm:3
msgid ""
"``question`` should be a simple, grammatically complete question such as "
"\"Do you wish to continue?\", and will have a string similar to \" [Y/n] \" "
"appended automatically. This function will *not* append a question mark for "
"you."
msgstr ""

#: ../../../fabric/contrib/console.pydocstring of
#: fabric.contrib.console.confirm:8
msgid ""
"By default, when the user presses Enter without typing anything, \"yes\" is "
"assumed. This can be changed by specifying ``default=False``."
msgstr ""

#: ../../api/contrib/django.rst:3
msgid "Django Integration"
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of fabric.contrib.django:3
msgid ""
"These functions streamline the process of initializing Django's settings "
"module environment variable. Once this is done, your fabfile may import from"
" your Django project, or Django itself, without requiring the use of "
"``manage.py`` plugins or having to set the environment variable yourself "
"every time you use your fabfile."
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of fabric.contrib.django:9
msgid ""
"Currently, these functions only allow Fabric to interact with local-to-your-"
"fabfile Django installations. This is not as limiting as it sounds; for "
"example, you can use Fabric as a remote \"build\" tool as well as using it "
"locally. Imagine the following fabfile::"
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of fabric.contrib.django:29
msgid ""
"With Fabric installed on both ends, you could execute "
"``print_production_instances`` locally, which would trigger "
"``print_instances`` on the production server -- which would then be "
"interacting with your production Django database."
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of fabric.contrib.django:34
msgid ""
"As another example, if your local and remote settings are similar, you can "
"use it to obtain e.g. your database settings, and then use those when "
"executing a remote (non-Fabric) command. This would allow you some degree of"
" freedom even if Fabric is only installed locally::"
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of fabric.contrib.django:52
msgid ""
"The above snippet will work if run from a local, development environment, "
"again provided your local ``settings.py`` mirrors your remote one in terms "
"of database connection info."
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of
#: fabric.contrib.django.project:1
msgid "Sets ``DJANGO_SETTINGS_MODULE`` to ``'<name>.settings'``."
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of
#: fabric.contrib.django.project:3
msgid ""
"This function provides a handy shortcut for the common case where one is "
"using the Django default naming convention for their settings file and "
"location."
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of
#: fabric.contrib.django.project:7
msgid ""
"Uses `settings_module` -- see its documentation for details on why and how "
"to use this functionality."
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of
#: fabric.contrib.django.settings_module:1
msgid ""
"Set ``DJANGO_SETTINGS_MODULE`` shell environment variable to ``module``."
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of
#: fabric.contrib.django.settings_module:3
msgid ""
"Due to how Django works, imports from Django or a Django project will fail "
"unless the shell environment variable ``DJANGO_SETTINGS_MODULE`` is "
"correctly set (see `the Django settings docs "
"<http://docs.djangoproject.com/en/dev/topics/settings/>`_.)"
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of
#: fabric.contrib.django.settings_module:8
msgid ""
"This function provides a shortcut for doing so; call it near the top of your"
" fabfile or Fabric-using code, after which point any Django imports should "
"work correctly."
msgstr ""

#: ../../../fabric/contrib/django.pydocstring of
#: fabric.contrib.django.settings_module:14
msgid ""
"This function sets a **shell** environment variable (via ``os.environ``) and"
" is unrelated to Fabric's own internal \"env\" variables."
msgstr ""

#: ../../api/contrib/files.rst:3
msgid "File and Directory Management"
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files:1
msgid "Module providing easy API for working with remote files and folders."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:1
msgid "Append string (or list of strings) ``text`` to ``filename``."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:3
msgid ""
"When a list is given, each string inside is handled independently (but in "
"the order given.)"
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:6
msgid ""
"If ``text`` is already found in ``filename``, the append is not run, and "
"None is returned immediately. Otherwise, the given text is appended to the "
"end of the given ``filename`` via e.g. ``echo '$text' >> $filename``."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:10
msgid ""
"The test for whether ``text`` already exists defaults to a full line match, "
"e.g. ``^<text>$``, as this seems to be the most sensible approach for the "
"\"append lines to a file\" use case. You may override this and force partial"
" searching (e.g. ``^<text>``) by specifying ``partial=True``."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:15
msgid ""
"Because ``text`` is single-quoted, single quotes will be transparently "
"backslash-escaped. This can be disabled with ``escape=False``."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:18
#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.contains:12 ../../../fabric/contrib/files.pydocstring
#: of fabric.contrib.files.exists:3 ../../../fabric/contrib/files.pydocstring
#: of fabric.contrib.files.sed:12
msgid "If ``use_sudo`` is True, will use `sudo` instead of `run`."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:20
#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.contains:18
msgid ""
"The ``shell`` argument will be eventually passed to ``run/sudo``. See "
"description of the same argumnet in ``~fabric.contrib.sed`` for details."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:23
msgid "Added the ``partial`` keyword argument."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:25
#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.contains:21
msgid ""
"Swapped the order of the ``filename`` and ``text`` arguments to be "
"consistent with other functions in this module."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:28
msgid "Changed default value of ``partial`` kwarg to be ``False``."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:30
#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.contains:24
msgid ""
"Updated the regular expression related escaping to try and solve various "
"corner cases."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.append:33
#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.comment:30 ../../../fabric/contrib/files.pydocstring
#: of fabric.contrib.files.contains:29
#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.sed:28
#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.uncomment:15
msgid "Added the ``shell`` keyword argument."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.comment:1
msgid "Attempt to comment out all lines in ``filename`` matching ``regex``."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.comment:3
msgid ""
"The default commenting character is `#` and may be overridden by the "
"``char`` argument."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.comment:6
#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.uncomment:6
msgid ""
"This function uses the `sed` function, and will accept the same "
"``use_sudo``, ``shell`` and ``backup`` keyword arguments that `sed` does."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.comment:9
msgid ""
"`comment` will prepend the comment character to the beginning of the line, "
"so that lines end up looking like so::"
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.comment:16
msgid ""
"In other words, comment characters will not \"follow\" indentation as they "
"sometimes do when inserted by hand. Neither will they have a trailing space "
"unless you specify e.g. ``char='# '``."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.comment:22
msgid ""
"In order to preserve the line being commented out, this function will wrap "
"your ``regex`` argument in parentheses, so you don't need to. It will ensure"
" that any preceding/trailing ``^`` or ``$`` characters are correctly moved "
"outside the parentheses. For example, calling ``comment(filename, "
"r'^foo$')`` will result in a `sed` call with the \"before\" regex of "
"``r'^(foo)$'`` (and the \"after\" regex, naturally, of ``r'#\\1'``.)"
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.contains:1
msgid "Return True if ``filename`` contains ``text`` (which may be a regex.)"
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.contains:3
msgid ""
"By default, this function will consider a partial line match (i.e. where "
"``text`` only makes up part of the line it's on). Specify ``exact=True`` to "
"change this behavior so that only a line containing exactly ``text`` results"
" in a True return value."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.contains:8
msgid ""
"This function leverages ``egrep`` on the remote end (so it may not follow "
"Python regular expression syntax perfectly), and skips ``env.shell`` wrapper"
" by default."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.contains:14
msgid ""
"If ``escape`` is False, no extra regular expression related escaping is "
"performed (this includes overriding ``exact`` so that no ``^``/``$`` is "
"added.)"
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.contains:27
msgid "Added ``escape`` keyword argument."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.exists:1
msgid "Return True if given path exists on the current remote host."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.exists:5
msgid ""
"`exists` will, by default, hide all output (including the run line, stdout, "
"stderr and any warning resulting from the file not existing) in order to "
"avoid cluttering output. You may specify ``verbose=True`` to change this "
"behavior."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.first:1
msgid ""
"Given one or more file paths, returns first one found, or None if none "
"exist. May specify ``use_sudo`` and ``verbose`` which are passed to "
"`exists`."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.is_link:1
msgid "Return True if the given path is a symlink on the current remote host."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.is_link:3
msgid "If ``use_sudo`` is True, will use `.sudo` instead of `.run`."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.is_link:5
msgid ""
"`.is_link` will, by default, hide all output. Give ``verbose=True`` to "
"change this."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.sed:1
msgid "Run a search-and-replace on ``filename`` with given regex patterns."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.sed:3
msgid ""
"Equivalent to ``sed -i<backup> -r -e \"/<limit>/ "
"s/<before>/<after>/<flags>g\" <filename>``. Setting ``backup`` to an empty "
"string will, disable backup file creation."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.sed:7
msgid ""
"For convenience, ``before`` and ``after`` will automatically escape forward "
"slashes, single quotes and parentheses for you, so you don't need to specify"
" e.g.  ``http:\\/\\/foo\\.com``, instead just using ``http://foo\\.com`` is "
"fine."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.sed:14
msgid ""
"The ``shell`` argument will be eventually passed to `run`/`sudo`. It "
"defaults to False in order to avoid problems with many nested levels of "
"quotes and backslashes. However, setting it to True may help when using "
"``~fabric.operations.cd`` to wrap explicit or implicit ``sudo`` calls. "
"(``cd`` by it's nature is a shell built-in, not a standalone command, so it "
"should be called within a shell.)"
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.sed:21
msgid ""
"Other options may be specified with sed-compatible regex flags -- for "
"example, to make the search and replace case insensitive, specify "
"``flags=\"i\"``. The ``g`` flag is always specified regardless, so you do "
"not need to remember to include it when overriding this parameter."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of fabric.contrib.files.sed:26
msgid "The ``flags`` parameter."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.uncomment:1
msgid "Attempt to uncomment all lines in ``filename`` matching ``regex``."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.uncomment:3
msgid ""
"The default comment delimiter is `#` and may be overridden by the ``char`` "
"argument."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.uncomment:9
msgid ""
"`uncomment` will remove a single whitespace character following the comment "
"character, if it exists, but will preserve all preceding whitespace.  For "
"example, ``# foo`` would become ``foo`` (the single space is stripped) but "
"``    # foo`` would become ``    foo`` (the single space is still stripped, "
"but the preceding 4 spaces are not.)"
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.upload_template:1
msgid "Render and upload a template text file to a remote host."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.upload_template:3
msgid ""
"Returns the result of the inner call to `~fabric.operations.put` -- see its "
"documentation for details."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.upload_template:6
msgid ""
"``filename`` should be the path to a text file, which may contain `Python "
"string interpolation formatting "
"<http://docs.python.org/library/stdtypes.html#string-formatting>`_ and will "
"be rendered with the given context dictionary ``context`` (if given.)"
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.upload_template:11
msgid ""
"Alternately, if ``use_jinja`` is set to True and you have the Jinja2 "
"templating library available, Jinja will be used to render the template "
"instead. Templates will be loaded from the invoking user's current working "
"directory by default, or from ``template_dir`` if given."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.upload_template:16
msgid ""
"The resulting rendered file will be uploaded to the remote file path "
"``destination``.  If the destination file already exists, it will be renamed"
" with a ``.bak`` extension unless ``backup=False`` is specified."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.upload_template:20
msgid ""
"By default, the file will be copied to ``destination`` as the logged-in "
"user; specify ``use_sudo=True`` to use `sudo` instead."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.upload_template:23
msgid ""
"The ``mirror_local_mode`` and ``mode`` kwargs are passed directly to an "
"internal `~fabric.operations.put` call; please see its documentation for "
"details on these two options."
msgstr ""

#: ../../../fabric/contrib/files.pydocstring of
#: fabric.contrib.files.upload_template:27
msgid "Added the ``backup``, ``mirror_local_mode`` and ``mode`` kwargs."
msgstr ""

#: ../../api/contrib/project.rst:3
msgid "Project Tools"
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of fabric.contrib.project:1
msgid ""
"Useful non-core functionality, e.g. functions composing multiple operations."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:1
msgid ""
"Synchronize a remote directory with the current project directory via rsync."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:3
msgid ""
"Where ``upload_project()`` makes use of ``scp`` to copy one's entire project"
" every time it is invoked, ``rsync_project()`` uses the ``rsync`` command-"
"line utility, which only transfers files newer than those on the remote end."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:8
msgid ""
"``rsync_project()`` is thus a simple wrapper around ``rsync``; for details "
"on how ``rsync`` works, please see its manpage. ``rsync`` must be installed "
"on both your local and remote systems in order for this operation to work "
"correctly."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:13
msgid ""
"This function makes use of Fabric's ``local()`` operation, and returns the "
"output of that function call; thus it will return the stdout, if any, of the"
" resultant ``rsync`` call."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:17
msgid "``rsync_project()`` takes the following parameters:"
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:19
msgid ""
"``remote_dir``: the only required parameter, this is the path to the "
"directory on the remote server. Due to how ``rsync`` is implemented, the "
"exact behavior depends on the value of ``local_dir``:"
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:23
msgid ""
"If ``local_dir`` ends with a trailing slash, the files will be dropped "
"inside of ``remote_dir``. E.g. ``rsync_project(\"/home/username/project\", "
"\"foldername/\")`` will drop the contents of ``foldername`` inside of "
"``/home/username/project``."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:27
msgid ""
"If ``local_dir`` does **not** end with a trailing slash (and this includes "
"the default scenario, when ``local_dir`` is not specified), ``remote_dir`` "
"is effectively the \"parent\" directory, and a new directory named after "
"``local_dir`` will be created inside of it. So "
"``rsync_project(\"/home/username\", \"foldername\")`` would create a new "
"directory ``/home/username/foldername`` (if needed) and place the files "
"there."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:35
msgid ""
"``local_dir``: by default, ``rsync_project`` uses your current working "
"directory as the source directory. This may be overridden by specifying "
"``local_dir``, which is a string passed verbatim to ``rsync``, and thus may "
"be a single directory (``\"my_directory\"``) or multiple directories "
"(``\"dir1 dir2\"``). See the ``rsync`` documentation for details."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:40
msgid ""
"``exclude``: optional, may be a single string, or an iterable of strings, "
"and is used to pass one or more ``--exclude`` options to ``rsync``."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:42
msgid ""
"``delete``: a boolean controlling whether ``rsync``'s ``--delete`` option is"
" used. If True, instructs ``rsync`` to remove remote files that no longer "
"exist locally. Defaults to False."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:45
msgid ""
"``extra_opts``: an optional, arbitrary string which you may use to pass "
"custom arguments or options to ``rsync``."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:47
msgid ""
"``ssh_opts``: Like ``extra_opts`` but specifically for the SSH options "
"string (rsync's ``--rsh`` flag.)"
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:49
msgid ""
"``capture``: Sent directly into an inner `~fabric.operations.local` call."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:50
msgid ""
"``upload``: a boolean controlling whether file synchronization is performed "
"up or downstream. Upstream by default."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:52
msgid ""
"``default_opts``: the default rsync options ``-pthrvz``, override if desired"
" (e.g. to remove verbosity, etc)."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:55
msgid ""
"Furthermore, this function transparently honors Fabric's port and SSH key "
"settings. Calling this function when the current host string contains a "
"nonstandard port, or when ``env.key_filename`` is non-empty, will use the "
"specified port and/or SSH key filename(s)."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:60
msgid ""
"For reference, the approximate ``rsync`` command-line call that is "
"constructed by this function is the following::"
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:66
msgid "The ``ssh_opts`` keyword argument."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:68
msgid "The ``capture`` keyword argument."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.rsync_project:70
msgid "The ``default_opts`` keyword argument."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.upload_project:1
msgid "Upload the current project to a remote system via ``tar``/``gzip``."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.upload_project:3
msgid ""
"``local_dir`` specifies the local project directory to upload, and defaults "
"to the current working directory."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.upload_project:6
msgid ""
"``remote_dir`` specifies the target directory to upload into (meaning that a"
" copy of ``local_dir`` will appear as a subdirectory of ``remote_dir``) and "
"defaults to the remote user's home directory."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.upload_project:10
msgid ""
"``use_sudo`` specifies which method should be used when executing commands "
"remotely. ``sudo`` will be used if use_sudo is True, otherwise ``run`` will "
"be used."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.upload_project:14
msgid ""
"This function makes use of the ``tar`` and ``gzip`` programs/libraries, thus"
" it will not work too well on Win32 systems unless one is using Cygwin or "
"something similar. It will attempt to clean up the local and remote tarfiles"
" when it finishes executing, even in the event of a failure."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.upload_project:19
msgid "Added the ``local_dir`` and ``remote_dir`` kwargs."
msgstr ""

#: ../../../fabric/contrib/project.pydocstring of
#: fabric.contrib.project.upload_project:22
msgid "Added the ``use_sudo`` kwarg."
msgstr ""

#: ../../api/core/colors.rst:3
msgid "Color output functions"
msgstr ""

#: ../../../fabric/colors.pydocstring of fabric.colors:3
msgid "Functions for wrapping strings in ANSI color codes."
msgstr ""

#: ../../../fabric/colors.pydocstring of fabric.colors:5
msgid ""
"Each function within this module returns the input string ``text``, wrapped "
"with ANSI color codes for the appropriate color."
msgstr ""

#: ../../../fabric/colors.pydocstring of fabric.colors:8
msgid "For example, to print some text as green on supporting terminals::"
msgstr ""

#: ../../../fabric/colors.pydocstring of fabric.colors:14
msgid ""
"Because these functions simply return modified strings, you can nest them::"
msgstr ""

#: ../../../fabric/colors.pydocstring of fabric.colors:20
msgid ""
"If ``bold`` is set to ``True``, the ANSI flag for bolding will be flipped on"
" for that particular invocation, which usually shows up as a bold or "
"brighter version of the original color on most terminals."
msgstr ""

#: ../../api/core/context_managers.rst:3
msgid "Context Managers"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of fabric.context_managers:1
msgid "Context managers for use with the ``with`` statement."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of fabric.context_managers:3
msgid ""
"When using Python 2.5, you will need to start your fabfile with ``from "
"__future__ import with_statement`` in order to make use of the ``with`` "
"statement (which is a regular, non ``__future__`` feature of Python 2.6+.)"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of fabric.context_managers:8
msgid ""
"If you are using multiple directly nested ``with`` statements, it can be "
"convenient to use multiple context expressions in one single with statement."
" Instead of writing::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of fabric.context_managers:17
msgid "you can write::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of fabric.context_managers:23
msgid ""
"Note that you need Python 2.7+ for this to work. On Python 2.5 or 2.6, you "
"can do the following::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of fabric.context_managers:31
msgid ""
"Finally, note that `~fabric.context_managers.settings` implements ``nested``"
" itself -- see its API doc for details."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:1
msgid ""
"Context manager that keeps directory state when calling remote operations."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:3
msgid ""
"Any calls to `run`, `sudo`, `get`, or `put` within the wrapped block will "
"implicitly have a string similar to ``\"cd <path> && \"`` prefixed in order "
"to give the sense that there is actually statefulness involved."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:8
msgid ""
"`cd` only affects *remote* paths -- to modify *local* paths, use "
"`~fabric.context_managers.lcd`."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:11
msgid ""
"Because use of `cd` affects all such invocations, any code making use of "
"those operations, such as much of the ``contrib`` section, will also be "
"affected by use of `cd`."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:15
msgid ""
"Like the actual 'cd' shell builtin, `cd` may be called with relative paths "
"(keep in mind that your default starting directory is your remote user's "
"``$HOME``) and may be nested as well."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:19
msgid ""
"Below is a \"normal\" attempt at using the shell 'cd', which doesn't work "
"due to how shell-less SSH connections are implemented -- state is **not** "
"kept between invocations of `run` or `sudo`::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:26
msgid ""
"The above snippet will list the contents of the remote user's ``$HOME`` "
"instead of ``/var/www``. With `cd`, however, it will work as expected::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:32
msgid "Finally, a demonstration (see inline comments) of nesting::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:41
msgid ""
"This context manager is currently implemented by appending to (and, as "
"always, restoring afterwards) the current value of an environment variable, "
"``env.cwd``. However, this implementation may change in the future, so we do"
" not recommend manually altering ``env.cwd`` -- only the *behavior* of `cd` "
"will have any guarantee of backwards compatibility."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:50
msgid ""
"Space characters will be escaped automatically to make dealing with such "
"directory names easier."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:53
msgid ""
"Applies to `get` and `put` in addition to the command-running operations."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.cd:57
msgid "`~fabric.context_managers.lcd`"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.char_buffered:1
msgid "Force local terminal ``pipe`` be character, not line, buffered."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.char_buffered:3
msgid "Only applies on Unix-based systems; on Windows this is a no-op."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.hide:1
msgid "Context manager for setting the given output ``groups`` to False."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.hide:3
msgid ""
"``groups`` must be one or more strings naming the output groups defined in "
"`~fabric.state.output`. The given groups will be set to False for the "
"duration of the enclosed block, and restored to their previous value "
"afterwards."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.hide:8
msgid ""
"For example, to hide the \"[hostname] run:\" status lines, as well as "
"preventing printout of stdout and stderr, one might use `hide` as follows::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.lcd:1
msgid "Context manager for updating local current working directory."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.lcd:3
msgid ""
"This context manager is identical to `~fabric.context_managers.cd`, except "
"that it changes a different env var (`lcwd`, instead of `cwd`) and thus only"
" affects the invocation of `~fabric.operations.local` and the local "
"arguments to `~fabric.operations.get`/`~fabric.operations.put`."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.lcd:8
msgid ""
"Relative path arguments are relative to the local user's current working "
"directory, which will vary depending on where Fabric (or Fabric-using code) "
"was invoked. You can check what this is with `os.getcwd "
"<http://docs.python.org/release/2.6/library/os.html#os.getcwd>`_. It may be "
"useful to pin things relative to the location of the fabfile in use, which "
"may be found in :ref:`env.real_fabfile <real-fabfile>`"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.path:1
msgid ""
"Append the given ``path`` to the PATH used to execute any wrapped commands."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.path:3
msgid ""
"Any calls to `run` or `sudo` within the wrapped block will implicitly have a"
" string similar to ``\"PATH=$PATH:<path> \"`` prepended before the given "
"command."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.path:7
msgid ""
"You may customize the behavior of `path` by specifying the optional "
"``behavior`` keyword argument, as follows:"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.path:10
msgid ""
"``'append'``: append given path to the current ``$PATH``, e.g. "
"``PATH=$PATH:<path>``. This is the default behavior."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.path:12
msgid ""
"``'prepend'``: prepend given path to the current ``$PATH``, e.g. "
"``PATH=<path>:$PATH``."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.path:14
msgid ""
"``'replace'``: ignore previous value of ``$PATH`` altogether, e.g. "
"``PATH=<path>``."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.path:19
msgid ""
"This context manager is currently implemented by modifying (and, as always, "
"restoring afterwards) the current value of environment variables, "
"``env.path`` and ``env.path_behavior``. However, this implementation may "
"change in the future, so we do not recommend manually altering them "
"directly."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.prefix:1
msgid ""
"Prefix all wrapped `run`/`sudo` commands with given command plus ``&&``."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.prefix:3
msgid ""
"This is nearly identical to `~fabric.operations.cd`, except that nested "
"invocations append to a list of command strings instead of modifying a "
"single string."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.prefix:7
msgid ""
"Most of the time, you'll want to be using this alongside a shell script "
"which alters shell state, such as ones which export or alter shell "
"environment variables."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.prefix:11
msgid ""
"For example, one of the most common uses of this tool is with the ``workon``"
" command from `virtualenvwrapper "
"<http://www.doughellmann.com/projects/virtualenvwrapper/>`_::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.prefix:18
msgid "In the above snippet, the actual shell command run would be this::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.prefix:22
msgid ""
"This context manager is compatible with `~fabric.context_managers.cd`, so if"
" your virtualenv doesn't ``cd`` in its ``postactivate`` script, you could do"
" the following::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.prefix:31
msgid "Which would result in executions like so::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.prefix:36
msgid ""
"Finally, as alluded to near the beginning, `~fabric.context_managers.prefix`"
" may be nested if desired, e.g.::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.prefix:44
msgid "The result::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.prefix:49
msgid "Contrived, but hopefully illustrative."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.quiet:1
msgid "Alias to ``settings(hide('everything'), warn_only=True)``."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.quiet:3
msgid ""
"Useful for wrapping remote interrogative commands which you expect to fail "
"occasionally, and/or which you want to silence."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.quiet:6
msgid "Example::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.quiet:11
msgid ""
"When used in a task, the above snippet will not produce any ``run: test -e "
"/tmp/build`` line, nor will any stdout/stderr display, and command failure "
"is ignored."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.quiet:16
msgid ""
":ref:`env.warn_only <warn_only>`, `~fabric.context_managers.settings`, "
"`~fabric.context_managers.hide`"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.remote_tunnel:1
msgid ""
"Create a tunnel forwarding a locally-visible port to the remote target."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.remote_tunnel:3
msgid ""
"For example, you can let the remote host access a database that is installed"
" on the client host::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.remote_tunnel:12
msgid ""
"The database might be installed on a client only reachable from the client "
"host (as opposed to *on* the client itself)::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.remote_tunnel:19
msgid "``remote_tunnel`` accepts up to four arguments:"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.remote_tunnel:21
msgid "``remote_port`` (mandatory) is the remote port to listen to."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.remote_tunnel:22
msgid ""
"``local_port`` (optional) is the local port to connect to; the default is "
"the same port as the remote one."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.remote_tunnel:24
msgid ""
"``local_host`` (optional) is the locally-reachable computer (DNS name or IP "
"address) to connect to; the default is ``localhost`` (that is, the same "
"computer Fabric is running on)."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.remote_tunnel:27
msgid ""
"``remote_bind_address`` (optional) is the remote IP address to bind to for "
"listening, on the current target. It should be an IP address assigned to an "
"interface on the target (or a DNS name that resolves to such IP). You can "
"use \"0.0.0.0\" to bind to all interfaces."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.remote_tunnel:33
msgid ""
"By default, most SSH servers only allow remote tunnels to listen to the "
"localhost interface (127.0.0.1). In these cases, `remote_bind_address` is "
"ignored by the server, and the tunnel will listen only to 127.0.0.1."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:1
msgid "Nest context managers and/or override ``env`` variables."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:3
msgid "`settings` serves two purposes:"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:5
msgid ""
"Most usefully, it allows temporary overriding/updating of ``env`` with any "
"provided keyword arguments, e.g. ``with settings(user='foo'):``. Original "
"values, if any, will be restored once the ``with`` block closes."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:9
msgid ""
"The keyword argument ``clean_revert`` has special meaning for ``settings`` "
"itself (see below) and will be stripped out before execution."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:13
msgid ""
"In addition, it will use `contextlib.nested`_ to nest any given non-keyword "
"arguments, which should be other context managers, e.g. ``with "
"settings(hide('stderr'), show('stdout')):``."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:19
msgid ""
"These behaviors may be specified at the same time if desired. An example "
"will hopefully illustrate why this is considered useful::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:32
msgid ""
"The above task executes a `run` statement, but will warn instead of aborting"
" if the ``ls`` fails, and all output -- including the warning itself -- is "
"prevented from printing to the user. The end result, in this scenario, is a "
"completely silent task that allows the caller to figure out what type of "
"system the remote host is, without incurring the handful of output that "
"would normally occur."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:39
msgid ""
"Thus, `settings` may be used to set any combination of environment variables"
" in tandem with hiding (or showing) specific levels of output, or in tandem "
"with any other piece of Fabric functionality implemented as a context "
"manager."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:44
msgid ""
"If ``clean_revert`` is set to ``True``, ``settings`` will **not** revert "
"keys which are altered within the nested block, instead only reverting keys "
"whose values remain the same as those given. More examples will make this "
"clear; below is how ``settings`` operates normally::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:59
msgid ""
"The internal modification of ``env.host_string`` is nullified -- not always "
"desirable. That's where ``clean_revert`` comes in::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:72
msgid ""
"Brand new keys which did not exist in ``env`` prior to using ``settings`` "
"are also preserved if ``clean_revert`` is active. When ``False``, such keys "
"are removed when the block exits."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.settings:76
msgid "The ``clean_revert`` kwarg."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.shell_env:1
msgid "Set shell environment variables for wrapped commands."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.shell_env:3
msgid ""
"For example, the below shows how you might set a ZeroMQ related environment "
"variable when installing a Python ZMQ library::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.shell_env:9
msgid ""
"As with `~fabric.context_managers.prefix`, this effectively turns the "
"``run`` command into::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.shell_env:14
msgid "Multiple key-value pairs may be given simultaneously."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.shell_env:17
msgid ""
"If used to affect the behavior of `~fabric.operations.local` when running "
"from a Windows localhost, ``SET`` commands will be used to implement this "
"feature."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.show:1
msgid "Context manager for setting the given output ``groups`` to True."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.show:3
msgid ""
"``groups`` must be one or more strings naming the output groups defined in "
"`~fabric.state.output`. The given groups will be set to True for the "
"duration of the enclosed block, and restored to their previous value "
"afterwards."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.show:8
msgid ""
"For example, to turn on debug output (which is typically off by default)::"
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.show:14
msgid ""
"As almost all output groups are displayed by default, `show` is most useful "
"for turning on the normally-hidden ``debug`` group, or when you know or "
"suspect that code calling your own code is trying to hide output with "
"`hide`."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.warn_only:1
msgid "Alias to ``settings(warn_only=True)``."
msgstr ""

#: ../../../fabric/context_managers.pydocstring of
#: fabric.context_managers.warn_only:4
msgid ""
":ref:`env.warn_only <warn_only>`, `~fabric.context_managers.settings`, "
"`~fabric.context_managers.quiet`"
msgstr ""

#: ../../api/core/decorators.rst:3
msgid "Decorators"
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators:1
msgid "Convenience decorators for use in fabfiles."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.hosts:1
msgid ""
"Decorator defining which host or hosts to execute the wrapped function on."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.hosts:3
msgid ""
"For example, the following will ensure that, barring an override on the "
"command line, ``my_func`` will be run on ``host1``, ``host2`` and ``host3``,"
" and with specific users on ``host1`` and ``host3``::"
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.hosts:11
msgid ""
"`~fabric.decorators.hosts` may be invoked with either an argument list "
"(``@hosts('host1')``, ``@hosts('host1', 'host2')``) or a single, iterable "
"argument (``@hosts(['host1', 'host2'])``)."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.hosts:15
msgid ""
"Note that this decorator actually just sets the function's ``.hosts`` "
"attribute, which is then read prior to executing the function."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.hosts:18
msgid ""
"Allow a single, iterable argument (``@hosts(iterable)``) to be used instead "
"of requiring ``@hosts(*iterable)``."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.roles:1
msgid "Decorator defining a list of role names, used to look up host lists."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.roles:3
msgid ""
"A role is simply defined as a key in `env` whose value is a list of one or "
"more host connection strings. For example, the following will ensure that, "
"barring an override on the command line, ``my_func`` will be executed "
"against the hosts listed in the ``webserver`` and ``dbserver`` roles::"
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.roles:17
msgid ""
"As with `~fabric.decorators.hosts`, `~fabric.decorators.roles` may be "
"invoked with either an argument list or a single, iterable argument. "
"Similarly, this decorator uses the same mechanism as "
"`~fabric.decorators.hosts` and simply sets ``<function>.roles``."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.roles:22
msgid ""
"Allow a single, iterable argument to be used (same as "
"`~fabric.decorators.hosts`)."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.runs_once:1
msgid "Decorator preventing wrapped function from running more than once."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.runs_once:3
msgid ""
"By keeping internal state, this decorator allows you to mark a function such"
" that it will only run once per Python interpreter session, which in typical"
" use means \"once per invocation of the ``fab`` program\"."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.runs_once:7
msgid ""
"Any function wrapped with this decorator will silently fail to execute the "
"2nd, 3rd, ..., Nth time it is called, and will return the value of the "
"original run."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.runs_once:11
msgid "``runs_once`` does not work with parallel task execution."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.serial:1
msgid ""
"Forces the wrapped function to always run sequentially, never in parallel."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.serial:3
msgid ""
"This decorator takes precedence over the global value of :ref:`env.parallel "
"<env-parallel>`. However, if a task is decorated with both "
"`~fabric.decorators.serial` *and* `~fabric.decorators.parallel`, "
"`~fabric.decorators.parallel` wins."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.parallel:1
msgid ""
"Forces the wrapped function to run in parallel, instead of sequentially."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.parallel:3
msgid ""
"This decorator takes precedence over the global value of :ref:`env.parallel "
"<env-parallel>`. It also takes precedence over `~fabric.decorators.serial` "
"if a task is decorated with both."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.task:1
msgid "Decorator declaring the wrapped function to be a new-style task."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.task:3
msgid ""
"May be invoked as a simple, argument-less decorator (i.e. ``@task``) or with"
" arguments customizing its behavior (e.g. ``@task(alias='myalias')``)."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.task:6
msgid ""
"Please see the :ref:`new-style task <task-decorator>` documentation for "
"details on how to use this decorator."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.task:9
msgid ""
"Added the ``alias``, ``aliases``, ``task_class`` and ``default`` keyword "
"arguments. See :ref:`task-decorator-arguments` for details."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.task:12
msgid "Added the ``name`` keyword argument."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.task:15
msgid "`~fabric.docs.unwrap_tasks`, `~fabric.tasks.WrappedCallableTask`"
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.with_settings:1
msgid "Decorator equivalent of ``fabric.context_managers.settings``."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.with_settings:3
msgid ""
"Allows you to wrap an entire function as if it was called inside a block "
"with the ``settings`` context manager. This may be useful if you know you "
"want a given setting applied to an entire function body, or wish to retrofit"
" old code without indenting everything."
msgstr ""

#: ../../../fabric/decorators.pydocstring of fabric.decorators.with_settings:8
msgid ""
"For example, to turn aborts into warnings for an entire task function::"
msgstr ""

#: ../../../fabric/decorators.pydocstring of
#: fabric.decorators.with_settings:14
msgid "`~fabric.context_managers.settings`"
msgstr ""

#: ../../api/core/docs.rst:3
msgid "Documentation helpers"
msgstr ""

#: ../../../fabric/docs.pydocstring of fabric.docs.unwrap_tasks:1
msgid ""
"Replace task objects on ``module`` with their wrapped functions instead."
msgstr ""

#: ../../../fabric/docs.pydocstring of fabric.docs.unwrap_tasks:3
msgid ""
"Specifically, look for instances of `~fabric.tasks.WrappedCallableTask` and "
"replace them with their ``.wrapped`` attribute (the original decorated "
"function.)"
msgstr ""

#: ../../../fabric/docs.pydocstring of fabric.docs.unwrap_tasks:7
msgid ""
"This is intended for use with the Sphinx autodoc tool, to be run near the "
"bottom of a project's ``conf.py``. It ensures that the autodoc extension "
"will have full access to the \"real\" function, in terms of function "
"signature and so forth. Without use of ``unwrap_tasks``, autodoc is unable "
"to access the function signature (though it is able to see e.g. "
"``__doc__``.)"
msgstr ""

#: ../../../fabric/docs.pydocstring of fabric.docs.unwrap_tasks:14
msgid "For example, at the bottom of your ``conf.py``::"
msgstr ""

#: ../../../fabric/docs.pydocstring of fabric.docs.unwrap_tasks:20
msgid ""
"You can go above and beyond, and explicitly **hide** all non-task functions,"
" by saying ``hide_nontasks=True``. This renames all objects failing the \"is"
" it a task?\" check so they appear to be private, which will then cause "
"autodoc to skip over them."
msgstr ""

#: ../../../fabric/docs.pydocstring of fabric.docs.unwrap_tasks:25
msgid ""
"``hide_nontasks`` is thus useful when you have a fabfile mixing in "
"subroutines with real tasks and want to document *just* the real tasks."
msgstr ""

#: ../../../fabric/docs.pydocstring of fabric.docs.unwrap_tasks:28
msgid ""
"If you run this within an actual Fabric-code-using session (instead of "
"within a Sphinx ``conf.py``), please seek immediate medical attention."
msgstr ""

#: ../../../fabric/docs.pydocstring of fabric.docs.unwrap_tasks:33
msgid "`~fabric.tasks.WrappedCallableTask`, `~fabric.decorators.task`"
msgstr ""

#: ../../api/core/network.rst:3
msgid "Network"
msgstr ""

#: ../../../fabric/network.pydocstring of fabric.network:1
msgid ""
"Classes and subroutines dealing with network connections and related topics."
msgstr ""

#: ../../../fabric/network.pydocstring of fabric.network.disconnect_all:1
msgid "Disconnect from all currently connected servers."
msgstr ""

#: ../../../fabric/network.pydocstring of fabric.network.disconnect_all:3
msgid ""
"Used at the end of ``fab``'s main loop, and also intended for use by library"
" users."
msgstr ""

#: ../../api/core/operations.rst:3
msgid "Operations"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations:1
msgid ""
"Functions to be used in fabfiles and other non-core code, such as "
"run()/sudo()."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:1
msgid "Download one or more files from a remote host."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:3
msgid ""
"`~fabric.operations.get` returns an iterable containing the absolute paths "
"to all local files downloaded, which will be empty if ``local_path`` was a "
"StringIO object (see below for more on using StringIO). This object will "
"also exhibit a ``.failed`` attribute containing any remote file paths which "
"failed to download, and a ``.succeeded`` attribute equivalent to ``not "
".failed``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:10
msgid ""
"``remote_path`` is the remote file or directory path to download, which may "
"contain shell glob syntax, e.g. ``\"/var/log/apache2/*.log\"``, and will "
"have tildes replaced by the remote home directory. Relative paths will be "
"considered relative to the remote user's home directory, or the current "
"remote working directory as manipulated by `~fabric.context_managers.cd`. If"
" the remote path points to a directory, that directory will be downloaded "
"recursively."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:18
msgid ""
"``local_path`` is the local file path where the downloaded file or files "
"will be stored. If relative, it will honor the local current working "
"directory as manipulated by `~fabric.context_managers.lcd`. It may be "
"interpolated, using standard Python dict-based interpolation, with the "
"following variables:"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:24
msgid ""
"``host``: The value of ``env.host_string``, eg ``myhostname`` or "
"``user@myhostname-222`` (the colon between hostname and port is turned into "
"a dash to maximize filesystem compatibility)"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:27
msgid ""
"``dirname``: The directory part of the remote file path, e.g. the "
"``src/projectname`` in ``src/projectname/utils.py``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:29
msgid ""
"``basename``: The filename part of the remote file path, e.g. the "
"``utils.py`` in ``src/projectname/utils.py``"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:31
msgid "``path``: The full remote path, e.g. ``src/projectname/utils.py``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:34
msgid ""
"When ``remote_path`` is an absolute directory path, only the inner "
"directories will be recreated locally and passed into the above variables. "
"So for example, ``get('/var/log', '%(path)s')`` would start writing out "
"files like ``apache2/access.log``, ``postgresql/8.4/postgresql.log``, etc, "
"in the local working directory. It would **not** write out e.g.  "
"``var/log/apache2/access.log``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:41
msgid ""
"Additionally, when downloading a single file, ``%(dirname)s`` and "
"``%(path)s`` do not make as much sense and will be empty and equivalent to "
"``%(basename)s``, respectively. Thus a call like "
"``get('/var/log/apache2/access.log', '%(path)s')`` will save a local file "
"named ``access.log``, not ``var/log/apache2/access.log``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:47
msgid ""
"This behavior is intended to be consistent with the command-line ``scp`` "
"program."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:50
msgid ""
"If left blank, ``local_path`` defaults to ``\"%(host)s/%(path)s\"`` in order"
" to be safe for multi-host invocations."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:54
msgid ""
"If your ``local_path`` argument does not contain ``%(host)s`` and your "
"`~fabric.operations.get` call runs against multiple hosts, your local files "
"will be overwritten on each successive run!"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:58
msgid ""
"If ``local_path`` does not make use of the above variables (i.e. if it is a "
"simple, explicit file path) it will act similar to ``scp`` or ``cp``, "
"overwriting pre-existing files if necessary, downloading into a directory if"
" given (e.g. ``get('/path/to/remote_file.txt', 'local_directory')`` will "
"create ``local_directory/remote_file.txt``) and so forth."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:64
msgid ""
"``local_path`` may alternately be a file-like object, such as the result of "
"``open('path', 'w')`` or a ``StringIO`` instance."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:68
msgid ""
"Attempting to `get` a directory into a file-like object is not valid and "
"will result in an error."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:72
msgid ""
"This function will use ``seek`` and ``tell`` to overwrite the entire "
"contents of the file-like object, in order to be consistent with the "
"behavior of `~fabric.operations.put` (which also considers the entire file)."
" However, unlike `~fabric.operations.put`, the file pointer will not be "
"restored to its previous location, as that doesn't make as much sense here "
"and/or may not even be possible."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:80
#: ../../../fabric/operations.pydocstring of fabric.operations.put:63
msgid ""
"If a file-like object such as StringIO has a ``name`` attribute, that will "
"be used in Fabric's printed output instead of the default ``<file obj>``"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:84
#: ../../../fabric/operations.pydocstring of fabric.operations.put:66
msgid ""
"Now honors the remote working directory as manipulated by "
"`~fabric.context_managers.cd`, and the local working directory as "
"manipulated by `~fabric.context_managers.lcd`."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:88
#: ../../../fabric/operations.pydocstring of fabric.operations.put:70
msgid "Now allows file-like objects in the ``local_path`` argument."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:90
msgid ""
"``local_path`` may now contain interpolated path- and host-related "
"variables."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:93
msgid ""
"Directories may be specified in the ``remote_path`` argument and will "
"trigger recursive downloads."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:96
msgid ""
"Return value is now an iterable of downloaded local file paths, which also "
"exhibits the ``.failed`` and ``.succeeded`` attributes."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.get:99
#: ../../../fabric/operations.pydocstring of fabric.operations.put:78
msgid "Allow a ``name`` attribute on file-like objects for log output"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.local:1
msgid "Run a command on the local system."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.local:3
msgid ""
"`local` is simply a convenience wrapper around the use of the builtin Python"
" ``subprocess`` module with ``shell=True`` activated. If you need to do "
"anything special, consider using the ``subprocess`` module directly."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.local:7
msgid ""
"``shell`` is passed directly to `subprocess.Popen "
"<http://docs.python.org/library/subprocess.html#subprocess.Popen>`_'s "
"``execute`` argument (which determines the local shell to use.)  As per the "
"linked documentation, on Unix the default behavior is to use ``/bin/sh``, so"
" this option is useful for setting that value to e.g.  ``/bin/bash``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.local:13
msgid ""
"`local` is not currently capable of simultaneously printing and capturing "
"output, as `~fabric.operations.run`/`~fabric.operations.sudo` do. The "
"``capture`` kwarg allows you to switch between printing and capturing as "
"necessary, and defaults to ``False``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.local:18
msgid ""
"When ``capture=False``, the local subprocess' stdout and stderr streams are "
"hooked up directly to your terminal, though you may use the global "
":doc:`output controls </usage/output_controls>` ``output.stdout`` and "
"``output.stderr`` to hide one or both if desired. In this mode, the return "
"value's stdout/stderr values are always empty."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.local:24
msgid ""
"When ``capture=True``, you will not see any output from the subprocess in "
"your terminal, but the return value will contain the captured stdout/stderr."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.local:28
msgid ""
"In either case, as with `~fabric.operations.run` and "
"`~fabric.operations.sudo`, this return value exhibits the ``return_code``, "
"``stderr``, ``failed`` and ``succeeded`` attributes. See `run` for details."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.local:32
msgid ""
"`~fabric.operations.local` will honor the `~fabric.context_managers.lcd` "
"context manager, allowing you to control its current working directory "
"independently of the remote end (which honors "
"`~fabric.context_managers.cd`)."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.local:37
msgid "Added the ``succeeded`` and ``stderr`` attributes."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.local:39
msgid "Now honors the `~fabric.context_managers.lcd` context manager."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.local:41
msgid "Changed the default value of ``capture`` from ``True`` to ``False``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.open_shell:1
msgid "Invoke a fully interactive shell on the remote end."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.open_shell:3
msgid ""
"If ``command`` is given, it will be sent down the pipe before handing "
"control over to the invoking user."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.open_shell:6
msgid ""
"This function is most useful for when you need to interact with a heavily "
"shell-based command or series of commands, such as when debugging or when "
"fully interactive recovery is required upon remote program failure."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.open_shell:10
msgid ""
"It should be considered an easy way to work an interactive shell session "
"into the middle of a Fabric script and is *not* a drop-in replacement for "
"`~fabric.operations.run`, which is also capable of interacting with the "
"remote end (albeit only while its given command is executing) and has much "
"stronger programmatic abilities such as error handling and stdout/stderr "
"capture."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.open_shell:17
msgid ""
"Specifically, `~fabric.operations.open_shell` provides a better interactive "
"experience than `~fabric.operations.run`, but use of a full remote shell "
"prevents Fabric from determining whether programs run within the shell have "
"failed, and pollutes the stdout/stderr stream with shell output such as "
"login banners, prompts and echoed stdin."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.open_shell:23
msgid ""
"Thus, this function does not have a return value and will not trigger "
"Fabric's failure handling if any remote programs result in errors."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.prompt:1
msgid "Prompt user with ``text`` and return the input (like ``raw_input``)."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.prompt:3
msgid ""
"A single space character will be appended for convenience, but nothing else."
" Thus, you may want to end your prompt text with a question mark or a colon,"
" e.g. ``prompt(\"What hostname?\")``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.prompt:7
msgid ""
"If ``key`` is given, the user's input will be stored as ``env.<key>`` in "
"addition to being returned by `prompt`. If the key already existed in "
"``env``, its value will be overwritten and a warning printed to the user."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.prompt:11
msgid ""
"If ``default`` is given, it is displayed in square brackets and used if the "
"user enters nothing (i.e. presses Enter without entering any text). "
"``default`` defaults to the empty string. If non-empty, a space will be "
"appended, so that a call such as ``prompt(\"What hostname?\", "
"default=\"foo\")`` would result in a prompt of ``What hostname? [foo]`` "
"(with a trailing space after the ``[foo]``.)"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.prompt:18
msgid ""
"The optional keyword argument ``validate`` may be a callable or a string:"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.prompt:20
msgid ""
"If a callable, it is called with the user's input, and should return the "
"value to be stored on success. On failure, it should raise an exception with"
" an exception message, which will be printed to the user."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.prompt:23
msgid ""
"If a string, the value passed to ``validate`` is used as a regular "
"expression. It is thus recommended to use raw strings in this case. Note "
"that the regular expression, if it is not fully matching (bounded by ``^`` "
"and ``$``) it will be made so. In other words, the input must fully match "
"the regex."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.prompt:29
msgid ""
"Either way, `prompt` will re-prompt until validation passes (or the user "
"hits ``Ctrl-C``)."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.prompt:33
msgid ""
"`~fabric.operations.prompt` honors :ref:`env.abort_on_prompts <abort-on-"
"prompts>` and will call `~fabric.utils.abort` instead of prompting if that "
"flag is set to ``True``. If you want to block on user input regardless, try "
"wrapping with `~fabric.context_managers.settings`."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.prompt:39
#: ../../../fabric/operations.pydocstring of fabric.operations.put:56
#: ../../../fabric/operations.pydocstring of fabric.operations.run:59
#: ../../../fabric/operations.pydocstring of fabric.operations.sudo:18
msgid "Examples::"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:1
msgid "Upload one or more files to a remote host."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:3
msgid ""
"`~fabric.operations.put` returns an iterable containing the absolute file "
"paths of all remote files uploaded. This iterable also exhibits a "
"``.failed`` attribute containing any local file paths which failed to upload"
" (and may thus be used as a boolean test.) You may also check ``.succeeded``"
" which is equivalent to ``not .failed``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:9
msgid ""
"``local_path`` may be a relative or absolute local file or directory path, "
"and may contain shell-style wildcards, as understood by the Python ``glob`` "
"module (give ``use_glob=False`` to disable this behavior).  Tilde expansion "
"(as implemented by ``os.path.expanduser``) is also performed."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:14
msgid ""
"``local_path`` may alternately be a file-like object, such as the result of "
"``open('path')`` or a ``StringIO`` instance."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:18
msgid ""
"In this case, `~fabric.operations.put` will attempt to read the entire "
"contents of the file-like object by rewinding it using ``seek`` (and will "
"use ``tell`` afterwards to preserve the previous file position)."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:22
msgid ""
"``remote_path`` may also be a relative or absolute location, but applied to "
"the remote host. Relative paths are relative to the remote user's home "
"directory, but tilde expansion (e.g. ``~/.ssh/``) will also be performed if "
"necessary."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:27
msgid ""
"An empty string, in either path argument, will be replaced by the "
"appropriate end's current working directory."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:30
msgid ""
"While the SFTP protocol (which `put` uses) has no direct ability to upload "
"files to locations not owned by the connecting user, you may specify "
"``use_sudo=True`` to work around this. When set, this setting causes `put` "
"to upload the local files to a temporary location on the remote end "
"(defaults to remote user's ``$HOME``; this may be overridden via "
"``temp_dir``), and then use `sudo` to move them to ``remote_path``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:37
msgid ""
"In some use cases, it is desirable to force a newly uploaded file to match "
"the mode of its local counterpart (such as when uploading executable "
"scripts). To do this, specify ``mirror_local_mode=True``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:41
msgid ""
"Alternately, you may use the ``mode`` kwarg to specify an exact mode, in the"
" same vein as ``os.chmod`` or the Unix ``chmod`` command."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:44
msgid ""
"`~fabric.operations.put` will honor `~fabric.context_managers.cd`, so "
"relative values in ``remote_path`` will be prepended by the current remote "
"working directory, if applicable. Thus, for example, the below snippet would"
" attempt to upload to ``/tmp/files/test.txt`` instead of "
"``~/files/test.txt``::"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:53
msgid ""
"Use of `~fabric.context_managers.lcd` will affect ``local_path`` in the same"
" manner."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:72
msgid ""
"Directories may be specified in the ``local_path`` argument and will trigger"
" recursive uploads."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:75
msgid ""
"Return value is now an iterable of uploaded remote file paths which also "
"exhibits the ``.failed`` and ``.succeeded`` attributes."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.put:80
msgid "Added ``use_glob`` option to allow disabling of globbing."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.reboot:1
msgid "Reboot the remote system."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.reboot:3
msgid ""
"Will temporarily tweak Fabric's reconnection settings (:ref:`timeout` and "
":ref:`connection-attempts`) to ensure that reconnection does not give up for"
" at least ``wait`` seconds."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.reboot:8
msgid ""
"As of Fabric 1.4, the ability to reconnect partway through a session no "
"longer requires use of internal APIs.  While we are not officially "
"deprecating this function, adding more features to it will not be a "
"priority."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.reboot:13
msgid ""
"Users who want greater control are encouraged to check out this function's "
"(6 lines long, well commented) source code and write their own adaptation "
"using different timeout/attempt values or additional logic."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.reboot:19
msgid ""
"Changed the ``wait`` kwarg to be optional, and refactored to leverage the "
"new reconnection functionality; it may not actually have to wait for "
"``wait`` seconds before reconnecting."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.require:1
msgid ""
"Check for given keys in the shared environment dict and abort if not found."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.require:3
msgid ""
"Positional arguments should be strings signifying what env vars should be "
"checked for. If any of the given arguments do not exist, Fabric will abort "
"execution and print the names of the missing keys."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.require:7
msgid ""
"The optional keyword argument ``used_for`` may be a string, which will be "
"printed in the error output to inform users why this requirement is in "
"place. ``used_for`` is printed as part of a string similar to::"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.require:13
msgid "so format it appropriately."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.require:15
msgid ""
"The optional keyword argument ``provided_by`` may be a list of functions or "
"function names or a single function or function name which the user should "
"be able to execute in order to set the key or keys; it will be included in "
"the error output if requirements are not met."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.require:20
msgid ""
"Note: it is assumed that the keyword arguments apply to all given keys as a "
"group. If you feel the need to specify more than one ``used_for``, for "
"example, you should break your logic into multiple calls to ``require()``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.require:24
msgid "Allow iterable ``provided_by`` values instead of just single values."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:1
msgid "Run a shell command on a remote host."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:3
msgid ""
"If ``shell`` is True (the default), `run` will execute the given command "
"string via a shell interpreter, the value of which may be controlled by "
"setting ``env.shell`` (defaulting to something similar to ``/bin/bash -l -c "
"\"<command>\"``.) Any double-quote (``\"``) or dollar-sign (``$``) "
"characters in ``command`` will be automatically escaped when ``shell`` is "
"True."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:9
msgid ""
"`run` will return the result of the remote program's stdout as a single "
"(likely multiline) string. This string will exhibit ``failed`` and "
"``succeeded`` boolean attributes specifying whether the command failed or "
"succeeded, and will also include the return code as the ``return_code`` "
"attribute. Furthermore, it includes a copy of the requested & actual command"
" strings executed, as ``.command`` and ``.real_command``, respectively."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:17
msgid ""
"Any text entered in your local terminal will be forwarded to the remote "
"program as it runs, thus allowing you to interact with password or other "
"prompts naturally. For more on how this works, see "
":doc:`/usage/interactivity`."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:22
msgid ""
"You may pass ``pty=False`` to forego creation of a pseudo-terminal on the "
"remote end in case the presence of one causes problems for the command in "
"question. However, this will force Fabric itself to echo any  and all input "
"you type while the command is running, including sensitive passwords. (With "
"``pty=True``, the remote pseudo-terminal will echo for you, and will "
"intelligently handle password-style prompts.) See :ref:`pseudottys` for "
"details."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:30
msgid ""
"Similarly, if you need to programmatically examine the stderr stream of the "
"remote program (exhibited as the ``stderr`` attribute on this function's "
"return value), you may set ``combine_stderr=False``. Doing so has a high "
"chance of causing garbled output to appear on your terminal (though the "
"resulting strings returned by `~fabric.operations.run` will be properly "
"separated). For more info, please read :ref:`combine_streams`."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:37
msgid ""
"To ignore non-zero return codes, specify ``warn_only=True``. To both ignore "
"non-zero return codes *and* force a command to run silently, specify "
"``quiet=True``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:41
msgid ""
"To override which local streams are used to display remote stdout and/or "
"stderr, specify ``stdout`` or ``stderr``. (By default, the regular "
"``sys.stdout`` and ``sys.stderr`` Python stream objects are used.)"
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:45
msgid ""
"For example, ``run(\"command\", stderr=sys.stdout)`` would print the remote "
"standard error to the local standard out, while preserving it as its own "
"distinct attribute on the return value (as per above.) Alternately, you "
"could even provide your own stream objects or loggers, e.g. ``myout = "
"StringIO(); run(\"command\", stdout=myout)``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:51
msgid ""
"If you want an exception raised when the remote program takes too long to "
"run, specify ``timeout=N`` where ``N`` is an integer number of seconds, "
"after which to time out. This will cause ``run`` to raise a "
"`~fabric.exceptions.CommandTimeout` exception."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:56
msgid ""
"If you want to disable Fabric's automatic attempts at escaping quotes, "
"dollar signs etc., specify ``shell_escape=False``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:66
msgid ""
"The ``succeeded`` and ``stderr`` return value attributes, the "
"``combine_stderr`` kwarg, and interactive behavior."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:70
msgid "The default value of ``pty`` is now ``True``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:73
msgid ""
"The default value of ``combine_stderr`` is now ``None`` instead of ``True``."
" However, the default *behavior* is unchanged, as the global setting is "
"still ``True``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:78
#: ../../../fabric/operations.pydocstring of fabric.operations.sudo:33
msgid "The ``quiet``, ``warn_only``, ``stdout`` and ``stderr`` kwargs."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:81
#: ../../../fabric/operations.pydocstring of fabric.operations.sudo:36
msgid "The return value attributes ``.command`` and ``.real_command``."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:84
msgid "The ``timeout`` argument."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.run:87
#: ../../../fabric/operations.pydocstring of fabric.operations.sudo:39
msgid "The ``shell_escape`` argument."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.sudo:1
msgid "Run a shell command on a remote host, with superuser privileges."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.sudo:3
msgid ""
"`sudo` is identical in every way to `run`, except that it will always wrap "
"the given ``command`` in a call to the ``sudo`` program to provide superuser"
" privileges."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.sudo:7
msgid ""
"`sudo` accepts additional ``user`` and ``group`` arguments, which are passed"
" to ``sudo`` and allow you to run as some user and/or group other than root."
"  On most systems, the ``sudo`` program can take a string username/group or "
"an integer userid/groupid (uid/gid); ``user`` and ``group`` may likewise be "
"strings or integers."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.sudo:13
msgid ""
"You may set :ref:`env.sudo_user <sudo_user>` at module level or via "
"`~fabric.context_managers.settings` if you want multiple ``sudo`` calls to "
"have the same ``user`` value. An explicit ``user`` argument will, of course,"
" override this global setting."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.sudo:27
msgid "See the changed and added notes for `~fabric.operations.run`."
msgstr ""

#: ../../../fabric/operations.pydocstring of fabric.operations.sudo:30
msgid "Now honors :ref:`env.sudo_user <sudo_user>`."
msgstr ""

#: ../../api/core/tasks.rst:3
msgid "Tasks"
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.Task:1
msgid ""
"Abstract base class for objects wishing to be picked up as Fabric tasks."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.Task:3
msgid ""
"Instances of subclasses will be treated as valid tasks when present in "
"fabfiles loaded by the :doc:`fab </usage/fab>` tool."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.Task:6
msgid ""
"For details on how to implement and use `~fabric.tasks.Task` subclasses, "
"please see the usage documentation on :ref:`new-style tasks <new-style-"
"tasks>`."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.Task.get_hosts:1
msgid "Return the host list the given task should be using."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.Task.get_hosts:3
msgid ""
"See :ref:`host-lists` for detailed documentation on how host lists are set."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.WrappedCallableTask:1
msgid ""
"Wraps a given callable transparently, while marking it as a valid Task."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.WrappedCallableTask:3
msgid "Generally used via `~fabric.decorators.task` and not directly."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.WrappedCallableTask:7
msgid "`~fabric.docs.unwrap_tasks`, `~fabric.decorators.task`"
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:1
msgid ""
"Execute ``task`` (callable or name), honoring host/role decorators, etc."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:3
msgid ""
"``task`` may be an actual callable object, or it may be a registered task "
"name, which is used to look up a callable just as if the name had been given"
" on the command line (including :ref:`namespaced tasks <namespaces>`, e.g. "
"``\"deploy.migrate\"``."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:8
msgid ""
"The task will then be executed once per host in its host list, which is "
"(again) assembled in the same manner as CLI-specified tasks: drawing from "
":option:`-H`, :ref:`env.hosts <hosts>`, the `~fabric.decorators.hosts` or "
"`~fabric.decorators.roles` decorators, and so forth."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:13
msgid ""
"``host``, ``hosts``, ``role``, ``roles`` and ``exclude_hosts`` kwargs will "
"be stripped out of the final call, and used to set the task's host list, as "
"if they had been specified on the command line like e.g. ``fab "
"taskname:host=hostname``."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:18
msgid ""
"Any other arguments or keyword arguments will be passed verbatim into "
"``task`` (the function itself -- not the ``@task`` decorator wrapping your "
"function!) when it is called, so ``execute(mytask, 'arg1', kwarg1='value')``"
" will (once per host) invoke ``mytask('arg1', kwarg1='value')``."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:24
msgid ""
"a dictionary mapping host strings to the given task's return value for that "
"host's execution run. For example, ``execute(foo, hosts=['a', 'b'])`` might "
"return ``{'a': None, 'b': 'bar'}`` if ``foo`` returned nothing on host `a` "
"but returned ``'bar'`` on host `b`.  In situations where a task execution "
"fails for a given host but overall progress does not abort (such as when "
":ref:`env.skip_bad_hosts <skip-bad-hosts>` is True) the return value for "
"that host will be the error object or message."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:25
msgid ""
"a dictionary mapping host strings to the given task's return value for that "
"host's execution run. For example, ``execute(foo, hosts=['a', 'b'])`` might "
"return ``{'a': None, 'b': 'bar'}`` if ``foo`` returned nothing on host `a` "
"but returned ``'bar'`` on host `b`."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:30
msgid ""
"In situations where a task execution fails for a given host but overall "
"progress does not abort (such as when :ref:`env.skip_bad_hosts <skip-bad-"
"hosts>` is True) the return value for that host will be the error object or "
"message."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:36
msgid ""
":ref:`The execute usage docs <execute>`, for an expanded explanation and "
"some examples."
msgstr ""

#: ../../../fabric/tasks.pydocstring of fabric.tasks.execute:40
msgid ""
"Added the return value mapping; previously this function had no defined "
"return value."
msgstr ""

#: ../../api/core/utils.rst:3
msgid "Utils"
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils:1
msgid ""
"Internal subroutines for e.g. aborting execution with an error message, or "
"performing indenting on multiline output."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.abort:1
msgid ""
"Abort execution, print ``msg`` to stderr and exit with error status (1.)"
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.abort:3
msgid ""
"This function currently makes use of `sys.exit`_, which raises "
"`SystemExit`_. Therefore, it's possible to detect and recover from inner "
"calls to `abort` by using ``except SystemExit`` or similar."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.error:1
msgid "Call ``func`` with given error ``message``."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.error:3
msgid ""
"If ``func`` is None (the default), the value of ``env.warn_only`` determines"
" whether to call ``abort`` or ``warn``."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.error:6
msgid ""
"If ``exception`` is given, it is inspected to get a string message, which is"
" printed alongside the user-generated ``message``."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.error:9
msgid ""
"If ``stdout`` and/or ``stderr`` are given, they are assumed to be strings to"
" be printed."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.fastprint:1
msgid "Print ``text`` immediately, without any prefix or line ending."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.fastprint:3
msgid ""
"This function is simply an alias of `~fabric.utils.puts` with different "
"default argument values, such that the ``text`` is printed without any "
"embellishment and immediately flushed."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.fastprint:7
msgid ""
"It is useful for any situation where you wish to print text which might "
"otherwise get buffered by Python's output buffering (such as within a "
"processor intensive ``for`` loop). Since such use cases typically also "
"require a lack of line endings (such as printing a series of dots to signify"
" progress) it also omits the traditional newline by default."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.fastprint:15
msgid ""
"Since `~fabric.utils.fastprint` calls `~fabric.utils.puts`, it is likewise "
"subject to the ``user`` :doc:`output level </usage/output_controls>`."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.fastprint:20
msgid "`~fabric.utils.puts`"
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.indent:1
msgid "Return ``text`` indented by the given number of spaces."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.indent:3
msgid ""
"If text is not a string, it is assumed to be a list of lines and will be "
"joined by ``\\n`` prior to indenting."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.indent:6
msgid ""
"When ``strip`` is ``True``, a minimum amount of whitespace is removed from "
"the left-hand side of the given string (so that relative indents are "
"preserved, but otherwise things are left-stripped). This allows you to "
"effectively \"normalize\" any previous indentation for some inputs."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.puts:1
msgid ""
"An alias for ``print`` whose output is managed by Fabric's output controls."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.puts:3
msgid ""
"In other words, this function simply prints to ``sys.stdout``, but will hide"
" its output if the ``user`` :doc:`output level </usage/output_controls>` is "
"set to ``False``."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.puts:7
msgid ""
"If ``show_prefix=False``, `puts` will omit the leading ``[hostname]`` which "
"it tacks on by default. (It will also omit this prefix if "
"``env.host_string`` is empty.)"
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.puts:11
msgid ""
"Newlines may be disabled by setting ``end`` to the empty string (``''``). "
"(This intentionally mirrors Python 3's ``print`` syntax.)"
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.puts:14
msgid ""
"You may force output flushing (e.g. to bypass output buffering) by setting "
"``flush=True``."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.puts:18
msgid "`~fabric.utils.fastprint`"
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.warn:1
msgid "Print warning message, but do not abort execution."
msgstr ""

#: ../../../fabric/utils.pydocstring of fabric.utils.warn:3
msgid ""
"This function honors Fabric's :doc:`output controls "
"<../../usage/output_controls>` and will print the given ``msg`` to stderr, "
"provided that the ``warnings`` output level (which is active by default) is "
"turned on."
msgstr ""
