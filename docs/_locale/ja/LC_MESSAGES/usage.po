# 
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-29 17:11+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../usage/env.rst:3
msgid "The environment dictionary, ``env``"
msgstr ""

#: ../../usage/env.rst:5
msgid ""
"A simple but integral aspect of Fabric is what is known as the "
"\"environment\": a Python dictionary subclass, which is used as a "
"combination settings registry and shared inter-task data namespace."
msgstr ""

#: ../../usage/env.rst:9
msgid ""
"The environment dict is currently implemented as a global singleton, "
"``fabric.state.env``, and is included in ``fabric.api`` for convenience. "
"Keys in ``env`` are sometimes referred to as \"env variables\"."
msgstr ""

#: ../../usage/env.rst:14
msgid "Environment as configuration"
msgstr ""

#: ../../usage/env.rst:16
msgid ""
"Most of Fabric's behavior is controllable by modifying ``env`` variables, "
"such as ``env.hosts`` (as seen in :ref:`the tutorial <defining-"
"connections>`). Other commonly-modified env vars include:"
msgstr ""

#: ../../usage/env.rst:20
msgid ""
"``user``: Fabric defaults to your local username when making SSH "
"connections, but you can use ``env.user`` to override this if necessary. The"
" :doc:`execution` documentation also has info on how to specify usernames on"
" a per-host basis."
msgstr ""

#: ../../usage/env.rst:23
msgid ""
"``password``: Used to explicitly set your default connection or sudo "
"password if desired. Fabric will prompt you when necessary if this isn't set"
" or doesn't appear to be valid."
msgstr ""

#: ../../usage/env.rst:26
msgid ""
"``warn_only``: a Boolean setting determining whether Fabric exits when "
"detecting errors on the remote end. See :doc:`execution` for more on this "
"behavior."
msgstr ""

#: ../../usage/env.rst:30
msgid ""
"There are a number of other env variables; for the full list, see :ref:`env-"
"vars` at the bottom of this document."
msgstr ""

#: ../../usage/env.rst:34
msgid "The `~fabric.context_managers.settings` context manager"
msgstr ""

#: ../../usage/env.rst:36
msgid ""
"In many situations, it's useful to only temporarily modify ``env`` vars so "
"that a given settings change only applies to a block of code. Fabric "
"provides a `~fabric.context_managers.settings` context manager, which takes "
"any number of key/value pairs and will use them to modify ``env`` within its"
" wrapped block."
msgstr ""

#: ../../usage/env.rst:41
msgid ""
"For example, there are many situations where setting ``warn_only`` (see "
"below) is useful. To apply it to a few lines of code, use "
"``settings(warn_only=True)``, as seen in this simplified version of the "
"``contrib`` `~fabric.contrib.files.exists` function::"
msgstr ""

#: ../../usage/env.rst:52
msgid ""
"See the :doc:`../api/core/context_managers` API documentation for details on"
" `~fabric.context_managers.settings` and other, similar tools."
msgstr ""

#: ../../usage/env.rst:56
msgid "Environment as shared state"
msgstr ""

#: ../../usage/env.rst:58
msgid ""
"As mentioned, the ``env`` object is simply a dictionary subclass, so your "
"own fabfile code may store information in it as well. This is sometimes "
"useful for keeping state between multiple tasks within a single execution "
"run."
msgstr ""

#: ../../usage/env.rst:64
msgid ""
"This aspect of ``env`` is largely historical: in the past, fabfiles were not"
" pure Python and thus the environment was the only way to communicate "
"between tasks. Nowadays, you may call other tasks or subroutines directly, "
"and even keep module-level shared state if you wish."
msgstr ""

#: ../../usage/env.rst:69
msgid ""
"In future versions, Fabric will become threadsafe, at which point ``env`` "
"may be the only easy/safe way to keep global state."
msgstr ""

#: ../../usage/env.rst:73
msgid "Other considerations"
msgstr ""

#: ../../usage/env.rst:75
msgid ""
"While it subclasses ``dict``, Fabric's ``env`` has been modified so that its"
" values may be read/written by way of attribute access, as seen in some of "
"the above material. In other words, ``env.host_string`` and "
"``env['host_string']`` are functionally identical. We feel that attribute "
"access can often save a bit of typing and makes the code more readable, so "
"it's the recommended way to interact with ``env``."
msgstr ""

#: ../../usage/env.rst:82
msgid ""
"The fact that it's a dictionary can be useful in other ways, such as with "
"Python's ``dict``-based string interpolation, which is especially handy if "
"you need to insert multiple env vars into a single string. Using \"normal\" "
"string interpolation might look like this::"
msgstr ""

#: ../../usage/env.rst:89
msgid "Using dict-style interpolation is more readable and slightly shorter::"
msgstr ""

#: ../../usage/env.rst:96
msgid "Full list of env vars"
msgstr ""

#: ../../usage/env.rst:98
msgid ""
"Below is a list of all predefined (or defined by Fabric itself during "
"execution) environment variables. While many of them may be manipulated "
"directly, it's often best to use `~fabric.context_managers`, either "
"generally via `~fabric.context_managers.settings` or via specific context "
"managers such as `~fabric.context_managers.cd`."
msgstr ""

#: ../../usage/env.rst:104
msgid ""
"Note that many of these may be set via ``fab``'s command-line switches -- "
"see :doc:`fab` for details. Cross-references are provided where appropriate."
msgstr ""

#: ../../usage/env.rst:107
msgid ":option:`--set`"
msgstr ""

#: ../../usage/env.rst:112
msgid "``abort_exception``"
msgstr ""

#: ../../usage/env.rst:114 ../../usage/env.rst:149 ../../usage/env.rst:197
#: ../../usage/env.rst:221 ../../usage/env.rst:328 ../../usage/env.rst:345
#: ../../usage/env.rst:372 ../../usage/env.rst:408 ../../usage/env.rst:424
#: ../../usage/env.rst:504 ../../usage/env.rst:572 ../../usage/env.rst:582
#: ../../usage/env.rst:595 ../../usage/env.rst:638 ../../usage/env.rst:754
msgid "**Default:** ``None``"
msgstr ""

#: ../../usage/env.rst:116
msgid ""
"Fabric normally handles aborting by printing an error message to stderr and "
"calling ``sys.exit(1)``. This setting allows you to override that behavior "
"(which is what happens when ``env.abort_exception`` is ``None``.)"
msgstr ""

#: ../../usage/env.rst:120
msgid ""
"Give it a callable which takes a string (the error message that would have "
"been printed) and returns an exception instance.  That exception object is "
"then raised instead of ``SystemExit`` (which is what ``sys.exit`` does.)"
msgstr ""

#: ../../usage/env.rst:124
msgid ""
"Much of the time you'll want to simply set this to an exception class, as "
"those fit the above description perfectly (callable, take a string, return "
"an exception instance.) E.g. ``env.abort_exception = MyExceptionClass``."
msgstr ""

#: ../../usage/env.rst:131
msgid "``abort_on_prompts``"
msgstr ""

#: ../../usage/env.rst:133 ../../usage/env.rst:270 ../../usage/env.rst:284
#: ../../usage/env.rst:360 ../../usage/env.rst:437 ../../usage/env.rst:464
#: ../../usage/env.rst:477 ../../usage/env.rst:491 ../../usage/env.rst:626
#: ../../usage/env.rst:685 ../../usage/env.rst:800 ../../usage/env.rst:873
msgid "**Default:** ``False``"
msgstr ""

#: ../../usage/env.rst:135
msgid ""
"When ``True``, Fabric will run in a non-interactive mode, calling "
"`~fabric.utils.abort` anytime it would normally prompt the user for input "
"(such as password prompts, \"What host to connect to?\" prompts, fabfile "
"invocation of `~fabric.operations.prompt`, and so forth.) This allows users "
"to ensure a Fabric session will always terminate cleanly instead of blocking"
" on user input forever when unforeseen circumstances arise."
msgstr ""

#: ../../usage/env.rst:143
msgid ":option:`--abort-on-prompts`"
msgstr ""

#: ../../usage/env.rst:147
msgid "``all_hosts``"
msgstr ""

#: ../../usage/env.rst:151
msgid ""
"Set by ``fab`` to the full host list for the currently executing command. "
"For informational purposes only."
msgstr ""

#: ../../usage/env.rst:154 ../../usage/env.rst:204 ../../usage/env.rst:352
#: ../../usage/env.rst:652 ../../usage/env.rst:771
msgid ":doc:`execution`"
msgstr ""

#: ../../usage/env.rst:159
msgid "``always_use_pty``"
msgstr ""

#: ../../usage/env.rst:161 ../../usage/env.rst:253 ../../usage/env.rst:788
msgid "**Default:** ``True``"
msgstr ""

#: ../../usage/env.rst:163
msgid ""
"When set to ``False``, causes "
"`~fabric.operations.run`/`~fabric.operations.sudo` to act as if they have "
"been called with ``pty=False``."
msgstr ""

#: ../../usage/env.rst:166
msgid ":option:`--no-pty`"
msgstr ""

#: ../../usage/env.rst:172
msgid "``colorize_errors``"
msgstr ""

#: ../../usage/env.rst:174
msgid "**Default** ``False``"
msgstr ""

#: ../../usage/env.rst:176
msgid ""
"When set to ``True``, error output to the terminal is colored red and "
"warnings are colored magenta to make them easier to see."
msgstr ""

#: ../../usage/env.rst:184
msgid "``combine_stderr``"
msgstr ""

#: ../../usage/env.rst:186
msgid "**Default**: ``True``"
msgstr ""

#: ../../usage/env.rst:188
msgid ""
"Causes the SSH layer to merge a remote program's stdout and stderr streams "
"to avoid becoming meshed together when printed. See :ref:`combine_streams` "
"for details on why this is needed and what its effects are."
msgstr ""

#: ../../usage/env.rst:195
msgid "``command``"
msgstr ""

#: ../../usage/env.rst:199
msgid ""
"Set by ``fab`` to the currently executing command name (e.g., when executed "
"as ``$ fab task1 task2``, ``env.command`` will be set to ``\"task1\"`` while"
" ``task1`` is executing, and then to ``\"task2\"``.) For informational "
"purposes only."
msgstr ""

#: ../../usage/env.rst:207
msgid "``command_prefixes``"
msgstr ""

#: ../../usage/env.rst:209 ../../usage/env.rst:302 ../../usage/env.rst:382
#: ../../usage/env.rst:659 ../../usage/env.rst:766
msgid "**Default:** ``[]``"
msgstr ""

#: ../../usage/env.rst:211
msgid ""
"Modified by `~fabric.context_managers.prefix`, and prepended to commands "
"executed by `~fabric.operations.run`/`~fabric.operations.sudo`."
msgstr ""

#: ../../usage/env.rst:219
msgid "``command_timeout``"
msgstr ""

#: ../../usage/env.rst:223
msgid "Remote command timeout, in seconds."
msgstr ""

#: ../../usage/env.rst:226
msgid ":option:`--command-timeout`"
msgstr ""

#: ../../usage/env.rst:231
msgid "``connection_attempts``"
msgstr ""

#: ../../usage/env.rst:233
msgid "**Default:** ``1``"
msgstr ""

#: ../../usage/env.rst:235
msgid ""
"Number of times Fabric will attempt to connect when connecting to a new "
"server. For backwards compatibility reasons, it defaults to only one "
"connection attempt."
msgstr ""

#: ../../usage/env.rst:238
msgid ":option:`--connection-attempts`, :ref:`timeout`"
msgstr ""

#: ../../usage/env.rst:241
msgid "``cwd``"
msgstr ""

#: ../../usage/env.rst:243 ../../usage/env.rst:532
msgid "**Default:** ``''``"
msgstr ""

#: ../../usage/env.rst:245
msgid ""
"Current working directory. Used to keep state for the "
"`~fabric.context_managers.cd` context manager."
msgstr ""

#: ../../usage/env.rst:251
msgid "``dedupe_hosts``"
msgstr ""

#: ../../usage/env.rst:255
msgid ""
"Deduplicate merged host lists so any given host string is only represented "
"once (e.g. when using combinations of ``@hosts`` + ``@roles``, or ``-H`` and"
" ``-R``.)"
msgstr ""

#: ../../usage/env.rst:259
msgid ""
"When set to ``False``, this option relaxes the deduplication, allowing users"
" who explicitly want to run a task multiple times on the same host (say, in "
"parallel, though it works fine serially too) to do so."
msgstr ""

#: ../../usage/env.rst:268
msgid "``disable_known_hosts``"
msgstr ""

#: ../../usage/env.rst:272
msgid ""
"If ``True``, the SSH layer will skip loading the user's known-hosts file. "
"Useful for avoiding exceptions in situations where a \"known host\" changing"
" its host key is actually valid (e.g. cloud servers such as EC2.)"
msgstr ""

#: ../../usage/env.rst:276
msgid ":option:`--disable-known-hosts <-D>`, :doc:`ssh`"
msgstr ""

#: ../../usage/env.rst:282
msgid "``eagerly_disconnect``"
msgstr ""

#: ../../usage/env.rst:286
msgid ""
"If ``True``, causes ``fab`` to close connections after each individual task "
"execution, instead of at the end of the run. This helps prevent a lot of "
"typically-unused network sessions from piling up and causing problems with "
"limits on per-process open files, or network hardware."
msgstr ""

#: ../../usage/env.rst:292
msgid ""
"When active, this setting will result in the disconnect messages appearing "
"throughout your output, instead of at the end. This may be improved in "
"future releases."
msgstr ""

#: ../../usage/env.rst:300
msgid "``exclude_hosts``"
msgstr ""

#: ../../usage/env.rst:304
msgid ""
"Specifies a list of host strings to be :ref:`skipped over <exclude-hosts>` "
"during ``fab`` execution. Typically set via :option:`--exclude-hosts/-x "
"<-x>`."
msgstr ""

#: ../../usage/env.rst:311
msgid "``fabfile``"
msgstr ""

#: ../../usage/env.rst:313
msgid "**Default:** ``fabfile.py``"
msgstr ""

#: ../../usage/env.rst:315
msgid ""
"Filename pattern which ``fab`` searches for when loading fabfiles. To "
"indicate a specific file, use the full path to the file. Obviously, it "
"doesn't make sense to set this in a fabfile, but it may be specified in a "
"``.fabricrc`` file or on the command line."
msgstr ""

#: ../../usage/env.rst:320
msgid ":option:`--fabfile <-f>`, :doc:`fab`"
msgstr ""

#: ../../usage/env.rst:326
msgid "``gateway``"
msgstr ""

#: ../../usage/env.rst:330
msgid ""
"Enables SSH-driven gatewaying through the indicated host. The value should "
"be a normal Fabric host string as used in e.g. :ref:`env.host_string "
"<host_string>`. When this is set, newly created connections will be set to "
"route their SSH traffic through the remote SSH daemon to the final "
"destination."
msgstr ""

#: ../../usage/env.rst:337
msgid ":option:`--gateway <-g>`"
msgstr ""

#: ../../usage/env.rst:343
msgid "``host_string``"
msgstr ""

#: ../../usage/env.rst:347
msgid ""
"Defines the current user/host/port which Fabric will connect to when "
"executing `~fabric.operations.run`, `~fabric.operations.put` and so forth. "
"This is set by ``fab`` when iterating over a previously set host list, and "
"may also be manually set when using Fabric as a library."
msgstr ""

#: ../../usage/env.rst:358
msgid "``forward_agent``"
msgstr ""

#: ../../usage/env.rst:362
msgid ""
"If ``True``, enables forwarding of your local SSH agent to the remote end."
msgstr ""

#: ../../usage/env.rst:366
msgid ":option:`--forward-agent <-A>`"
msgstr ""

#: ../../usage/env.rst:370
msgid "``host``"
msgstr ""

#: ../../usage/env.rst:374
msgid ""
"Set to the hostname part of ``env.host_string`` by ``fab``. For "
"informational purposes only."
msgstr ""

#: ../../usage/env.rst:380
msgid "``hosts``"
msgstr ""

#: ../../usage/env.rst:384
msgid "The global host list used when composing per-task host lists."
msgstr ""

#: ../../usage/env.rst:386
msgid ":option:`--hosts <-H>`, :doc:`execution`"
msgstr ""

#: ../../usage/env.rst:391
msgid "``keepalive``"
msgstr ""

#: ../../usage/env.rst:393
msgid "**Default:** ``0`` (i.e. no keepalive)"
msgstr ""

#: ../../usage/env.rst:395
msgid ""
"An integer specifying an SSH keepalive interval to use; basically maps to "
"the SSH config option ``ClientAliveInterval``. Useful if you find "
"connections are timing out due to meddlesome network hardware or what have "
"you."
msgstr ""

#: ../../usage/env.rst:399
msgid ":option:`--keepalive`"
msgstr ""

#: ../../usage/env.rst:406
msgid "``key``"
msgstr ""

#: ../../usage/env.rst:410
msgid ""
"A string, or file-like object, containing an SSH key; used during connection"
" authentication."
msgstr ""

#: ../../usage/env.rst:414
msgid ""
"The most common method for using SSH keys is to set :ref:`key-filename`."
msgstr ""

#: ../../usage/env.rst:422
msgid "``key_filename``"
msgstr ""

#: ../../usage/env.rst:426
msgid ""
"May be a string or list of strings, referencing file paths to SSH key files "
"to try when connecting. Passed through directly to the SSH layer. May be "
"set/appended to with :option:`-i`."
msgstr ""

#: ../../usage/env.rst:430
msgid ""
"`Paramiko's documentation for SSHClient.connect() "
"<http://www.lag.net/paramiko/docs/paramiko.SSHClient-class.html#connect>`_"
msgstr ""

#: ../../usage/env.rst:435
msgid "``linewise``"
msgstr ""

#: ../../usage/env.rst:439
msgid ""
"Forces buffering by line instead of by character/byte, typically when "
"running in parallel mode. May be activated via :option:`--linewise`. This "
"option is implied by :ref:`env.parallel <env-parallel>` -- even if "
"``linewise`` is False, if ``parallel`` is True then linewise behavior will "
"occur."
msgstr ""

#: ../../usage/env.rst:444
msgid ":ref:`linewise-output`"
msgstr ""

#: ../../usage/env.rst:452
msgid "``local_user``"
msgstr ""

#: ../../usage/env.rst:454
msgid ""
"A read-only value containing the local system username. This is the same "
"value as :ref:`user`'s initial value, but whereas :ref:`user` may be altered"
" by CLI arguments, Python code or specific host strings, :ref:`local-user` "
"will always contain the same value."
msgstr ""

#: ../../usage/env.rst:462
msgid "``no_agent``"
msgstr ""

#: ../../usage/env.rst:466
msgid ""
"If ``True``, will tell the SSH layer not to seek out running SSH agents when"
" using key-based authentication."
msgstr ""

#: ../../usage/env.rst:470
msgid ":option:`--no_agent <-a>`"
msgstr ""

#: ../../usage/env.rst:475
msgid "``no_keys``"
msgstr ""

#: ../../usage/env.rst:479
msgid ""
"If ``True``, will tell the SSH layer not to load any private key files from "
"one's ``$HOME/.ssh/`` folder. (Key files explicitly loaded via ``fab -i`` "
"will still be used, of course.)"
msgstr ""

#: ../../usage/env.rst:484
msgid ":option:`-k`"
msgstr ""

#: ../../usage/env.rst:489
msgid "``parallel``"
msgstr ""

#: ../../usage/env.rst:493
msgid ""
"When ``True``, forces all tasks to run in parallel. Implies "
":ref:`env.linewise <env-linewise>`."
msgstr ""

#: ../../usage/env.rst:497
msgid ":option:`--parallel <-P>`, :doc:`parallel`"
msgstr ""

#: ../../usage/env.rst:502
msgid "``password``"
msgstr ""

#: ../../usage/env.rst:506
msgid ""
"The default password used by the SSH layer when connecting to remote hosts, "
"**and/or** when answering `~fabric.operations.sudo` prompts."
msgstr ""

#: ../../usage/env.rst:509
msgid ""
":option:`--initial-password-prompt <-I>`, :ref:`env.passwords <passwords>`, "
":ref:`password-management`"
msgstr ""

#: ../../usage/env.rst:514
msgid "``passwords``"
msgstr ""

#: ../../usage/env.rst:516 ../../usage/env.rst:559 ../../usage/env.rst:648
msgid "**Default:** ``{}``"
msgstr ""

#: ../../usage/env.rst:518
msgid ""
"This dictionary is largely for internal use, and is filled automatically as "
"a per-host-string password cache. Keys are full :ref:`host strings <host-"
"strings>` and values are passwords (strings)."
msgstr ""

#: ../../usage/env.rst:522 ../../usage/fab.rst:202
msgid ":ref:`password-management`"
msgstr ""

#: ../../usage/env.rst:530
msgid "``path``"
msgstr ""

#: ../../usage/env.rst:534
msgid ""
"Used to set the ``$PATH`` shell environment variable when executing commands"
" in "
"`~fabric.operations.run`/`~fabric.operations.sudo`/`~fabric.operations.local`."
" It is recommended to use the `~fabric.context_managers.path` context "
"manager for managing this value instead of setting it directly."
msgstr ""

#: ../../usage/env.rst:545
msgid "``pool_size``"
msgstr ""

#: ../../usage/env.rst:547
msgid "**Default:** ``0``"
msgstr ""

#: ../../usage/env.rst:549
msgid ""
"Sets the number of concurrent processes to use when executing tasks in "
"parallel."
msgstr ""

#: ../../usage/env.rst:552
msgid ":option:`--pool-size <-z>`, :doc:`parallel`"
msgstr ""

#: ../../usage/env.rst:557
msgid "``prompts``"
msgstr ""

#: ../../usage/env.rst:561
msgid ""
"The ``prompts`` dictionary allows users to control interactive prompts. If a"
" key in the dictionary is found in a command's standard output stream, "
"Fabric will automatically answer with the corresponding dictionary value."
msgstr ""

#: ../../usage/env.rst:570
msgid "``port``"
msgstr ""

#: ../../usage/env.rst:574
msgid ""
"Set to the port part of ``env.host_string`` by ``fab`` when iterating over a"
" host list. May also be used to specify a default port."
msgstr ""

#: ../../usage/env.rst:580
msgid "``real_fabfile``"
msgstr ""

#: ../../usage/env.rst:584
msgid ""
"Set by ``fab`` with the path to the fabfile it has loaded up, if it got that"
" far. For informational purposes only."
msgstr ""

#: ../../usage/env.rst:587
msgid ":doc:`fab`"
msgstr ""

#: ../../usage/env.rst:593
msgid "``remote_interrupt``"
msgstr ""

#: ../../usage/env.rst:597
msgid ""
"Controls whether Ctrl-C triggers an interrupt remotely or is captured "
"locally, as follows:"
msgstr ""

#: ../../usage/env.rst:600
msgid ""
"``None`` (the default): only `~fabric.operations.open_shell` will exhibit "
"remote interrupt behavior, and "
"`~fabric.operations.run`/`~fabric.operations.sudo` will capture interrupts "
"locally."
msgstr ""

#: ../../usage/env.rst:604
msgid "``False``: even `~fabric.operations.open_shell` captures locally."
msgstr ""

#: ../../usage/env.rst:605
msgid "``True``: all functions will send the interrupt to the remote end."
msgstr ""

#: ../../usage/env.rst:613
msgid "``rcfile``"
msgstr ""

#: ../../usage/env.rst:615
msgid "**Default:** ``$HOME/.fabricrc``"
msgstr ""

#: ../../usage/env.rst:617
msgid "Path used when loading Fabric's local settings file."
msgstr ""

#: ../../usage/env.rst:619
msgid ":option:`--config <-c>`, :doc:`fab`"
msgstr ""

#: ../../usage/env.rst:624
msgid "``reject_unknown_hosts``"
msgstr ""

#: ../../usage/env.rst:628
msgid ""
"If ``True``, the SSH layer will raise an exception when connecting to hosts "
"not listed in the user's known-hosts file."
msgstr ""

#: ../../usage/env.rst:631
msgid ":option:`--reject-unknown-hosts <-r>`, :doc:`ssh`"
msgstr ""

#: ../../usage/env.rst:636
msgid "``system_known_hosts``"
msgstr ""

#: ../../usage/env.rst:640
msgid ""
"If set, should be the path to a :file:`known_hosts` file.  The SSH layer "
"will read this file before reading the user's known-hosts file."
msgstr ""

#: ../../usage/env.rst:643
msgid ":doc:`ssh`"
msgstr ""

#: ../../usage/env.rst:646
msgid "``roledefs``"
msgstr ""

#: ../../usage/env.rst:650
msgid "Dictionary defining role name to host list mappings."
msgstr ""

#: ../../usage/env.rst:657
msgid "``roles``"
msgstr ""

#: ../../usage/env.rst:661
msgid "The global role list used when composing per-task host lists."
msgstr ""

#: ../../usage/env.rst:663
msgid ":option:`--roles <-R>`, :doc:`execution`"
msgstr ""

#: ../../usage/env.rst:668
msgid "``shell``"
msgstr ""

#: ../../usage/env.rst:670
msgid "**Default:** ``/bin/bash -l -c``"
msgstr ""

#: ../../usage/env.rst:672
msgid ""
"Value used as shell wrapper when executing commands with e.g. "
"`~fabric.operations.run`. Must be able to exist in the form ``<env.shell> "
"\"<command goes here>\"`` -- e.g. the default uses Bash's ``-c`` option "
"which takes a command string as its value."
msgstr ""

#: ../../usage/env.rst:677
msgid ""
":option:`--shell <-s>`, :ref:`FAQ on bash as default shell <faq-bash>`, "
":doc:`execution`"
msgstr ""

#: ../../usage/env.rst:683
msgid "``skip_bad_hosts``"
msgstr ""

#: ../../usage/env.rst:687
msgid ""
"If ``True``, causes ``fab`` (or non-``fab`` use of `~fabric.tasks.execute`) "
"to skip over hosts it can't connect to."
msgstr ""

#: ../../usage/env.rst:691
msgid ":option:`--skip-bad-hosts`, :ref:`excluding-hosts`, :doc:`execution`"
msgstr ""

#: ../../usage/env.rst:697
msgid "``ssh_config_path``"
msgstr ""

#: ../../usage/env.rst:699
msgid "**Default:** ``$HOME/.ssh/config``"
msgstr ""

#: ../../usage/env.rst:701
msgid "Allows specification of an alternate SSH configuration file path."
msgstr ""

#: ../../usage/env.rst:704
msgid ":option:`--ssh-config-path`, :ref:`ssh-config`"
msgstr ""

#: ../../usage/env.rst:707
msgid "``ok_ret_codes``"
msgstr ""

#: ../../usage/env.rst:709
msgid "**Default:** ``[0]``"
msgstr ""

#: ../../usage/env.rst:711
msgid ""
"Return codes in this list are used to determine whether calls to "
"`~fabric.operations.run`/`~fabric.operations.sudo`/`~fabric.operations.sudo`"
" are considered successful."
msgstr ""

#: ../../usage/env.rst:720
msgid "``sudo_prefix``"
msgstr ""

#: ../../usage/env.rst:722
msgid "**Default:** ``\"sudo -S -p '%(sudo_prompt)s' \" % env``"
msgstr ""

#: ../../usage/env.rst:724
msgid ""
"The actual ``sudo`` command prefixed onto `~fabric.operations.sudo` calls' "
"command strings. Users who do not have ``sudo`` on their default remote "
"``$PATH``, or who need to make other changes (such as removing the ``-p`` "
"when passwordless sudo is in effect) may find changing this useful."
msgstr ""

#: ../../usage/env.rst:731
msgid ""
"The `~fabric.operations.sudo` operation; :ref:`env.sudo_prompt "
"<sudo_prompt>`"
msgstr ""

#: ../../usage/env.rst:737
msgid "``sudo_prompt``"
msgstr ""

#: ../../usage/env.rst:739
msgid "**Default:** ``\"sudo password:\"``"
msgstr ""

#: ../../usage/env.rst:741
msgid ""
"Passed to the ``sudo`` program on remote systems so that Fabric may "
"correctly identify its password prompt."
msgstr ""

#: ../../usage/env.rst:746
msgid ""
"The `~fabric.operations.sudo` operation; :ref:`env.sudo_prefix "
"<sudo_prefix>`"
msgstr ""

#: ../../usage/env.rst:752
msgid "``sudo_user``"
msgstr ""

#: ../../usage/env.rst:756
msgid ""
"Used as a fallback value for `~fabric.operations.sudo`'s ``user`` argument "
"if none is given. Useful in combination with "
"`~fabric.context_managers.settings`."
msgstr ""

#: ../../usage/env.rst:759
msgid "`~fabric.operations.sudo`"
msgstr ""

#: ../../usage/env.rst:764
msgid "``tasks``"
msgstr ""

#: ../../usage/env.rst:768
msgid ""
"Set by ``fab`` to the full tasks list to be executed for the currently "
"executing command. For informational purposes only."
msgstr ""

#: ../../usage/env.rst:776
msgid "``timeout``"
msgstr ""

#: ../../usage/env.rst:778
msgid "**Default:** ``10``"
msgstr ""

#: ../../usage/env.rst:780
msgid "Network connection timeout, in seconds."
msgstr ""

#: ../../usage/env.rst:783
msgid ":option:`--timeout`, :ref:`connection-attempts`"
msgstr ""

#: ../../usage/env.rst:786
msgid "``use_shell``"
msgstr ""

#: ../../usage/env.rst:790
msgid ""
"Global setting which acts like the ``use_shell`` argument to "
"`~fabric.operations.run`/`~fabric.operations.sudo`: if it is set to "
"``False``, operations will not wrap executed commands in ``env.shell``."
msgstr ""

#: ../../usage/env.rst:798
msgid "``use_ssh_config``"
msgstr ""

#: ../../usage/env.rst:802
msgid "Set to ``True`` to cause Fabric to load your local SSH config file."
msgstr ""

#: ../../usage/env.rst:805 ../../usage/fab.rst:314
msgid ":ref:`ssh-config`"
msgstr ""

#: ../../usage/env.rst:811
msgid "``user``"
msgstr ""

#: ../../usage/env.rst:813
msgid "**Default:** User's local username"
msgstr ""

#: ../../usage/env.rst:815
msgid ""
"The username used by the SSH layer when connecting to remote hosts. May be "
"set globally, and will be used when not otherwise explicitly set in host "
"strings. However, when explicitly given in such a manner, this variable will"
" be temporarily overwritten with the current value -- i.e. it will always "
"display the user currently being connected as."
msgstr ""

#: ../../usage/env.rst:821
msgid "To illustrate this, a fabfile::"
msgstr ""

#: ../../usage/env.rst:832
msgid "and its use::"
msgstr ""

#: ../../usage/env.rst:845
msgid ""
"As you can see, during execution on ``host2``, ``env.user`` was set to "
"``\"explicit_user\"``, but was restored to its previous value "
"(``\"implicit_user\"``) afterwards."
msgstr ""

#: ../../usage/env.rst:851
msgid ""
"``env.user`` is currently somewhat confusing (it's used for configuration "
"**and** informational purposes) so expect this to change in the future -- "
"the informational aspect will likely be broken out into a separate env "
"variable."
msgstr ""

#: ../../usage/env.rst:856
msgid ":doc:`execution`, :option:`--user <-u>`"
msgstr ""

#: ../../usage/env.rst:859
msgid "``version``"
msgstr ""

#: ../../usage/env.rst:861
msgid "**Default:** current Fabric version string"
msgstr ""

#: ../../usage/env.rst:863
msgid ""
"Mostly for informational purposes. Modification is not recommended, but "
"probably won't break anything either."
msgstr ""

#: ../../usage/env.rst:866
msgid ":option:`--version <-V>`"
msgstr ""

#: ../../usage/env.rst:871
msgid "``warn_only``"
msgstr ""

#: ../../usage/env.rst:875
msgid ""
"Specifies whether or not to warn, instead of abort, when "
"`~fabric.operations.run`/`~fabric.operations.sudo`/`~fabric.operations.local`"
" encounter error conditions."
msgstr ""

#: ../../usage/env.rst:879
msgid ":option:`--warn-only <-w>`, :doc:`execution`"
msgstr ""

#: ../../usage/execution.rst:3
msgid "Execution model"
msgstr ""

#: ../../usage/execution.rst:5
msgid ""
"If you've read the :doc:`../tutorial`, you should already be familiar with "
"how Fabric operates in the base case (a single task on a single host.) "
"However, in many situations you'll find yourself wanting to execute multiple"
" tasks and/or on multiple hosts. Perhaps you want to split a big task into "
"smaller reusable parts, or crawl a collection of servers looking for an old "
"user to remove. Such a scenario requires specific rules for when and how "
"tasks are executed."
msgstr ""

#: ../../usage/execution.rst:12
msgid ""
"This document explores Fabric's execution model, including the main "
"execution loop, how to define host lists, how connections are made, and so "
"forth."
msgstr ""

#: ../../usage/execution.rst:19
msgid "Execution strategy"
msgstr ""

#: ../../usage/execution.rst:21
msgid ""
"Fabric defaults to a single, serial execution method, though there is an "
"alternative parallel mode available as of Fabric 1.3 (see "
":doc:`/usage/parallel`). This default behavior is as follows:"
msgstr ""

#: ../../usage/execution.rst:25
msgid ""
"A list of tasks is created. Currently this list is simply the arguments "
"given to :doc:`fab <fab>`, preserving the order given."
msgstr ""

#: ../../usage/execution.rst:27
msgid ""
"For each task, a task-specific host list is generated from various sources "
"(see :ref:`host-lists` below for details.)"
msgstr ""

#: ../../usage/execution.rst:29
msgid ""
"The task list is walked through in order, and each task is run once per host"
" in its host list."
msgstr ""

#: ../../usage/execution.rst:31
msgid ""
"Tasks with no hosts in their host list are considered local-only, and will "
"always run once and only once."
msgstr ""

#: ../../usage/execution.rst:34
msgid "Thus, given the following fabfile::"
msgstr ""

#: ../../usage/execution.rst:46
msgid "and the following invocation::"
msgstr ""

#: ../../usage/execution.rst:50
msgid "you will see that Fabric performs the following:"
msgstr ""

#: ../../usage/execution.rst:52
msgid "``taskA`` executed on ``host1``"
msgstr ""

#: ../../usage/execution.rst:53
msgid "``taskA`` executed on ``host2``"
msgstr ""

#: ../../usage/execution.rst:54
msgid "``taskB`` executed on ``host1``"
msgstr ""

#: ../../usage/execution.rst:55
msgid "``taskB`` executed on ``host2``"
msgstr ""

#: ../../usage/execution.rst:57
msgid ""
"While this approach is simplistic, it allows for a straightforward "
"composition of task functions, and (unlike tools which push the multi-host "
"functionality down to the individual function calls) enables shell script-"
"like logic where you may introspect the output or return code of a given "
"command and decide what to do next."
msgstr ""

#: ../../usage/execution.rst:65 ../../usage/tasks.rst:3
msgid "Defining tasks"
msgstr ""

#: ../../usage/execution.rst:67
msgid ""
"For details on what constitutes a Fabric task and how to organize them, "
"please see :doc:`/usage/tasks`."
msgstr ""

#: ../../usage/execution.rst:71
msgid "Defining host lists"
msgstr ""

#: ../../usage/execution.rst:73
msgid ""
"Unless you're using Fabric as a simple build system (which is possible, but "
"not the primary use-case) having tasks won't do you any good without the "
"ability to specify remote hosts on which to execute them. There are a number"
" of ways to do so, with scopes varying from global to per-task, and it's "
"possible mix and match as needed."
msgstr ""

#: ../../usage/execution.rst:82
msgid "Hosts"
msgstr ""

#: ../../usage/execution.rst:84
msgid ""
"Hosts, in this context, refer to what are also called \"host strings\": "
"Python strings specifying a username, hostname and port combination, in the "
"form of ``username@hostname:port``. User and/or port (and the associated "
"``@`` or ``:``) may be omitted, and will be filled by the executing user's "
"local username, and/or port 22, respectively. Thus, ``admin@foo.com:222``, "
"``deploy@website`` and ``nameserver1`` could all be valid host strings."
msgstr ""

#: ../../usage/execution.rst:91
msgid ""
"IPv6 address notation is also supported, for example ``::1``, "
"``[::1]:1222``, ``user@2001:db8::1`` or ``user@[2001:db8::1]:1222``. Square "
"brackets are necessary only to separate the address from the port number. If"
" no port number is used, the brackets are optional. Also if host string is "
"specified via command-line argument, it may be necessary to escape brackets "
"in some shells."
msgstr ""

#: ../../usage/execution.rst:99
msgid ""
"The user/hostname split occurs at the last ``@`` found, so e.g. email "
"address usernames are valid and will be parsed correctly."
msgstr ""

#: ../../usage/execution.rst:102
msgid ""
"During execution, Fabric normalizes the host strings given and then stores "
"each part (username/hostname/port) in the environment dictionary, for both "
"its use and for tasks to reference if the need arises. See :doc:`env` for "
"details."
msgstr ""

#: ../../usage/execution.rst:109
msgid "Roles"
msgstr ""

#: ../../usage/execution.rst:111
msgid ""
"Host strings map to single hosts, but sometimes it's useful to arrange hosts"
" in groups. Perhaps you have a number of Web servers behind a load balancer "
"and want to update all of them, or want to run a task on \"all client "
"servers\". Roles provide a way of defining strings which correspond to lists"
" of host strings, and can then be specified instead of writing out the "
"entire list every time."
msgstr ""

#: ../../usage/execution.rst:118
msgid ""
"This mapping is defined as a dictionary, ``env.roledefs``, which must be "
"modified by a fabfile in order to be used. A simple example::"
msgstr ""

#: ../../usage/execution.rst:125
msgid ""
"Since ``env.roledefs`` is naturally empty by default, you may also opt to "
"re-assign to it without fear of losing any information (provided you aren't "
"loading other fabfiles which also modify it, of course)::"
msgstr ""

#: ../../usage/execution.rst:136
msgid ""
"In addition to list/iterable object types, the values in ``env.roledefs`` "
"may be callables, and will thus be called when looked up when tasks are run "
"instead of at module load time. (For example, you could connect to remote "
"servers to obtain role definitions, and not worry about causing delays at "
"fabfile load time when calling e.g. ``fab --list``.)"
msgstr ""

#: ../../usage/execution.rst:142
msgid ""
"Use of roles is not required in any way -- it's simply a convenience in "
"situations where you have common groupings of servers."
msgstr ""

#: ../../usage/execution.rst:145
msgid "Added ability to use callables as ``roledefs`` values."
msgstr ""

#: ../../usage/execution.rst:151
msgid "How host lists are constructed"
msgstr ""

#: ../../usage/execution.rst:153
msgid ""
"There are a number of ways to specify host lists, either globally or per-"
"task, and generally these methods override one another instead of merging "
"together (though this may change in future releases.) Each such method is "
"typically split into two parts, one for hosts and one for roles."
msgstr ""

#: ../../usage/execution.rst:159
msgid "Globally, via ``env``"
msgstr ""

#: ../../usage/execution.rst:161
msgid ""
"The most common method of setting hosts or roles is by modifying two key-"
"value pairs in the environment dictionary, :doc:`env <env>`: ``hosts`` and "
"``roles``. The value of these variables is checked at runtime, while "
"constructing each tasks's host list."
msgstr ""

#: ../../usage/execution.rst:166
msgid ""
"Thus, they may be set at module level, which will take effect when the "
"fabfile is imported::"
msgstr ""

#: ../../usage/execution.rst:176
msgid ""
"Such a fabfile, run simply as ``fab mytask``, will run ``mytask`` on "
"``host1`` followed by ``host2``."
msgstr ""

#: ../../usage/execution.rst:179
msgid ""
"Since the env vars are checked for *each* task, this means that if you have "
"the need, you can actually modify ``env`` in one task and it will affect all"
" following tasks::"
msgstr ""

#: ../../usage/execution.rst:191
msgid ""
"When run as ``fab set_hosts mytask``, ``set_hosts`` is a \"local\" task -- "
"its own host list is empty -- but ``mytask`` will again run on the two hosts"
" given."
msgstr ""

#: ../../usage/execution.rst:196
msgid ""
"This technique used to be a common way of creating fake \"roles\", but is "
"less necessary now that roles are fully implemented. It may still be useful "
"in some situations, however."
msgstr ""

#: ../../usage/execution.rst:200
msgid ""
"Alongside ``env.hosts`` is ``env.roles`` (not to be confused with "
"``env.roledefs``!) which, if given, will be taken as a list of role names to"
" look up in ``env.roledefs``."
msgstr ""

#: ../../usage/execution.rst:205
msgid "Globally, via the command line"
msgstr ""

#: ../../usage/execution.rst:207
msgid ""
"In addition to modifying ``env.hosts``, ``env.roles``, and "
"``env.exclude_hosts`` at the module level, you may define them by passing "
"comma-separated string arguments to the command-line switches "
":option:`--hosts/-H <-H>` and :option:`--roles/-R <-R>`, e.g.::"
msgstr ""

#: ../../usage/execution.rst:214
msgid ""
"Such an invocation is directly equivalent to ``env.hosts = ['host1', "
"'host2']`` -- the argument parser knows to look for these arguments and will"
" modify ``env`` at parse time."
msgstr ""

#: ../../usage/execution.rst:220
msgid ""
"It's possible, and in fact common, to use these switches to set only a "
"single host or role. Fabric simply calls ``string.split(',')`` on the given "
"string, so a string with no commas turns into a single-item list."
msgstr ""

#: ../../usage/execution.rst:224
msgid ""
"It is important to know that these command-line switches are interpreted "
"**before** your fabfile is loaded: any reassignment to ``env.hosts`` or "
"``env.roles`` in your fabfile will overwrite them."
msgstr ""

#: ../../usage/execution.rst:228
msgid ""
"If you wish to nondestructively merge the command-line hosts with your "
"fabfile-defined ones, make sure your fabfile uses ``env.hosts.extend()`` "
"instead::"
msgstr ""

#: ../../usage/execution.rst:239
msgid ""
"When this fabfile is run as ``fab -H host1,host2 mytask``, ``env.hosts`` "
"will then contain ``['host1', 'host2', 'host3', 'host4']`` at the time that "
"``mytask`` is executed."
msgstr ""

#: ../../usage/execution.rst:245
msgid ""
"``env.hosts`` is simply a Python list object -- so you may use "
"``env.hosts.append()`` or any other such method you wish."
msgstr ""

#: ../../usage/execution.rst:251
msgid "Per-task, via the command line"
msgstr ""

#: ../../usage/execution.rst:253
msgid ""
"Globally setting host lists only works if you want all your tasks to run on "
"the same host list all the time. This isn't always true, so Fabric provides "
"a few ways to be more granular and specify host lists which apply to a "
"single task only. The first of these uses task arguments."
msgstr ""

#: ../../usage/execution.rst:258
msgid ""
"As outlined in :doc:`fab`, it's possible to specify per-task arguments via a"
" special command-line syntax. In addition to naming actual arguments to your"
" task function, this may be used to set the ``host``, ``hosts``, ``role`` or"
" ``roles`` \"arguments\", which are interpreted by Fabric when building host"
" lists (and removed from the arguments passed to the task itself.)"
msgstr ""

#: ../../usage/execution.rst:266
msgid ""
"Since commas are already used to separate task arguments from one another, "
"semicolons must be used in the ``hosts`` or ``roles`` arguments to delineate"
" individual host strings or role names. Furthermore, the argument must be "
"quoted to prevent your shell from interpreting the semicolons."
msgstr ""

#: ../../usage/execution.rst:271
msgid ""
"Take the below fabfile, which is the same one we've been using, but which "
"doesn't define any host info at all::"
msgstr ""

#: ../../usage/execution.rst:279
msgid "To specify per-task hosts for ``mytask``, execute it like so::"
msgstr ""

#: ../../usage/execution.rst:283
msgid ""
"This will override any other host list and ensure ``mytask`` always runs on "
"just those two hosts."
msgstr ""

#: ../../usage/execution.rst:287
msgid "Per-task, via decorators"
msgstr ""

#: ../../usage/execution.rst:289
msgid ""
"If a given task should always run on a predetermined host list, you may wish"
" to specify this in your fabfile itself. This can be done by decorating a "
"task function with the `~fabric.decorators.hosts` or "
"`~fabric.decorators.roles` decorators. These decorators take a variable "
"argument list, like so::"
msgstr ""

#: ../../usage/execution.rst:300
msgid "They will also take an single iterable argument, e.g.::"
msgstr ""

#: ../../usage/execution.rst:307
msgid ""
"When used, these decorators override any checks of ``env`` for that "
"particular task's host list (though ``env`` is not modified in any way -- it"
" is simply ignored.) Thus, even if the above fabfile had defined "
"``env.hosts`` or the call to :doc:`fab <fab>` uses :option:`--hosts/-H "
"<-H>`, ``mytask`` would still run on a host list of ``['host1', 'host2']``."
msgstr ""

#: ../../usage/execution.rst:313
msgid ""
"However, decorator host lists do **not** override per-task command-line "
"arguments, as given in the previous section."
msgstr ""

#: ../../usage/execution.rst:317
msgid "Order of precedence"
msgstr ""

#: ../../usage/execution.rst:319
msgid ""
"We've been pointing out which methods of setting host lists trump the "
"others, as we've gone along. However, to make things clearer, here's a quick"
" breakdown:"
msgstr ""

#: ../../usage/execution.rst:322
msgid ""
"Per-task, command-line host lists (``fab mytask:host=host1``) override "
"absolutely everything else."
msgstr ""

#: ../../usage/execution.rst:324
msgid ""
"Per-task, decorator-specified host lists (``@hosts('host1')``) override the "
"``env`` variables."
msgstr ""

#: ../../usage/execution.rst:326
msgid ""
"Globally specified host lists set in the fabfile (``env.hosts = ['host1']``)"
" *can* override such lists set on the command-line, but only if you're not "
"careful (or want them to.)"
msgstr ""

#: ../../usage/execution.rst:329
msgid ""
"Globally specified host lists set on the command-line (``--hosts=host1``) "
"will initialize the ``env`` variables, but that's it."
msgstr ""

#: ../../usage/execution.rst:332
msgid ""
"This logic may change slightly in the future to be more consistent (e.g. "
"having :option:`--hosts <-H>` somehow take precedence over ``env.hosts`` in "
"the same way that command-line per-task lists trump in-code ones) but only "
"in a backwards-incompatible release."
msgstr ""

#: ../../usage/execution.rst:340
msgid "Combining host lists"
msgstr ""

#: ../../usage/execution.rst:342
msgid ""
"There is no \"unionizing\" of hosts between the various sources mentioned in"
" :ref:`host-lists`. If ``env.hosts`` is set to ``['host1', 'host2', "
"'host3']``, and a per-function (e.g.  via `~fabric.decorators.hosts`) host "
"list is set to just ``['host2', 'host3']``, that function will **not** "
"execute on ``host1``, because the per-task decorator host list takes "
"precedence."
msgstr ""

#: ../../usage/execution.rst:348
msgid ""
"However, for each given source, if both roles **and** hosts are specified, "
"they will be merged together into a single host list. Take, for example, "
"this fabfile where both of the decorators are used::"
msgstr ""

#: ../../usage/execution.rst:361
msgid ""
"Assuming no command-line hosts or roles are given when ``mytask`` is "
"executed, this fabfile will call ``mytask`` on a host list of ``['a', 'b', "
"'c']`` -- the union of ``role1`` and the contents of the "
"`~fabric.decorators.hosts` call."
msgstr ""

#: ../../usage/execution.rst:369
msgid "Host list deduplication"
msgstr ""

#: ../../usage/execution.rst:371
msgid ""
"By default, to support :ref:`combining-host-lists`, Fabric deduplicates the "
"final host list so any given host string is only present once. However, this"
" prevents explicit/intentional running of a task multiple times on the same "
"target host, which is sometimes useful."
msgstr ""

#: ../../usage/execution.rst:376
msgid ""
"To turn off deduplication, set :ref:`env.dedupe_hosts <dedupe_hosts>` to "
"``False``."
msgstr ""

#: ../../usage/execution.rst:383
msgid "Excluding specific hosts"
msgstr ""

#: ../../usage/execution.rst:385
msgid ""
"At times, it is useful to exclude one or more specific hosts, e.g. to "
"override a few bad or otherwise undesirable hosts which are pulled in from a"
" role or an autogenerated host list."
msgstr ""

#: ../../usage/execution.rst:390
msgid ""
"As of Fabric 1.4, you may wish to use :ref:`skip-bad-hosts` instead, which "
"automatically skips over any unreachable hosts."
msgstr ""

#: ../../usage/execution.rst:393
msgid ""
"Host exclusion may be accomplished globally with :option:`--exclude-hosts/-x"
" <-x>`::"
msgstr ""

#: ../../usage/execution.rst:398
msgid ""
"If ``myrole`` was defined as ``['host1', 'host2', ..., 'host15']``, the "
"above invocation would run with an effective host list of ``['host1', "
"'host3', 'host4', 'host6', ..., 'host15']``."
msgstr ""

#: ../../usage/execution.rst:403
msgid ""
"Using this option does not modify ``env.hosts`` -- it only causes the main "
"execution loop to skip the requested hosts."
msgstr ""

#: ../../usage/execution.rst:406
msgid ""
"Exclusions may be specified per-task by using an extra ``exclude_hosts`` "
"kwarg, which is implemented similarly to the abovementioned ``hosts`` and "
"``roles`` per-task kwargs, in that it is stripped from the actual task "
"invocation. This example would have the same result as the global exclude "
"above::"
msgstr ""

#: ../../usage/execution.rst:413
msgid ""
"Note that the host list is semicolon-separated, just as with the ``hosts`` "
"per-task argument."
msgstr ""

#: ../../usage/execution.rst:417
msgid "Combining exclusions"
msgstr ""

#: ../../usage/execution.rst:419
msgid ""
"Host exclusion lists, like host lists themselves, are not merged together "
"across the different \"levels\" they can be declared in. For example, a "
"global ``-x`` option will not affect a per-task host list set with a "
"decorator or keyword argument, nor will per-task ``exclude_hosts`` keyword "
"arguments affect a global ``-H`` list."
msgstr ""

#: ../../usage/execution.rst:425
msgid ""
"There is one minor exception to this rule, namely that CLI-level keyword "
"arguments (``mytask:exclude_hosts=x,y``) **will** be taken into account when"
" examining host lists set via ``@hosts`` or ``@roles``. Thus a task function"
" decorated with ``@hosts('host1', 'host2')`` executed as ``fab "
"taskname:exclude_hosts=host2`` will only run on ``host1``."
msgstr ""

#: ../../usage/execution.rst:431
msgid ""
"As with the host list merging, this functionality is currently limited "
"(partly to keep the implementation simple) and may be expanded in future "
"releases."
msgstr ""

#: ../../usage/execution.rst:438
msgid "Intelligently executing tasks with ``execute``"
msgstr ""

#: ../../usage/execution.rst:442
msgid ""
"Most of the information here involves \"top level\" tasks executed via "
":doc:`fab <fab>`, such as the first example where we called ``fab taskA "
"taskB``. However, it's often convenient to wrap up multi-task invocations "
"like this into their own, \"meta\" tasks."
msgstr ""

#: ../../usage/execution.rst:447
msgid ""
"Prior to Fabric 1.3, this had to be done by hand, as outlined in "
":doc:`/usage/library`. Fabric's design eschews magical behavior, so simply "
"*calling* a task function does **not** take into account decorators such as "
"`~fabric.decorators.roles`."
msgstr ""

#: ../../usage/execution.rst:452
msgid ""
"New in Fabric 1.3 is the `~fabric.tasks.execute` helper function, which "
"takes a task object or name as its first argument. Using it is effectively "
"the same as calling the given task from the command line: all the rules "
"given above in :ref:`host-lists` apply. (The ``hosts`` and ``roles`` keyword"
" arguments to `~fabric.tasks.execute` are analogous to :ref:`CLI per-task "
"arguments <hosts-per-task-cli>`, including how they override all other host"
"/role-setting methods.)"
msgstr ""

#: ../../usage/execution.rst:460
msgid ""
"As an example, here's a fabfile defining two stand-alone tasks for deploying"
" a Web application::"
msgstr ""

#: ../../usage/execution.rst:480
msgid ""
"In Fabric <=1.2, the only way to ensure that ``migrate`` runs on the DB "
"servers and that ``update`` runs on the Web servers (short of manual "
"``env.host_string`` manipulation) was to call both as top level tasks::"
msgstr ""

#: ../../usage/execution.rst:486
msgid ""
"Fabric >=1.3 can use `~fabric.tasks.execute` to set up a meta-task. Update "
"the ``import`` line like so::"
msgstr ""

#: ../../usage/execution.rst:491
msgid "and append this to the bottom of the file::"
msgstr ""

#: ../../usage/execution.rst:497
msgid ""
"That's all there is to it; the `~fabric.decorators.roles` decorators will be"
" honored as expected, resulting in the following execution sequence:"
msgstr ""

#: ../../usage/execution.rst:499
msgid "`migrate` on `db1`"
msgstr ""

#: ../../usage/execution.rst:500
msgid "`migrate` on `db2`"
msgstr ""

#: ../../usage/execution.rst:501
msgid "`update` on `web1`"
msgstr ""

#: ../../usage/execution.rst:502
msgid "`update` on `web2`"
msgstr ""

#: ../../usage/execution.rst:503
msgid "`update` on `web3`"
msgstr ""

#: ../../usage/execution.rst:506
msgid ""
"This technique works because tasks that themselves have no host list (this "
"includes the global host list settings) only run one time. If used inside a "
"\"regular\" task that is going to run on multiple hosts, calls to "
"`~fabric.tasks.execute` will also run multiple times, resulting in "
"multiplicative numbers of subtask calls -- be careful!"
msgstr ""

#: ../../usage/execution.rst:512
msgid ""
"If you would like your `execute` calls to only be called once, you may use "
"the `~fabric.decorators.runs_once` decorator."
msgstr ""

#: ../../usage/execution.rst:515
msgid "`~fabric.tasks.execute`, `~fabric.decorators.runs_once`"
msgstr ""

#: ../../usage/execution.rst:521
msgid "Leveraging ``execute`` to access multi-host results"
msgstr ""

#: ../../usage/execution.rst:523
msgid ""
"In nontrivial Fabric runs, especially parallel ones, you may want to gather "
"up a bunch of per-host result values at the end - e.g. to present a summary "
"table, perform calculations, etc."
msgstr ""

#: ../../usage/execution.rst:527
msgid ""
"It's not possible to do this in Fabric's default \"naive\" mode (one where "
"you rely on Fabric looping over host lists on your behalf), but with "
"`.execute` it's pretty easy. Simply switch from calling the actual work-"
"bearing task, to calling a \"meta\" task which takes control of execution "
"with `.execute`::"
msgstr ""

#: ../../usage/execution.rst:544
msgid ""
"In the above, ``workhorse`` can do any Fabric stuff at all -- it's literally"
" your old \"naive\" task -- except that it needs to return something useful."
msgstr ""

#: ../../usage/execution.rst:547
msgid ""
"``go`` is your new entry point (to be invoked as ``fab go``, or whatnot) and"
" its job is to take the ``results`` dictionary from the `.execute` call and "
"do whatever you need with it. Check the API docs for details on the "
"structure of that return value."
msgstr ""

#: ../../usage/execution.rst:556
msgid "Using ``execute`` with dynamically-set host lists"
msgstr ""

#: ../../usage/execution.rst:558
msgid ""
"A common intermediate-to-advanced use case for Fabric is to parameterize "
"lookup of one's target host list at runtime (when use of :ref:`execution-"
"roles` does not suffice). ``execute`` can make this extremely simple, like "
"so::"
msgstr ""

#: ../../usage/execution.rst:583
msgid ""
"For example, if ``external_datastore`` was a simplistic \"look up hosts by "
"tag in a database\" service, and you wanted to run a task on all hosts "
"tagged as being related to your application stack, you might call the above "
"like this::"
msgstr ""

#: ../../usage/execution.rst:589
msgid ""
"But wait! A data migration has gone awry on the DB servers. Let's fix up our"
" migration code in our source repo, and deploy just the DB boxes again::"
msgstr ""

#: ../../usage/execution.rst:594
msgid ""
"This use case looks similar to Fabric's roles, but has much more potential, "
"and is by no means limited to a single argument. Define the task however you"
" wish, query your external data store in whatever way you need -- it's just "
"Python."
msgstr ""

#: ../../usage/execution.rst:599
msgid "The alternate approach"
msgstr ""

#: ../../usage/execution.rst:601
msgid ""
"Similar to the above, but using ``fab``'s ability to call multiple tasks in "
"succession instead of an explicit ``execute`` call, is to mutate "
":ref:`env.hosts <hosts>` in a host-list lookup task and then call "
"``do_work`` in the same session::"
msgstr ""

#: ../../usage/execution.rst:621
msgid "Then invoke like so::"
msgstr ""

#: ../../usage/execution.rst:625
msgid ""
"One benefit of this approach over the previous one is that you can replace "
"``do_work`` with any other \"workhorse\" task::"
msgstr ""

#: ../../usage/execution.rst:636
msgid "Failure handling"
msgstr ""

#: ../../usage/execution.rst:638
msgid ""
"Once the task list has been constructed, Fabric will start executing them as"
" outlined in :ref:`execution-strategy`, until all tasks have been run on the"
" entirety of their host lists. However, Fabric defaults to a \"fail-fast\" "
"behavior pattern: if anything goes wrong, such as a remote program returning"
" a nonzero return value or your fabfile's Python code encountering an "
"exception, execution will halt immediately."
msgstr ""

#: ../../usage/execution.rst:645
msgid ""
"This is typically the desired behavior, but there are many exceptions to the"
" rule, so Fabric provides ``env.warn_only``, a Boolean setting. It defaults "
"to ``False``, meaning an error condition will result in the program aborting"
" immediately. However, if ``env.warn_only`` is set to ``True`` at the time "
"of failure -- with, say, the `~fabric.context_managers.settings` context "
"manager -- Fabric will emit a warning message but continue executing."
msgstr ""

#: ../../usage/execution.rst:656 ../../usage/library.rst:15
msgid "Connections"
msgstr ""

#: ../../usage/execution.rst:658
msgid ""
"``fab`` itself doesn't actually make any connections to remote hosts. "
"Instead, it simply ensures that for each distinct run of a task on one of "
"its hosts, the env var ``env.host_string`` is set to the right value. Users "
"wanting to leverage Fabric as a library may do so manually to achieve "
"similar effects (though as of Fabric 1.3, using `~fabric.tasks.execute` is "
"preferred and more powerful.)"
msgstr ""

#: ../../usage/execution.rst:665
msgid ""
"``env.host_string`` is (as the name implies) the \"current\" host string, "
"and is what Fabric uses to determine what connections to make (or re-use) "
"when network-aware functions are run. Operations like "
"`~fabric.operations.run` or `~fabric.operations.put` use ``env.host_string``"
" as a lookup key in a shared dictionary which maps host strings to SSH "
"connection objects."
msgstr ""

#: ../../usage/execution.rst:673
msgid ""
"The connections dictionary (currently located at "
"``fabric.state.connections``) acts as a cache, opting to return previously "
"created connections if possible in order to save some overhead, and creating"
" new ones otherwise."
msgstr ""

#: ../../usage/execution.rst:679
msgid "Lazy connections"
msgstr ""

#: ../../usage/execution.rst:681
msgid ""
"Because connections are driven by the individual operations, Fabric will not"
" actually make connections until they're necessary. Take for example this "
"task which does some local housekeeping prior to interacting with the remote"
" server::"
msgstr ""

#: ../../usage/execution.rst:696
msgid "What happens, connection-wise, is as follows:"
msgstr ""

#: ../../usage/execution.rst:698
msgid ""
"The two `~fabric.operations.local` calls will run without making any network"
" connections whatsoever;"
msgstr ""

#: ../../usage/execution.rst:700
msgid ""
"`~fabric.operations.put` asks the connection cache for a connection to "
"``host1``;"
msgstr ""

#: ../../usage/execution.rst:702
msgid ""
"The connection cache fails to find an existing connection for that host "
"string, and so creates a new SSH connection, returning it to "
"`~fabric.operations.put`;"
msgstr ""

#: ../../usage/execution.rst:705
msgid "`~fabric.operations.put` uploads the file through that connection;"
msgstr ""

#: ../../usage/execution.rst:706
msgid ""
"Finally, the `~fabric.operations.run` call asks the cache for a connection "
"to that same host string, and is given the existing, cached connection for "
"its own use."
msgstr ""

#: ../../usage/execution.rst:710
msgid ""
"Extrapolating from this, you can also see that tasks which don't use any "
"network-borne operations will never actually initiate any connections "
"(though they will still be run once for each host in their host list, if "
"any.)"
msgstr ""

#: ../../usage/execution.rst:715
msgid "Closing connections"
msgstr ""

#: ../../usage/execution.rst:717
msgid ""
"Fabric's connection cache never closes connections itself -- it leaves this "
"up to whatever is using it. The :doc:`fab <fab>` tool does this bookkeeping "
"for you: it iterates over all open connections and closes them just before "
"it exits (regardless of whether the tasks failed or not.)"
msgstr ""

#: ../../usage/execution.rst:722
msgid ""
"Library users will need to ensure they explicitly close all open connections"
" before their program exits. This can be accomplished by calling "
"`~fabric.network.disconnect_all` at the end of your script."
msgstr ""

#: ../../usage/execution.rst:727
msgid ""
"`~fabric.network.disconnect_all` may be moved to a more public location in "
"the future; we're still working on making the library aspects of Fabric more"
" solidified and organized."
msgstr ""

#: ../../usage/execution.rst:732
msgid "Multiple connection attempts and skipping bad hosts"
msgstr ""

#: ../../usage/execution.rst:734
msgid ""
"As of Fabric 1.4, multiple attempts may be made to connect to remote servers"
" before aborting with an error: Fabric will try connecting "
":ref:`env.connection_attempts <connection-attempts>` times before giving up,"
" with a timeout of :ref:`env.timeout <timeout>` seconds each time. (These "
"currently default to 1 try and 10 seconds, to match previous behavior, but "
"they may be safely changed to whatever you need.)"
msgstr ""

#: ../../usage/execution.rst:741
msgid ""
"Furthermore, even total failure to connect to a server is no longer an "
"absolute hard stop: set :ref:`env.skip_bad_hosts <skip-bad-hosts>` to "
"``True`` and in most situations (typically initial connections) Fabric will "
"simply warn and continue, instead of aborting."
msgstr ""

#: ../../usage/execution.rst:751
msgid "Password management"
msgstr ""

#: ../../usage/execution.rst:753
msgid ""
"Fabric maintains an in-memory, two-tier password cache to help remember your"
" login and sudo passwords in certain situations; this helps avoid tedious "
"re-entry when multiple systems share the same password [#]_, or if a remote "
"system's ``sudo`` configuration doesn't do its own caching."
msgstr ""

#: ../../usage/execution.rst:758
msgid ""
"The first layer is a simple default or fallback password cache, "
":ref:`env.password <password>` (which may also be set at the command line "
"via :option:`--password <-p>` or :option:`--initial-password-prompt <-I>`). "
"This env var stores a single password which (if non-empty) will be tried in "
"the event that the host-specific cache (see below) has no entry for the "
"current :ref:`host string <host_string>`."
msgstr ""

#: ../../usage/execution.rst:765
msgid ""
":ref:`env.passwords <passwords>` (plural!) serves as a per-user/per-host "
"cache, storing the most recently entered password for every unique "
"user/host/port combination.  Due to this cache, connections to multiple "
"different users and/or hosts in the same session will only require a single "
"password entry for each. (Previous versions of Fabric used only the single, "
"default password cache and thus required password re-entry every time the "
"previously entered password became invalid.)"
msgstr ""

#: ../../usage/execution.rst:773
msgid ""
"Depending on your configuration and the number of hosts your session will "
"connect to, you may find setting either or both of these env vars to be "
"useful. However, Fabric will automatically fill them in as necessary without"
" any additional configuration."
msgstr ""

#: ../../usage/execution.rst:778
msgid ""
"Specifically, each time a password prompt is presented to the user, the "
"value entered is used to update both the single default password cache, and "
"the cache value for the current value of ``env.host_string``."
msgstr ""

#: ../../usage/execution.rst:782
msgid ""
"We highly recommend the use of SSH `key-based access "
"<http://en.wikipedia.org/wiki/Public_key>`_ instead of relying on "
"homogeneous password setups, as it's significantly more secure."
msgstr ""

#: ../../usage/execution.rst:790
msgid "Leveraging native SSH config files"
msgstr ""

#: ../../usage/execution.rst:792
msgid ""
"Command-line SSH clients (such as the one provided by `OpenSSH "
"<http://openssh.org>`_) make use of a specific configuration format "
"typically known as ``ssh_config``, and will read from a file in the "
"platform-specific location ``$HOME/.ssh/config`` (or an arbitrary path given"
" to :option:`--ssh-config-path`/:ref:`env.ssh_config_path <ssh-config-"
"path>`.) This file allows specification of various SSH options such as "
"default or per-host usernames, hostname aliases, and toggling other settings"
" (such as whether to use :ref:`agent forwarding <forward-agent>`.)"
msgstr ""

#: ../../usage/execution.rst:801
msgid ""
"Fabric's SSH implementation allows loading a subset of these options from "
"one's actual SSH config file, should it exist. This behavior is not enabled "
"by default (in order to be backwards compatible) but may be turned on by "
"setting :ref:`env.use_ssh_config <use-ssh-config>` to ``True`` at the top of"
" your fabfile."
msgstr ""

#: ../../usage/execution.rst:807
msgid ""
"If enabled, the following SSH config directives will be loaded and honored "
"by Fabric:"
msgstr ""

#: ../../usage/execution.rst:809
msgid ""
"``User`` and ``Port`` will be used to fill in the appropriate connection "
"parameters when not otherwise specified, in the following fashion:"
msgstr ""

#: ../../usage/execution.rst:812
msgid ""
"Globally specified ``User``/``Port`` will be used in place of the current "
"defaults (local username and 22, respectively) if the appropriate env vars "
"are not set."
msgstr ""

#: ../../usage/execution.rst:815
msgid ""
"However, if :ref:`env.user <user>`/:ref:`env.port <port>` *are* set, they "
"override global ``User``/``Port`` values."
msgstr ""

#: ../../usage/execution.rst:817
msgid ""
"User/port values in the host string itself (e.g. ``hostname:222``) will "
"override everything, including any ``ssh_config`` values."
msgstr ""

#: ../../usage/execution.rst:819
msgid ""
"``HostName`` can be used to replace the given hostname, just like with "
"regular ``ssh``. So a ``Host foo`` entry specifying ``HostName example.com``"
" will allow you to give Fabric the hostname ``'foo'`` and have that expanded"
" into ``'example.com'`` at connection time."
msgstr ""

#: ../../usage/execution.rst:823
msgid ""
"``IdentityFile`` will extend (not replace) :ref:`env.key_filename <key-"
"filename>`."
msgstr ""

#: ../../usage/execution.rst:825
msgid ""
"``ForwardAgent`` will augment :ref:`env.forward_agent <forward-agent>` in an"
" \"OR\" manner: if either is set to a positive value, agent forwarding will "
"be enabled."
msgstr ""

#: ../../usage/execution.rst:828
msgid ""
"``ProxyCommand`` will trigger use of a proxy command for host connections, "
"just as with regular ``ssh``."
msgstr ""

#: ../../usage/execution.rst:832
msgid ""
"If all you want to do is bounce SSH traffic off a gateway, you may find "
":ref:`env.gateway <gateway>` to be a more efficient connection method (which"
" will also honor more Fabric-level settings) than the typical ``ssh "
"gatewayhost nc %h %p`` method of using ``ProxyCommand`` as a gateway."
msgstr ""

#: ../../usage/execution.rst:838
msgid ""
"If your SSH config file contains ``ProxyCommand`` directives *and* you have "
"set :ref:`env.gateway <gateway>` to a non-``None`` value, ``env.gateway`` "
"will take precedence and the ``ProxyCommand`` will be ignored."
msgstr ""

#: ../../usage/execution.rst:842
msgid ""
"If one has a pre-created SSH config file, rationale states it will be easier"
" for you to modify ``env.gateway`` (e.g. via "
"`~fabric.context_managers.settings`) than to work around your conf file's "
"contents entirely."
msgstr ""

#: ../../usage/fab.rst:3
msgid "``fab`` options and arguments"
msgstr ""

#: ../../usage/fab.rst:5
msgid ""
"The most common method for utilizing Fabric is via its command-line tool, "
"``fab``, which should have been placed on your shell's executable path when "
"Fabric was installed. ``fab`` tries hard to be a good Unix citizen, using a "
"standard style of command-line switches, help output, and so forth."
msgstr ""

#: ../../usage/fab.rst:12
msgid "Basic use"
msgstr ""

#: ../../usage/fab.rst:14
msgid ""
"In its most simple form, ``fab`` may be called with no options at all, and "
"with one or more arguments, which should be task names, e.g.::"
msgstr ""

#: ../../usage/fab.rst:19
msgid ""
"As detailed in :doc:`../tutorial` and :doc:`execution`, this will run "
"``task1`` followed by ``task2``, assuming that Fabric was able to find a "
"fabfile nearby containing Python functions with those names."
msgstr ""

#: ../../usage/fab.rst:23
msgid ""
"However, it's possible to expand this simple usage into something more "
"flexible, by using the provided options and/or passing arguments to "
"individual tasks."
msgstr ""

#: ../../usage/fab.rst:31
msgid "Arbitrary remote shell commands"
msgstr ""

#: ../../usage/fab.rst:35
msgid ""
"Fabric leverages a lesser-known command line convention and may be called in"
" the following manner::"
msgstr ""

#: ../../usage/fab.rst:40
msgid ""
"where everything after the ``--`` is turned into a temporary "
"`~fabric.operations.run` call, and is not parsed for ``fab`` options. If "
"you've defined a host list at the module level or on the command line, this "
"usage will act like a one-line anonymous task."
msgstr ""

#: ../../usage/fab.rst:45
msgid ""
"For example, let's say you just wanted to get the kernel info for a bunch of"
" systems; you could do this::"
msgstr ""

#: ../../usage/fab.rst:50
msgid "which would be literally equivalent to the following fabfile::"
msgstr ""

#: ../../usage/fab.rst:57
msgid "as if it were executed thusly::"
msgstr ""

#: ../../usage/fab.rst:61
msgid ""
"Most of the time you will want to just write out the task in your fabfile "
"(anything you use once, you're likely to use again) but this feature "
"provides a handy, fast way to quickly dash off an SSH-borne command while "
"leveraging your fabfile's connection settings."
msgstr ""

#: ../../usage/fab.rst:70
msgid "Command-line options"
msgstr ""

#: ../../usage/fab.rst:72
msgid ""
"A quick overview of all possible command line options can be found via ``fab"
" --help``. If you're looking for details on a specific option, we go into "
"detail below."
msgstr ""

#: ../../usage/fab.rst:78
msgid ""
"``fab`` uses Python's `optparse`_ library, meaning that it honors typical "
"Linux or GNU style short and long options, as well as freely mixing options "
"and arguments. E.g. ``fab task1 -H hostname task2 -i path/to/keyfile`` is "
"just as valid as the more straightforward ``fab -H hostname -i "
"path/to/keyfile task1 task2``."
msgstr ""

#: ../../usage/fab.rst:88
msgid ""
"Sets :ref:`env.no_agent <no_agent>` to ``True``, forcing our SSH layer not "
"to talk to the SSH agent when trying to unlock private key files."
msgstr ""

#: ../../usage/fab.rst:95
msgid ""
"Sets :ref:`env.forward_agent <forward-agent>` to ``True``, enabling agent "
"forwarding."
msgstr ""

#: ../../usage/fab.rst:102
msgid ""
"Sets :ref:`env.abort_on_prompts <abort-on-prompts>` to ``True``, forcing "
"Fabric to abort whenever it would prompt for input."
msgstr ""

#: ../../usage/fab.rst:109
msgid ""
"Sets :ref:`env.rcfile <rcfile>` to the given file path, which Fabric will "
"try to load on startup and use to update environment variables."
msgstr ""

#: ../../usage/fab.rst:114
msgid ""
"Prints the entire docstring for the given task, if there is one. Does not "
"currently print out the task's function signature, so descriptive docstrings"
" are a good idea. (They're *always* a good idea, of course -- just moreso "
"here.)"
msgstr ""

#: ../../usage/fab.rst:121
msgid ""
"Set number of times to attempt connections. Sets "
":ref:`env.connection_attempts <connection-attempts>`."
msgstr ""

#: ../../usage/fab.rst:125
msgid ""
":ref:`env.connection_attempts <connection-attempts>`, :ref:`env.timeout "
"<timeout>`"
msgstr ""

#: ../../usage/fab.rst:131
msgid ""
"Sets :ref:`env.disable_known_hosts <disable-known-hosts>` to ``True``, "
"preventing Fabric from loading the user's SSH :file:`known_hosts` file."
msgstr ""

#: ../../usage/fab.rst:136
msgid ""
"The fabfile name pattern to search for (defaults to ``fabfile.py``), or "
"alternately an explicit file path to load as the fabfile (e.g. "
"``/path/to/my/fabfile.py``.)"
msgstr ""

#: ../../usage/fab.rst:140
msgid ":doc:`fabfiles`"
msgstr ""

#: ../../usage/fab.rst:144
msgid ""
"Allows control over the output format of :option:`--list <-l>`. ``short`` is"
" equivalent to :option:`--shortlist`, ``normal`` is the same as simply "
"omitting this option entirely (i.e. the default), and ``nested`` prints out "
"a nested namespace tree."
msgstr ""

#: ../../usage/fab.rst:150
msgid ":option:`--shortlist`, :option:`--list <-l>`"
msgstr ""

#: ../../usage/fab.rst:154
msgid "Sets :ref:`env.gateway <gateway>` to ``HOST`` host string."
msgstr ""

#: ../../usage/fab.rst:160
msgid ""
"Displays a standard help message, with all possible options and a brief "
"overview of what they do, then exits."
msgstr ""

#: ../../usage/fab.rst:165
msgid ""
"A comma-separated list of :doc:`output levels <output_controls>` to hide by "
"default."
msgstr ""

#: ../../usage/fab.rst:171
msgid ""
"Sets :ref:`env.hosts <hosts>` to the given comma-delimited list of host "
"strings."
msgstr ""

#: ../../usage/fab.rst:176
msgid ""
"Sets :ref:`env.exclude_hosts <exclude-hosts>` to the given comma-delimited "
"list of host strings to then keep out of the final host list."
msgstr ""

#: ../../usage/fab.rst:183
msgid ""
"When set to a file path, will load the given file as an SSH identity file "
"(usually a private key.) This option may be repeated multiple times. Sets "
"(or appends to) :ref:`env.key_filename <key-filename>`."
msgstr ""

#: ../../usage/fab.rst:189
msgid ""
"Forces a password prompt at the start of the session (after fabfile load and"
" option parsing, but before executing any tasks) in order to pre-fill "
":ref:`env.password <password>`."
msgstr ""

#: ../../usage/fab.rst:193
msgid ""
"This is useful for fire-and-forget runs (especially parallel sessions, in "
"which runtime input is not possible) when setting the password via "
":option:`--password <-p>` or by setting :ref:`env.password <password>` in "
"your fabfile, is undesirable."
msgstr ""

#: ../../usage/fab.rst:198
msgid ""
"The value entered into this prompt will *overwrite* anything supplied via "
":ref:`env.password <password>` at module level, or via :option:`--password "
"<-p>`."
msgstr ""

#: ../../usage/fab.rst:206
msgid ""
"Sets :ref:`env.no_keys <no_keys>` to ``True``, forcing the SSH layer to not "
"look for SSH private key files in one's home directory."
msgstr ""

#: ../../usage/fab.rst:213
msgid ""
"Sets :ref:`env.keepalive <keepalive>` to the given (integer) value, "
"specifying an SSH keepalive interval."
msgstr ""

#: ../../usage/fab.rst:219
msgid ""
"Forces output to be buffered line-by-line instead of byte-by-byte. Often "
"useful or required for :ref:`parallel execution <linewise-output>`."
msgstr ""

#: ../../usage/fab.rst:225
msgid ""
"Imports a fabfile as normal, but then prints a list of all discovered tasks "
"and exits. Will also print the first line of each task's docstring, if it "
"has one, next to it (truncating if necessary.)"
msgstr ""

#: ../../usage/fab.rst:229
msgid "Added docstring to output."
msgstr ""

#: ../../usage/fab.rst:231
msgid ":option:`--shortlist`, :option:`--list-format <-F>`"
msgstr ""

#: ../../usage/fab.rst:235
msgid ""
"Sets :ref:`env.password <password>` to the given string; it will then be "
"used as the default password when making SSH connections or calling the "
"``sudo`` program."
msgstr ""

#: ../../usage/fab.rst:239
msgid ":option:`--initial-password-prompt <-I>`"
msgstr ""

#: ../../usage/fab.rst:243
msgid ""
"Sets :ref:`env.parallel <env-parallel>` to ``True``, causing tasks to run in"
" parallel."
msgstr ""

#: ../../usage/fab.rst:247 ../../usage/fab.rst:362
msgid ":doc:`/usage/parallel`"
msgstr ""

#: ../../usage/fab.rst:251
msgid ""
"Sets :ref:`env.always_use_pty <always-use-pty>` to ``False``, causing all "
"`~fabric.operations.run`/`~fabric.operations.sudo` calls to behave as if one"
" had specified ``pty=False``."
msgstr ""

#: ../../usage/fab.rst:259
msgid ""
"Sets :ref:`env.reject_unknown_hosts <reject-unknown-hosts>` to ``True``, "
"causing Fabric to abort when connecting to hosts not found in the user's SSH"
" :file:`known_hosts` file."
msgstr ""

#: ../../usage/fab.rst:265
msgid ""
"Sets :ref:`env.roles <roles>` to the given comma-separated list of role "
"names."
msgstr ""

#: ../../usage/fab.rst:270
msgid ""
"Allows you to set default values for arbitrary Fabric env vars. Values set "
"this way have a low precedence -- they will not override more specific env "
"vars which are also specified on the command line. E.g.::"
msgstr ""

#: ../../usage/fab.rst:276
msgid "will result in ``env.password = 'bar'``, not ``'foo'``"
msgstr ""

#: ../../usage/fab.rst:278
msgid ""
"Multiple ``KEY=VALUE`` pairs may be comma-separated, e.g. ``fab --set "
"var1=val1,var2=val2``."
msgstr ""

#: ../../usage/fab.rst:281
msgid ""
"Other than basic string values, you may also set env vars to True by "
"omitting the ``=VALUE`` (e.g. ``fab --set KEY``), and you may set values to "
"the empty string (and thus a False-equivalent value) by keeping the equals "
"sign, but omitting ``VALUE`` (e.g. ``fab --set KEY=``.)"
msgstr ""

#: ../../usage/fab.rst:290
msgid ""
"Sets :ref:`env.shell <shell>` to the given string, overriding the default "
"shell wrapper used to execute remote commands."
msgstr ""

#: ../../usage/fab.rst:295
msgid ""
"Similar to :option:`--list <-l>`, but without any embellishment, just task "
"names separated by newlines with no indentation or docstrings."
msgstr ""

#: ../../usage/fab.rst:299
msgid ":option:`--list <-l>`"
msgstr ""

#: ../../usage/fab.rst:303
msgid ""
"A comma-separated list of :doc:`output levels <output_controls>` to be added"
" to those that are shown by default."
msgstr ""

#: ../../usage/fab.rst:307
msgid "`~fabric.operations.run`, `~fabric.operations.sudo`"
msgstr ""

#: ../../usage/fab.rst:311
msgid "Sets :ref:`env.ssh_config_path <ssh-config-path>`."
msgstr ""

#: ../../usage/fab.rst:318
msgid ""
"Sets :ref:`env.skip_bad_hosts <skip-bad-hosts>`, causing Fabric to skip "
"unavailable hosts."
msgstr ""

#: ../../usage/fab.rst:325
msgid "Set connection timeout in seconds. Sets :ref:`env.timeout <timeout>`."
msgstr ""

#: ../../usage/fab.rst:328
msgid ""
":ref:`env.timeout <timeout>`, :ref:`env.connection_attempts <connection-"
"attempts>`"
msgstr ""

#: ../../usage/fab.rst:334
msgid ""
"Set remote command timeout in seconds. Sets :ref:`env.command_timeout "
"<command-timeout>`."
msgstr ""

#: ../../usage/fab.rst:338
msgid ":ref:`env.command_timeout <command-timeout>`,"
msgstr ""

#: ../../usage/fab.rst:344
msgid ""
"Sets :ref:`env.user <user>` to the given string; it will then be used as the"
" default username when making SSH connections."
msgstr ""

#: ../../usage/fab.rst:349
msgid "Displays Fabric's version number, then exits."
msgstr ""

#: ../../usage/fab.rst:353
msgid ""
"Sets :ref:`env.warn_only <warn_only>` to ``True``, causing Fabric to "
"continue execution even when commands encounter error conditions."
msgstr ""

#: ../../usage/fab.rst:358
msgid ""
"Sets :ref:`env.pool_size <pool-size>`, which specifies how many processes to"
" run concurrently during parallel execution."
msgstr ""

#: ../../usage/fab.rst:368
msgid "Per-task arguments"
msgstr ""

#: ../../usage/fab.rst:370
msgid ""
"The options given in :ref:`command-line-options` apply to the invocation of "
"``fab`` as a whole; even if the order is mixed around, options still apply "
"to all given tasks equally. Additionally, since tasks are just Python "
"functions, it's often desirable to pass in arguments to them at runtime."
msgstr ""

#: ../../usage/fab.rst:375
msgid ""
"Answering both these needs is the concept of \"per-task arguments\", which "
"is a special syntax you can tack onto the end of any task name:"
msgstr ""

#: ../../usage/fab.rst:378
msgid "Use a colon (``:``) to separate the task name from its arguments;"
msgstr ""

#: ../../usage/fab.rst:379
msgid ""
"Use commas (``,``) to separate arguments from one another (may be escaped by"
" using a backslash, i.e. ``\\,``);"
msgstr ""

#: ../../usage/fab.rst:381
msgid ""
"Use equals signs (``=``) for keyword arguments, or omit them for positional "
"arguments. May also be escaped with backslashes."
msgstr ""

#: ../../usage/fab.rst:384
msgid ""
"Additionally, since this process involves string parsing, all values will "
"end up as Python strings, so plan accordingly. (We hope to improve upon this"
" in future versions of Fabric, provided an intuitive syntax can be found.)"
msgstr ""

#: ../../usage/fab.rst:388
msgid ""
"For example, a \"create a new user\" task might be defined like so (omitting"
" most of the actual logic for brevity)::"
msgstr ""

#: ../../usage/fab.rst:395
msgid "You can specify just the username::"
msgstr ""

#: ../../usage/fab.rst:399
msgid "Or treat it as an explicit keyword argument::"
msgstr ""

#: ../../usage/fab.rst:403
msgid "If both args are given, you can again give them as positional args::"
msgstr ""

#: ../../usage/fab.rst:407
msgid "Or mix and match, just like in Python::"
msgstr ""

#: ../../usage/fab.rst:411
msgid ""
"The ``log_action`` call above is useful for illustrating escaped commas, "
"like so::"
msgstr ""

#: ../../usage/fab.rst:417
msgid ""
"Quoting the backslash-escaped comma is required, as not doing so will cause "
"shell syntax errors. Quotes are also needed whenever an argument involves "
"other shell-related characters such as spaces."
msgstr ""

#: ../../usage/fab.rst:421
msgid ""
"All of the above are translated into the expected Python function calls. For"
" example, the last call above would become::"
msgstr ""

#: ../../usage/fab.rst:427
msgid "Roles and hosts"
msgstr ""

#: ../../usage/fab.rst:429
msgid ""
"As mentioned in :ref:`the section on task execution <hosts-per-task-cli>`, "
"there are a handful of per-task keyword arguments (``host``, ``hosts``, "
"``role`` and ``roles``) which do not actually map to the task functions "
"themselves, but are used for setting per-task host and/or role lists."
msgstr ""

#: ../../usage/fab.rst:434
msgid ""
"These special kwargs are **removed** from the args/kwargs sent to the task "
"function itself; this is so that you don't run into TypeErrors if your task "
"doesn't define the kwargs in question. (It also means that if you **do** "
"define arguments with these names, you won't be able to specify them in this"
" manner -- a regrettable but necessary sacrifice.)"
msgstr ""

#: ../../usage/fab.rst:442
msgid ""
"If both the plural and singular forms of these kwargs are given, the value "
"of the plural will win out and the singular will be discarded."
msgstr ""

#: ../../usage/fab.rst:445
msgid ""
"When using the plural form of these arguments, one must use semicolons "
"(``;``) since commas are already being used to separate arguments from one "
"another. Furthermore, since your shell is likely to consider semicolons a "
"special character, you'll want to quote the host list string to prevent "
"shell interpretation, e.g.::"
msgstr ""

#: ../../usage/fab.rst:453
msgid ""
"Again, since the ``hosts`` kwarg is removed from the argument list sent to "
"the ``new_user`` task function, the actual Python invocation would be "
"``new_user('myusername')``, and the function would be executed on a host "
"list of ``['host1', 'host2']``."
msgstr ""

#: ../../usage/fab.rst:461
msgid "Settings files"
msgstr ""

#: ../../usage/fab.rst:463
msgid ""
"Fabric currently honors a simple user settings file, or ``fabricrc`` (think "
"``bashrc`` but for ``fab``) which should contain one or more key-value "
"pairs, one per line. These lines will be subject to ``string.split('=')``, "
"and thus can currently only be used to specify string settings. Any such "
"key-value pairs will be used to update :doc:`env <env>` when ``fab`` runs, "
"and is loaded prior to the loading of any fabfile."
msgstr ""

#: ../../usage/fab.rst:470
msgid ""
"By default, Fabric looks for ``~/.fabricrc``, and this may be overridden by "
"specifying the :option:`-c` flag to ``fab``."
msgstr ""

#: ../../usage/fab.rst:473
msgid ""
"For example, if your typical SSH login username differs from your "
"workstation username, and you don't want to modify ``env.user`` in a "
"project's fabfile (possibly because you expect others to use it as well) you"
" could write a ``fabricrc`` file like so::"
msgstr ""

#: ../../usage/fab.rst:480
msgid ""
"Then, when running ``fab``, your fabfile would load up with ``env.user`` set"
" to ``'ssh_user_name'``. Other users of that fabfile could do the same, "
"allowing the fabfile itself to be cleanly agnostic regarding the default "
"username."
msgstr ""

#: ../../usage/fabfiles.rst:3
msgid "Fabfile construction and use"
msgstr ""

#: ../../usage/fabfiles.rst:5
msgid ""
"This document contains miscellaneous sections about fabfiles, both how to "
"best write them, and how to use them once written."
msgstr ""

#: ../../usage/fabfiles.rst:11
msgid "Fabfile discovery"
msgstr ""

#: ../../usage/fabfiles.rst:13
msgid ""
"Fabric is capable of loading Python modules (e.g. ``fabfile.py``) or "
"packages (e.g. a ``fabfile/`` directory containing an ``__init__.py``). By "
"default, it looks for something named (to Python's import machinery) "
"``fabfile`` - so either ``fabfile/`` or ``fabfile.py``."
msgstr ""

#: ../../usage/fabfiles.rst:18
msgid ""
"The fabfile discovery algorithm searches in the invoking user's current "
"working directory or any parent directories. Thus, it is oriented around "
"\"project\" use, where one keeps e.g. a ``fabfile.py`` at the root of a "
"source code tree. Such a fabfile will then be discovered no matter where in "
"the tree the user invokes ``fab``."
msgstr ""

#: ../../usage/fabfiles.rst:24
msgid ""
"The specific name to be searched for may be overridden on the command-line "
"with the :option:`-f` option, or by adding a :ref:`fabricrc <fabricrc>` line"
" which sets the value of ``fabfile``. For example, if you wanted to name "
"your fabfile ``fab_tasks.py``, you could create such a file and then call "
"``fab -f fab_tasks.py <task name>``, or add ``fabfile = fab_tasks.py`` to "
"``~/.fabricrc``."
msgstr ""

#: ../../usage/fabfiles.rst:31
msgid ""
"If the given fabfile name contains path elements other than a filename (e.g."
" ``../fabfile.py`` or ``/dir1/dir2/custom_fabfile``) it will be treated as a"
" file path and directly checked for existence without any sort of searching."
" When in this mode, tilde-expansion will be applied, so one may refer to "
"e.g. ``~/personal_fabfile.py``."
msgstr ""

#: ../../usage/fabfiles.rst:39
msgid ""
"Fabric does a normal ``import`` (actually an ``__import__``) of your fabfile"
" in order to access its contents -- it does not do any ``eval``-ing or "
"similar. In order for this to work, Fabric temporarily adds the found "
"fabfile's containing folder to the Python load path (and removes it "
"immediately afterwards.)"
msgstr ""

#: ../../usage/fabfiles.rst:45
msgid "The ability to load package fabfiles."
msgstr ""

#: ../../usage/fabfiles.rst:52
msgid "Importing Fabric"
msgstr ""

#: ../../usage/fabfiles.rst:54
msgid ""
"Because Fabric is just Python, you *can* import its components any way you "
"want. However, for the purposes of encapsulation and convenience (and to "
"make life easier for Fabric's packaging script) Fabric's public API is "
"maintained in the ``fabric.api`` module."
msgstr ""

#: ../../usage/fabfiles.rst:59
msgid ""
"All of Fabric's :doc:`../api/core/operations`, "
":doc:`../api/core/context_managers`, :doc:`../api/core/decorators` and "
":doc:`../api/core/utils` are included in this module as a single, flat "
"namespace. This enables a very simple and consistent interface to Fabric "
"within your fabfiles::"
msgstr ""

#: ../../usage/fabfiles.rst:69
msgid ""
"This is not technically best practices (for `a number of reasons`_) and if "
"you're only using a couple of Fab API calls, it *is* probably a good idea to"
" explicitly ``from fabric.api import env, run`` or similar. However, in most"
" nontrivial fabfiles, you'll be using all or most of the API, and the star "
"import::"
msgstr ""

#: ../../usage/fabfiles.rst:77
msgid "will be a lot easier to write and read than::"
msgstr ""

#: ../../usage/fabfiles.rst:82
msgid "so in this case we feel pragmatism overrides best practices."
msgstr ""

#: ../../usage/fabfiles.rst:88
msgid "Defining tasks and importing callables"
msgstr ""

#: ../../usage/fabfiles.rst:90
msgid ""
"For important information on what exactly Fabric will consider as a task "
"when it loads your fabfile, as well as notes on how best to import other "
"code, please see :doc:`/usage/tasks` in the :doc:`execution` documentation."
msgstr ""

#: ../../usage/interactivity.rst:3
msgid "Interaction with remote programs"
msgstr ""

#: ../../usage/interactivity.rst:5
msgid ""
"Fabric's primary operations, `~fabric.operations.run` and "
"`~fabric.operations.sudo`, are capable of sending local input to the remote "
"end, in a manner nearly identical to the ``ssh`` program. For example, "
"programs which display password prompts (e.g. a database dump utility, or "
"changing a user's password) will behave just as if you were interacting with"
" them directly."
msgstr ""

#: ../../usage/interactivity.rst:12
msgid ""
"However, as with ``ssh`` itself, Fabric's implementation of this feature is "
"subject to a handful of limitations which are not always intuitive. This "
"document discusses such issues in detail."
msgstr ""

#: ../../usage/interactivity.rst:17
msgid ""
"Readers unfamiliar with the basics of Unix stdout and stderr pipes, and/or "
"terminal devices, may wish to visit the Wikipedia pages for `Unix pipelines "
"<http://en.wikipedia.org/wiki/Pipe_(Unix)>`_ and `Pseudo terminals "
"<http://en.wikipedia.org/wiki/Pseudo_terminal>`_ respectively."
msgstr ""

#: ../../usage/interactivity.rst:26
msgid "Combining stdout and stderr"
msgstr ""

#: ../../usage/interactivity.rst:28
msgid ""
"The first issue to be aware of is that of the stdout and stderr streams, and"
" why they are separated or combined as needed."
msgstr ""

#: ../../usage/interactivity.rst:32
msgid "Buffering"
msgstr ""

#: ../../usage/interactivity.rst:34
msgid ""
"Fabric 0.9.x and earlier, and Python itself, buffer output on a line-by-line"
" basis: text is not printed to the user until a newline character is found. "
"This works fine in most situations but becomes problematic when one needs to"
" deal with partial-line output such as prompts."
msgstr ""

#: ../../usage/interactivity.rst:40
msgid ""
"Line-buffered output can make programs appear to halt or freeze for no "
"reason, as prompts print out text without a newline, waiting for the user to"
" enter their input and press Return."
msgstr ""

#: ../../usage/interactivity.rst:44
msgid ""
"Newer Fabric versions buffer both input and output on a character-by-"
"character basis in order to make interaction with prompts possible. This has"
" the convenient side effect of enabling interaction with complex programs "
"utilizing the \"curses\" libraries or which otherwise redraw the screen "
"(think ``top``)."
msgstr ""

#: ../../usage/interactivity.rst:50
msgid "Crossing the streams"
msgstr ""

#: ../../usage/interactivity.rst:52
msgid ""
"Unfortunately, printing to stderr and stdout simultaneously (as many "
"programs do) means that when the two streams are printed independently one "
"byte at a time, they can become garbled or meshed together. While this can "
"sometimes be mitigated by line-buffering one of the streams and not the "
"other, it's still a serious issue."
msgstr ""

#: ../../usage/interactivity.rst:58
msgid ""
"To solve this problem, Fabric uses a setting in our SSH layer which merges "
"the two streams at a low level and causes output to appear more naturally. "
"This setting is represented in Fabric as the :ref:`combine-stderr` env var "
"and keyword argument, and is ``True`` by default."
msgstr ""

#: ../../usage/interactivity.rst:63
msgid ""
"Due to this default setting, output will appear correctly, but at the cost "
"of an empty ``.stderr`` attribute on the return values of "
"`~fabric.operations.run`/`~fabric.operations.sudo`, as all output will "
"appear to be stdout."
msgstr ""

#: ../../usage/interactivity.rst:68
msgid ""
"Conversely, users requiring a distinct stderr stream at the Python level and"
" who aren't bothered by garbled user-facing output (or who are hiding stdout"
" and stderr from the command in question) may opt to set this to ``False`` "
"as needed."
msgstr ""

#: ../../usage/interactivity.rst:77
msgid "Pseudo-terminals"
msgstr ""

#: ../../usage/interactivity.rst:79
msgid ""
"The other main issue to consider when presenting interactive prompts to "
"users is that of echoing the user's own input."
msgstr ""

#: ../../usage/interactivity.rst:83
msgid "Echoes"
msgstr ""

#: ../../usage/interactivity.rst:85
msgid ""
"Typical terminal applications or bona fide text terminals (e.g. when using a"
" Unix system without a running GUI) present programs with a terminal device "
"called a tty or pty (for pseudo-terminal). These automatically echo all text"
" typed into them back out to the user (via stdout), as interaction without "
"seeing what you had just typed would be difficult. Terminal devices are also"
" able to conditionally turn off echoing, allowing secure password prompts."
msgstr ""

#: ../../usage/interactivity.rst:92
msgid ""
"However, it's possible for programs to be run without a tty or pty present "
"at all (consider cron jobs, for example) and in this situation, any stdin "
"data being fed to the program won't be echoed. This is desirable for "
"programs being run without any humans around, and it's also Fabric's old "
"default mode of operation."
msgstr ""

#: ../../usage/interactivity.rst:99
msgid "Fabric's approach"
msgstr ""

#: ../../usage/interactivity.rst:101
msgid ""
"Unfortunately, in the context of executing commands via Fabric, when no pty "
"is present to echo a user's stdin, Fabric must echo it for them. This is "
"sufficient for many applications, but it presents problems for password "
"prompts, which become insecure."
msgstr ""

#: ../../usage/interactivity.rst:106
msgid ""
"In the interests of security and meeting the principle of least surprise "
"(insofar as users are typically expecting things to behave as they would "
"when run in a terminal emulator), Fabric 1.0 and greater force a pty by "
"default. With a pty enabled, Fabric simply allows the remote end to handle "
"echoing or hiding of stdin and does not echo anything itself."
msgstr ""

#: ../../usage/interactivity.rst:113
msgid ""
"In addition to allowing normal echo behavior, a pty also means programs that"
" behave differently when attached to a terminal device will then do so. For "
"example, programs that colorize output on terminals but not when run in the "
"background will print colored output. Be wary of this if you inspect the "
"return value of `~fabric.operations.run` or `~fabric.operations.sudo`!"
msgstr ""

#: ../../usage/interactivity.rst:119
msgid ""
"For situations requiring the pty behavior turned off, the :option:`--no-pty`"
" command-line argument and :ref:`always-use-pty` env var may be used."
msgstr ""

#: ../../usage/interactivity.rst:124
msgid "Combining the two"
msgstr ""

#: ../../usage/interactivity.rst:126
msgid ""
"As a final note, keep in mind that use of pseudo-terminals effectively "
"implies combining stdout and stderr -- in much the same way as the "
":ref:`combine_stderr <combine_streams>` setting does. This is because a "
"terminal device naturally sends both stdout and stderr to the same place -- "
"the user's display -- thus making it impossible to differentiate between "
"them."
msgstr ""

#: ../../usage/interactivity.rst:132
msgid ""
"However, at the Fabric level, the two groups of settings are distinct from "
"one another and may be combined in various ways. The default is for both to "
"be set to ``True``; the other combinations are as follows:"
msgstr ""

#: ../../usage/interactivity.rst:136
msgid ""
"``run(\"cmd\", pty=False, combine_stderr=True)``: will cause Fabric to echo "
"all stdin itself, including passwords, as well as potentially altering "
"``cmd``'s behavior. Useful if ``cmd`` behaves undesirably when run under a "
"pty and you're not concerned about password prompts."
msgstr ""

#: ../../usage/interactivity.rst:140
msgid ""
"``run(\"cmd\", pty=False, combine_stderr=False)``: with both settings "
"``False``, Fabric will echo stdin and won't issue a pty -- and this is "
"highly likely to result in undesired behavior for all but the simplest "
"commands. However, it is also the only way to access a distinct stderr "
"stream, which is occasionally useful."
msgstr ""

#: ../../usage/interactivity.rst:145
msgid ""
"``run(\"cmd\", pty=True, combine_stderr=False)``: valid, but won't really "
"make much of a difference, as ``pty=True`` will still result in merged "
"streams. May be useful for avoiding any edge case problems in "
"``combine_stderr`` (none are presently known)."
msgstr ""

#: ../../usage/library.rst:3
msgid "Library Use"
msgstr ""

#: ../../usage/library.rst:5
msgid ""
"Fabric's primary use case is via fabfiles and the :doc:`fab </usage/fab>` "
"tool, and this is reflected in much of the documentation. However, Fabric's "
"internals are written in such a manner as to be easily used without ``fab`` "
"or fabfiles at all -- this document will show you how."
msgstr ""

#: ../../usage/library.rst:10
msgid ""
"There's really only a couple of considerations one must keep in mind, when "
"compared to writing a fabfile and using ``fab`` to run it: how connections "
"are really made, and how disconnections occur."
msgstr ""

#: ../../usage/library.rst:17
msgid ""
"We've documented how Fabric really connects to its hosts before, but it's "
"currently somewhat buried in the middle of the overall :doc:`execution docs "
"</usage/execution>`. Specifically, you'll want to skip over to the "
":ref:`connections` section and read it real quick. (You should really give "
"that entire document a once-over, but it's not absolutely required.)"
msgstr ""

#: ../../usage/library.rst:23
msgid ""
"As that section mentions, the key is simply that `~fabric.operations.run`, "
"`~fabric.operations.sudo` and the other operations only look in one place "
"when connecting: :ref:`env.host_string <host_string>`. All of the other "
"mechanisms for setting hosts are interpreted by the ``fab`` tool when it "
"runs, and don't matter when running as a library."
msgstr ""

#: ../../usage/library.rst:29
msgid ""
"That said, most use cases where you want to marry a given task ``X`` and a "
"given list of hosts ``Y`` can, as of Fabric 1.3, be handled with the "
"`~fabric.tasks.execute` function via ``execute(X, hosts=Y)``. Please see "
"`~fabric.tasks.execute`'s documentation for details -- manual host string "
"manipulation should be rarely necessary."
msgstr ""

#: ../../usage/library.rst:32
msgid "Disconnecting"
msgstr ""

#: ../../usage/library.rst:34
msgid ""
"The other main thing that ``fab`` does for you is to disconnect from all "
"hosts at the end of a session; otherwise, Python will sit around forever "
"waiting for those network resources to be released."
msgstr ""

#: ../../usage/library.rst:38
msgid ""
"Fabric 0.9.4 and newer have a function you can use to do this easily: "
"`~fabric.network.disconnect_all`. Simply make sure your code calls this when"
" it terminates (typically in the ``finally`` clause of an outer ``try: "
"finally`` statement -- lest errors in your code prevent disconnections from "
"happening!) and things ought to work pretty well."
msgstr ""

#: ../../usage/library.rst:44
msgid ""
"If you're on Fabric 0.9.3 or older, you can simply do this "
"(``disconnect_all`` just adds a bit of nice output to this logic)::"
msgstr ""

#: ../../usage/library.rst:55
msgid "Final note"
msgstr ""

#: ../../usage/library.rst:57
msgid ""
"This document is an early draft, and may not cover absolutely every "
"difference between ``fab`` use and library use. However, the above should "
"highlight the largest stumbling blocks. When in doubt, note that in the "
"Fabric source code, ``fabric/main.py`` contains the bulk of the extra work "
"done by ``fab``, and may serve as a useful reference."
msgstr ""

#: ../../usage/output_controls.rst:3
msgid "Managing output"
msgstr ""

#: ../../usage/output_controls.rst:5
msgid ""
"The ``fab`` tool is very verbose by default and prints out almost everything"
" it can, including the remote end's stderr and stdout streams, the command "
"strings being executed, and so forth. While this is necessary in many cases "
"in order to know just what's going on, any nontrivial Fabric task will "
"quickly become difficult to follow as it runs."
msgstr ""

#: ../../usage/output_controls.rst:13
msgid "Output levels"
msgstr ""

#: ../../usage/output_controls.rst:15
msgid ""
"To aid in organizing task output, Fabric output is grouped into a number of "
"non-overlapping levels or groups, each of which may be turned on or off "
"independently. This provides flexible control over what is displayed to the "
"user."
msgstr ""

#: ../../usage/output_controls.rst:22
msgid "All levels, save for ``debug``, are on by default."
msgstr ""

#: ../../usage/output_controls.rst:25
msgid "Standard output levels"
msgstr ""

#: ../../usage/output_controls.rst:27
msgid "The standard, atomic output levels/groups are as follows:"
msgstr ""

#: ../../usage/output_controls.rst:29
msgid ""
"**status**: Status messages, i.e. noting when Fabric is done running, if the"
" user used a keyboard interrupt, or when servers are disconnected from. "
"These messages are almost always relevant and rarely verbose."
msgstr ""

#: ../../usage/output_controls.rst:33
msgid ""
"**aborts**: Abort messages. Like status messages, these should really only "
"be turned off when using Fabric as a library, and possibly not even then. "
"Note that even if this output group is turned off, aborts will still occur "
"-- there just won't be any output about why Fabric aborted!"
msgstr ""

#: ../../usage/output_controls.rst:38
msgid ""
"**warnings**: Warning messages. These are often turned off when one expects "
"a given operation to fail, such as when using ``grep`` to test existence of "
"text in a file. If paired with setting ``env.warn_only`` to True, this can "
"result in fully silent warnings when remote programs fail. As with "
"``aborts``, this setting does not control actual warning behavior, only "
"whether warning messages are printed or hidden."
msgstr ""

#: ../../usage/output_controls.rst:45
msgid ""
"**running**: Printouts of commands being executed or files transferred, e.g."
" ``[myserver] run: ls /var/www``. Also controls printing of tasks being run,"
" e.g. ``[myserver] Executing task 'foo'``."
msgstr ""

#: ../../usage/output_controls.rst:49
msgid ""
"**stdout**: Local, or remote, stdout, i.e. non-error output from commands."
msgstr ""

#: ../../usage/output_controls.rst:51
msgid ""
"**stderr**: Local, or remote, stderr, i.e. error-related output from "
"commands."
msgstr ""

#: ../../usage/output_controls.rst:53
msgid ""
"**user**: User-generated output, i.e. local output printed by fabfile code "
"via use of the `~fabric.utils.fastprint` or `~fabric.utils.puts` functions."
msgstr ""

#: ../../usage/output_controls.rst:56
msgid "Added \"Executing task\" lines to the ``running`` output level."
msgstr ""

#: ../../usage/output_controls.rst:59
msgid "Added the ``user`` output level."
msgstr ""

#: ../../usage/output_controls.rst:63
msgid "Debug output"
msgstr ""

#: ../../usage/output_controls.rst:65
msgid ""
"There is a final atomic output level, ``debug``, which behaves slightly "
"differently from the rest:"
msgstr ""

#: ../../usage/output_controls.rst:68
msgid ""
"**debug**: Turn on debugging (which is off by default.) Currently, this is "
"largely used to view the \"full\" commands being run; take for example this "
"`~fabric.operations.run` call::"
msgstr ""

#: ../../usage/output_controls.rst:74
msgid ""
"Normally, the ``running`` line will show exactly what is passed into "
"`~fabric.operations.run`, like so::"
msgstr ""

#: ../../usage/output_controls.rst:79
msgid ""
"With ``debug`` on, and assuming you've left :ref:`shell` set to ``True``, "
"you will see the literal, full string as passed to the remote server::"
msgstr ""

#: ../../usage/output_controls.rst:84
msgid ""
"Enabling ``debug`` output will also display full Python tracebacks during "
"aborts."
msgstr ""

#: ../../usage/output_controls.rst:89
msgid ""
"Where modifying other pieces of output (such as in the above example where "
"it modifies the 'running' line to show the shell and any escape characters),"
" this setting takes precedence over the others; so if ``running`` is False "
"but ``debug`` is True, you will still be shown the 'running' line in its "
"debugging form."
msgstr ""

#: ../../usage/output_controls.rst:95
msgid "Debug output now includes full Python tracebacks during aborts."
msgstr ""

#: ../../usage/output_controls.rst:101
msgid "Output level aliases"
msgstr ""

#: ../../usage/output_controls.rst:103
msgid ""
"In addition to the atomic/standalone levels above, Fabric also provides a "
"couple of convenience aliases which map to multiple other levels. These may "
"be referenced anywhere the other levels are referenced, and will effectively"
" toggle all of the levels they are mapped to."
msgstr ""

#: ../../usage/output_controls.rst:108
msgid ""
"**output**: Maps to both ``stdout`` and ``stderr``. Useful for when you only"
" care to see the 'running' lines and your own print statements (and "
"warnings)."
msgstr ""

#: ../../usage/output_controls.rst:111
msgid ""
"**everything**: Includes ``warnings``, ``running``, ``user`` and ``output`` "
"(see above.) Thus, when turning off ``everything``, you will only see a bare"
" minimum of output (just ``status`` and ``debug`` if it's on), along with "
"your own print statements."
msgstr ""

#: ../../usage/output_controls.rst:116
msgid ""
"**commands**: Includes ``stdout`` and ``running``. Good for hiding non-"
"erroring commands entirely, while still displaying any stderr output."
msgstr ""

#: ../../usage/output_controls.rst:119
msgid "Added the ``commands`` output alias."
msgstr ""

#: ../../usage/output_controls.rst:124
msgid "Hiding and/or showing output levels"
msgstr ""

#: ../../usage/output_controls.rst:126
msgid ""
"You may toggle any of Fabric's output levels in a number of ways; for "
"examples, please see the API docs linked in each bullet point:"
msgstr ""

#: ../../usage/output_controls.rst:129
msgid ""
"**Direct modification of fabric.state.output**: `fabric.state.output` is a "
"dictionary subclass (similar to :doc:`env <env>`) whose keys are the output "
"level names, and whose values are either True (show that particular type of "
"output) or False (hide it.)"
msgstr ""

#: ../../usage/output_controls.rst:134
msgid ""
"`fabric.state.output` is the lowest-level implementation of output levels "
"and is what Fabric's internals reference when deciding whether or not to "
"print their output."
msgstr ""

#: ../../usage/output_controls.rst:138
msgid ""
"**Context managers**: `~fabric.context_managers.hide` and "
"`~fabric.context_managers.show` are twin context managers that take one or "
"more output level names as strings, and either hide or show them within the "
"wrapped block. As with Fabric's other context managers, the prior values are"
" restored when the block exits."
msgstr ""

#: ../../usage/output_controls.rst:146
msgid ""
"`~fabric.context_managers.settings`, which can nest calls to "
"`~fabric.context_managers.hide` and/or `~fabric.context_managers.show` "
"inside itself."
msgstr ""

#: ../../usage/output_controls.rst:150
msgid ""
"**Command-line arguments**: You may use the :option:`--hide` and/or "
":option:`--show` arguments to :doc:`fab`, which behave exactly like the "
"context managers of the same names (but are, naturally, globally applied) "
"and take comma-separated strings as input."
msgstr ""

#: ../../usage/parallel.rst:3
msgid "Parallel execution"
msgstr ""

#: ../../usage/parallel.rst:7
msgid ""
"By default, Fabric executes all specified tasks **serially** (see :ref"
":`execution-strategy` for details.) This document describes Fabric's options"
" for running tasks on multiple hosts in **parallel**, via per-task "
"decorators and/or global command-line switches."
msgstr ""

#: ../../usage/parallel.rst:14
msgid "What it does"
msgstr ""

#: ../../usage/parallel.rst:16
msgid ""
"Because Fabric 1.x is not fully threadsafe (and because in general use, task"
" functions do not typically interact with one another) this functionality is"
" implemented via the Python `multiprocessing "
"<http://docs.python.org/library/multiprocessing.html>`_ module. It creates "
"one new process for each host and task combination, optionally using a "
"(configurable) sliding window to prevent too many processes from running at "
"the same time."
msgstr ""

#: ../../usage/parallel.rst:24
msgid ""
"For example, imagine a scenario where you want to update Web application "
"code on a number of Web servers, and then reload the servers once the code "
"has been distributed everywhere (to allow for easier rollback if code "
"updates fail.) One could implement this with the following fabfile::"
msgstr ""

#: ../../usage/parallel.rst:38
msgid "and execute it on a set of 3 servers, in serial, like so::"
msgstr ""

#: ../../usage/parallel.rst:42
msgid ""
"Normally, without any parallel execution options activated, Fabric would run"
" in order:"
msgstr ""

#: ../../usage/parallel.rst:45
msgid "``update`` on ``web1``"
msgstr ""

#: ../../usage/parallel.rst:46
msgid "``update`` on ``web2``"
msgstr ""

#: ../../usage/parallel.rst:47
msgid "``update`` on ``web3``"
msgstr ""

#: ../../usage/parallel.rst:48
msgid "``reload`` on ``web1``"
msgstr ""

#: ../../usage/parallel.rst:49
msgid "``reload`` on ``web2``"
msgstr ""

#: ../../usage/parallel.rst:50
msgid "``reload`` on ``web3``"
msgstr ""

#: ../../usage/parallel.rst:52
msgid ""
"With parallel execution activated (via :option:`-P` -- see below for "
"details), this turns into:"
msgstr ""

#: ../../usage/parallel.rst:55
msgid "``update`` on ``web1``, ``web2``, and ``web3``"
msgstr ""

#: ../../usage/parallel.rst:56
msgid "``reload`` on ``web1``, ``web2``, and ``web3``"
msgstr ""

#: ../../usage/parallel.rst:58
msgid ""
"Hopefully the benefits of this are obvious -- if ``update`` took 5 seconds "
"to run and ``reload`` took 2 seconds, serial execution takes (5+2)*3 = 21 "
"seconds to run, while parallel execution takes only a third of the time, "
"(5+2) = 7 seconds on average."
msgstr ""

#: ../../usage/parallel.rst:65
msgid "How to use it"
msgstr ""

#: ../../usage/parallel.rst:68
msgid "Decorators"
msgstr ""

#: ../../usage/parallel.rst:70
msgid ""
"Since the minimum \"unit\" that parallel execution affects is a task, the "
"functionality may be enabled or disabled on a task-by-task basis using the "
"`~fabric.decorators.parallel` and `~fabric.decorators.serial` decorators. "
"For example, this fabfile::"
msgstr ""

#: ../../usage/parallel.rst:84
msgid "when run in this manner::"
msgstr ""

#: ../../usage/parallel.rst:88
msgid "will result in the following execution sequence:"
msgstr ""

#: ../../usage/parallel.rst:90
msgid "``runs_in_parallel`` on ``host1``, ``host2``, and ``host3``"
msgstr ""

#: ../../usage/parallel.rst:91
msgid "``runs_serially`` on ``host1``"
msgstr ""

#: ../../usage/parallel.rst:92
msgid "``runs_serially`` on ``host2``"
msgstr ""

#: ../../usage/parallel.rst:93
msgid "``runs_serially`` on ``host3``"
msgstr ""

#: ../../usage/parallel.rst:96
msgid "Command-line flags"
msgstr ""

#: ../../usage/parallel.rst:98
msgid ""
"One may also force all tasks to run in parallel by using the command-line "
"flag :option:`-P` or the env variable :ref:`env.parallel <env-parallel>`.  "
"However, any task specifically wrapped with `~fabric.decorators.serial` will"
" ignore this setting and continue to run serially."
msgstr ""

#: ../../usage/parallel.rst:103
msgid ""
"For example, the following fabfile will result in the same execution "
"sequence as the one above::"
msgstr ""

#: ../../usage/parallel.rst:115
msgid "when invoked like so::"
msgstr ""

#: ../../usage/parallel.rst:119
msgid ""
"As before, ``runs_in_parallel`` will run in parallel, and ``runs_serially`` "
"in sequence."
msgstr ""

#: ../../usage/parallel.rst:124
msgid "Bubble size"
msgstr ""

#: ../../usage/parallel.rst:126
msgid ""
"With large host lists, a user's local machine can get overwhelmed by running"
" too many concurrent Fabric processes. Because of this, you may opt to use a"
" moving bubble approach that limits Fabric to a specific number of "
"concurrently active processes."
msgstr ""

#: ../../usage/parallel.rst:131
msgid ""
"By default, no bubble is used and all hosts are run in one concurrent pool. "
"You can override this on a per-task level by specifying the ``pool_size`` "
"keyword argument to `~fabric.decorators.parallel`, or globally via "
":option:`-z`."
msgstr ""

#: ../../usage/parallel.rst:135
msgid "For example, to run on 5 hosts at a time::"
msgstr ""

#: ../../usage/parallel.rst:143
msgid "Or skip the ``pool_size`` kwarg and instead::"
msgstr ""

#: ../../usage/parallel.rst:150
msgid "Linewise vs bytewise output"
msgstr ""

#: ../../usage/parallel.rst:152
msgid ""
"Fabric's default mode of printing to the terminal is byte-by-byte, in order "
"to support :doc:`/usage/interactivity`. This often gives poor results when "
"running in parallel mode, as the multiple processes may write to your "
"terminal's standard out stream simultaneously."
msgstr ""

#: ../../usage/parallel.rst:157
msgid ""
"To help offset this problem, Fabric's option for linewise output is "
"automatically enabled whenever parallelism is active. This will cause you to"
" lose most of the benefits outlined in the above link Fabric's remote "
"interactivity features, but as those do not map well to parallel "
"invocations, it's typically a fair trade."
msgstr ""

#: ../../usage/parallel.rst:163
msgid ""
"There's no way to avoid the multiple processes mixing up on a line-by-line "
"basis, but you will at least be able to tell them apart by the host-string "
"line prefix."
msgstr ""

#: ../../usage/parallel.rst:168
msgid ""
"Future versions will add improved logging support to make troubleshooting "
"parallel runs easier."
msgstr ""

#: ../../usage/ssh.rst:3
msgid "SSH behavior"
msgstr ""

#: ../../usage/ssh.rst:5
msgid ""
"Fabric currently makes use of a pure-Python SSH re-implementation for "
"managing connections, meaning that there are occasionally spots where it is "
"limited by that library's capabilities. Below are areas of note where Fabric"
" will exhibit behavior that isn't consistent with, or as flexible as, the "
"behavior of the ``ssh`` command-line program."
msgstr ""

#: ../../usage/ssh.rst:13
msgid "Unknown hosts"
msgstr ""

#: ../../usage/ssh.rst:15
msgid ""
"SSH's host key tracking mechanism keeps tabs on all the hosts you attempt to"
" connect to, and maintains a ``~/.ssh/known_hosts`` file with mappings "
"between identifiers (IP address, sometimes with a hostname as well) and SSH "
"keys. (For details on how this works, please see the `OpenSSH documentation "
"<http://openssh.org/manual.html>`_.)"
msgstr ""

#: ../../usage/ssh.rst:21
msgid ""
"The ``paramiko`` library is capable of loading up your ``known_hosts`` file,"
" and will then compare any host it connects to, with that mapping. Settings "
"are available to determine what happens when an unknown host (a host whose "
"username or IP is not found in ``known_hosts``) is seen:"
msgstr ""

#: ../../usage/ssh.rst:26
msgid ""
"**Reject**: the host key is rejected and the connection is not made. This "
"results in a Python exception, which will terminate your Fabric session with"
" a message that the host is unknown."
msgstr ""

#: ../../usage/ssh.rst:29
msgid ""
"**Add**: the new host key is added to the in-memory list of known hosts, the"
" connection is made, and things continue normally. Note that this does "
"**not** modify your on-disk ``known_hosts`` file!"
msgstr ""

#: ../../usage/ssh.rst:32
msgid ""
"**Ask**: not yet implemented at the Fabric level, this is a ``paramiko`` "
"library option which would result in the user being prompted about the "
"unknown key and whether to accept it."
msgstr ""

#: ../../usage/ssh.rst:36
msgid ""
"Whether to reject or add hosts, as above, is controlled in Fabric via the "
":ref:`env.reject_unknown_hosts <reject-unknown-hosts>` option, which is "
"False by default for convenience's sake. We feel this is a valid tradeoff "
"between convenience and security; anyone who feels otherwise can easily "
"modify their fabfiles at module level to set ``env.reject_unknown_hosts = "
"True``."
msgstr ""

#: ../../usage/ssh.rst:44
msgid "Known hosts with changed keys"
msgstr ""

#: ../../usage/ssh.rst:46
msgid ""
"The point of SSH's key/fingerprint tracking is so that man-in-the-middle "
"attacks can be detected: if an attacker redirects your SSH traffic to a "
"computer under his control, and pretends to be your original destination "
"server, the host keys will not match. Thus, the default behavior of SSH (and"
" its Python implementation) is to immediately abort the connection when a "
"host previously recorded in ``known_hosts`` suddenly starts sending us a "
"different host key."
msgstr ""

#: ../../usage/ssh.rst:54
msgid ""
"In some edge cases such as some EC2 deployments, you may want to ignore this"
" potential problem. Our SSH layer, at the time of writing, doesn't give us "
"control over this exact behavior, but we can sidestep it by simply skipping "
"the loading of ``known_hosts`` -- if the host list being compared to is "
"empty, then there's no problem. Set :ref:`env.disable_known_hosts <disable-"
"known-hosts>` to True when you want this behavior; it is False by default, "
"in order to preserve default SSH behavior."
msgstr ""

#: ../../usage/ssh.rst:63
msgid ""
"Enabling :ref:`env.disable_known_hosts <disable-known-hosts>` will leave you"
" wide open to man-in-the-middle attacks! Please use with caution."
msgstr ""

#: ../../usage/tasks.rst:5
msgid ""
"As of Fabric 1.1, there are two distinct methods you may use in order to "
"define which objects in your fabfile show up as tasks:"
msgstr ""

#: ../../usage/tasks.rst:8
msgid ""
"The \"new\" method starting in 1.1 considers instances of "
"`~fabric.tasks.Task` or its subclasses, and also descends into imported "
"modules to allow building nested namespaces."
msgstr ""

#: ../../usage/tasks.rst:11
msgid ""
"The \"classic\" method from 1.0 and earlier considers all public callable "
"objects (functions, classes etc) and only considers the objects in the "
"fabfile itself with no recursing into imported module."
msgstr ""

#: ../../usage/tasks.rst:16
msgid ""
"These two methods are **mutually exclusive**: if Fabric finds *any* new-"
"style task objects in your fabfile or in modules it imports, it will assume "
"you've committed to this method of task declaration and won't consider any "
"non-`~fabric.tasks.Task` callables. If *no* new-style tasks are found, it "
"reverts to the classic behavior."
msgstr ""

#: ../../usage/tasks.rst:22
msgid "The rest of this document explores these two methods in detail."
msgstr ""

#: ../../usage/tasks.rst:26
msgid ""
"To see exactly what tasks in your fabfile may be executed via ``fab``, use "
":option:`fab --list <-l>`."
msgstr ""

#: ../../usage/tasks.rst:32
msgid "New-style tasks"
msgstr ""

#: ../../usage/tasks.rst:34
msgid ""
"Fabric 1.1 introduced the `~fabric.tasks.Task` class to facilitate new "
"features and enable some programming best practices, specifically:"
msgstr ""

#: ../../usage/tasks.rst:37
msgid ""
"**Object-oriented tasks**. Inheritance and all that comes with it can make "
"for much more sensible code reuse than passing around simple function "
"objects.  The classic style of task declaration didn't entirely rule this "
"out, but it also didn't make it terribly easy."
msgstr ""

#: ../../usage/tasks.rst:41
msgid ""
"**Namespaces**. Having an explicit method of declaring tasks makes it easier"
" to set up recursive namespaces without e.g. polluting your task list with "
"the contents of Python's ``os`` module (which would show up as valid "
"\"tasks\" under the classic methodology.)"
msgstr ""

#: ../../usage/tasks.rst:46
msgid ""
"With the introduction of `~fabric.tasks.Task`, there are two ways to set up "
"new tasks:"
msgstr ""

#: ../../usage/tasks.rst:49
msgid ""
"Decorate a regular module level function with `@task "
"<fabric.decorators.task>`, which transparently wraps the function in a "
"`~fabric.tasks.Task` subclass.  The function name will be used as the task "
"name when invoking."
msgstr ""

#: ../../usage/tasks.rst:53
msgid ""
"Subclass `~fabric.tasks.Task` (`~fabric.tasks.Task` itself is intended to be"
" abstract), define a ``run`` method, and instantiate your subclass at module"
" level. Instances' ``name`` attributes are used as the task name; if omitted"
" the instance's variable name will be used instead."
msgstr ""

#: ../../usage/tasks.rst:58
msgid ""
"Use of new-style tasks also allows you to set up :ref:`namespaces "
"<namespaces>`."
msgstr ""

#: ../../usage/tasks.rst:65
msgid "The ``@task`` decorator"
msgstr ""

#: ../../usage/tasks.rst:67
msgid ""
"The quickest way to make use of new-style task features is to wrap basic "
"task functions with `@task <fabric.decorators.task>`::"
msgstr ""

#: ../../usage/tasks.rst:76
msgid ""
"When this decorator is used, it signals to Fabric that *only* functions "
"wrapped in the decorator are to be loaded up as valid tasks. (When not "
"present, :ref:`classic-style task <classic-tasks>` behavior kicks in.)"
msgstr ""

#: ../../usage/tasks.rst:81
msgid "Arguments"
msgstr ""

#: ../../usage/tasks.rst:83
msgid ""
"`@task <fabric.decorators.task>` may also be called with arguments to "
"customize its behavior. Any arguments not documented below are passed into "
"the constructor of the ``task_class`` being used, with the function itself "
"as the first argument (see :ref:`task-decorator-and-classes` for details.)"
msgstr ""

#: ../../usage/tasks.rst:88
msgid ""
"``task_class``: The `~fabric.tasks.Task` subclass used to wrap the decorated"
" function. Defaults to `~fabric.tasks.WrappedCallableTask`."
msgstr ""

#: ../../usage/tasks.rst:90
msgid ""
"``aliases``: An iterable of string names which will be used as aliases for "
"the wrapped function. See :ref:`task-aliases` for details."
msgstr ""

#: ../../usage/tasks.rst:92
msgid ""
"``alias``: Like ``aliases`` but taking a single string argument instead of "
"an iterable. If both ``alias`` and ``aliases`` are specified, ``aliases`` "
"will take precedence."
msgstr ""

#: ../../usage/tasks.rst:95
msgid ""
"``default``: A boolean value determining whether the decorated task also "
"stands in for its containing module as a task name. See :ref:`default-"
"tasks`."
msgstr ""

#: ../../usage/tasks.rst:97
msgid ""
"``name``: A string setting the name this task appears as to the command-line"
" interface. Useful for task names that would otherwise shadow Python "
"builtins (which is technically legal but frowned upon and bug-prone.)"
msgstr ""

#: ../../usage/tasks.rst:104
msgid "Aliases"
msgstr ""

#: ../../usage/tasks.rst:106
msgid ""
"Here's a quick example of using the ``alias`` keyword argument to facilitate"
" use of both a longer human-readable task name, and a shorter name which is "
"quicker to type::"
msgstr ""

#: ../../usage/tasks.rst:116
msgid ""
"Calling :option:`--list <-l>` on this fabfile would show both the original "
"``deploy_with_migrations`` and its alias ``dwm``::"
msgstr ""

#: ../../usage/tasks.rst:125
msgid ""
"When more than one alias for the same function is needed, simply swap in the"
" ``aliases`` kwarg, which takes an iterable of strings instead of a single "
"string."
msgstr ""

#: ../../usage/tasks.rst:132
msgid "Default tasks"
msgstr ""

#: ../../usage/tasks.rst:134
msgid ""
"In a similar manner to :ref:`aliases <task-aliases>`, it's sometimes useful "
"to designate a given task within a module as the \"default\" task, which may"
" be called by referencing *just* the module name. This can save typing "
"and/or allow for neater organization when there's a single \"main\" task and"
" a number of related tasks or subroutines."
msgstr ""

#: ../../usage/tasks.rst:140
msgid ""
"For example, a ``deploy`` submodule might contain tasks for provisioning new"
" servers, pushing code, migrating databases, and so forth -- but it'd be "
"very convenient to highlight a task as the default \"just deploy\" action. "
"Such a ``deploy.py`` module might look like this::"
msgstr ""

#: ../../usage/tasks.rst:166
msgid ""
"With the following task list (assuming a simple top level ``fabfile.py`` "
"that just imports ``deploy``)::"
msgstr ""

#: ../../usage/tasks.rst:176
msgid ""
"Calling ``deploy.full_deploy`` on every deploy could get kind of old, or "
"somebody new to the team might not be sure if that's really the right task "
"to run."
msgstr ""

#: ../../usage/tasks.rst:178
msgid ""
"Using the ``default`` kwarg to `@task <fabric.decorators.task>`, we can tag "
"e.g. ``full_deploy`` as the default task::"
msgstr ""

#: ../../usage/tasks.rst:185
msgid "Doing so updates the task list like so::"
msgstr ""

#: ../../usage/tasks.rst:196
msgid ""
"Note that ``full_deploy`` still exists as its own explicit task -- but now "
"``deploy`` shows up as a sort of top level alias for ``full_deploy``."
msgstr ""

#: ../../usage/tasks.rst:199
msgid ""
"If multiple tasks within a module have ``default=True`` set, the last one to"
" be loaded (typically the one lowest down in the file) will take precedence."
msgstr ""

#: ../../usage/tasks.rst:203
msgid "Top-level default tasks"
msgstr ""

#: ../../usage/tasks.rst:205
msgid ""
"Using ``@task(default=True)`` in the top level fabfile will cause the "
"denoted task to execute when a user invokes ``fab`` without any task names "
"(similar to e.g. ``make``.) When using this shortcut, it is not possible to "
"specify arguments to the task itself -- use a regular invocation of the task"
" if this is necessary."
msgstr ""

#: ../../usage/tasks.rst:214
msgid "``Task`` subclasses"
msgstr ""

#: ../../usage/tasks.rst:216
msgid ""
"If you're used to :ref:`classic-style tasks <classic-tasks>`, an easy way to"
" think about `~fabric.tasks.Task` subclasses is that their ``run`` method is"
" directly equivalent to a classic task; its arguments are the task arguments"
" (other than ``self``) and its body is what gets executed."
msgstr ""

#: ../../usage/tasks.rst:221
msgid "For example, this new-style task::"
msgstr ""

#: ../../usage/tasks.rst:231
msgid "is exactly equivalent to this function-based task::"
msgstr ""

#: ../../usage/tasks.rst:238
msgid ""
"Note how we had to instantiate an instance of our class; that's simply "
"normal Python object-oriented programming at work. While it's a small bit of"
" boilerplate right now -- for example, Fabric doesn't care about the name "
"you give the instantiation, only the instance's ``name`` attribute -- it's "
"well worth the benefit of having the power of classes available."
msgstr ""

#: ../../usage/tasks.rst:244
msgid ""
"We plan to extend the API in the future to make this experience a bit "
"smoother."
msgstr ""

#: ../../usage/tasks.rst:249
msgid "Using custom subclasses with ``@task``"
msgstr ""

#: ../../usage/tasks.rst:251
msgid ""
"It's possible to marry custom `~fabric.tasks.Task` subclasses with `@task "
"<fabric.decorators.task>`. This may be useful in cases where your core "
"execution logic doesn't do anything class/object-specific, but you want to "
"take advantage of class metaprogramming or similar techniques."
msgstr ""

#: ../../usage/tasks.rst:256
msgid ""
"Specifically, any `~fabric.tasks.Task` subclass which is designed to take in"
" a callable as its first constructor argument (as the built-in "
"`~fabric.tasks.WrappedCallableTask` does) may be specified as the "
"``task_class`` argument to `@task <fabric.decorators.task>`."
msgstr ""

#: ../../usage/tasks.rst:261
msgid ""
"Fabric will automatically instantiate a copy of the given class, passing in "
"the wrapped function as the first argument. All other args/kwargs given to "
"the decorator (besides the \"special\" arguments documented in :ref:`task-"
"decorator-arguments`) are added afterwards."
msgstr ""

#: ../../usage/tasks.rst:266
msgid "Here's a brief and somewhat contrived example to make this obvious::"
msgstr ""

#: ../../usage/tasks.rst:284
msgid ""
"When this fabfile is loaded, a copy of ``CustomTask`` is instantiated, "
"effectively calling::"
msgstr ""

#: ../../usage/tasks.rst:288
msgid ""
"Note how the ``alias`` kwarg is stripped out by the decorator itself and "
"never reaches the class instantiation; this is identical in function to how "
":ref:`command-line task arguments <task-arguments>` work."
msgstr ""

#: ../../usage/tasks.rst:295
msgid "Namespaces"
msgstr ""

#: ../../usage/tasks.rst:297
msgid ""
"With :ref:`classic tasks <classic-tasks>`, fabfiles were limited to a "
"single, flat set of task names with no real way to organize them.  In Fabric"
" 1.1 and newer, if you declare tasks the new way (via `@task "
"<fabric.decorators.task>` or your own `~fabric.tasks.Task` subclass "
"instances) you may take advantage of **namespacing**:"
msgstr ""

#: ../../usage/tasks.rst:303
msgid ""
"Any module objects imported into your fabfile will be recursed into, looking"
" for additional task objects."
msgstr ""

#: ../../usage/tasks.rst:305
msgid ""
"Within submodules, you may control which objects are \"exported\" by using "
"the standard Python ``__all__`` module-level variable name (thought they "
"should still be valid new-style task objects.)"
msgstr ""

#: ../../usage/tasks.rst:308
msgid ""
"These tasks will be given new dotted-notation names based on the modules "
"they came from, similar to Python's own import syntax."
msgstr ""

#: ../../usage/tasks.rst:311
msgid ""
"Let's build up a fabfile package from simple to complex and see how this "
"works."
msgstr ""

#: ../../usage/tasks.rst:314
msgid "Basic"
msgstr ""

#: ../../usage/tasks.rst:316
msgid ""
"We start with a single `__init__.py` containing a few tasks (the Fabric API "
"import omitted for brevity)::"
msgstr ""

#: ../../usage/tasks.rst:327
msgid "The output of ``fab --list`` would look something like this::"
msgstr ""

#: ../../usage/tasks.rst:332
msgid ""
"There's just one namespace here: the \"root\" or global namespace. Looks "
"simple now, but in a real-world fabfile with dozens of tasks, it can get "
"difficult to manage."
msgstr ""

#: ../../usage/tasks.rst:337
msgid "Importing a submodule"
msgstr ""

#: ../../usage/tasks.rst:339
msgid ""
"As mentioned above, Fabric will examine any imported module objects for "
"tasks, regardless of where that module exists on your Python import path.  "
"For now we just want to include our own, \"nearby\" tasks, so we'll make a "
"new submodule in our package for dealing with, say, load balancers -- "
"``lb.py``::"
msgstr ""

#: ../../usage/tasks.rst:348
msgid "And we'll add this to the top of ``__init__.py``::"
msgstr ""

#: ../../usage/tasks.rst:352
msgid "Now ``fab --list`` shows us::"
msgstr ""

#: ../../usage/tasks.rst:358
msgid ""
"Again, with only one task in its own submodule, it looks kind of silly, but "
"the benefits should be pretty obvious."
msgstr ""

#: ../../usage/tasks.rst:362
msgid "Going deeper"
msgstr ""

#: ../../usage/tasks.rst:364
msgid ""
"Namespacing isn't limited to just one level. Let's say we had a larger setup"
" and wanted a namespace for database related tasks, with additional "
"differentiation inside that. We make a sub-package named ``db/`` and inside "
"it, a ``migrations.py`` module::"
msgstr ""

#: ../../usage/tasks.rst:377
msgid ""
"We need to make sure that this module is visible to anybody importing "
"``db``, so we add it to the sub-package's ``__init__.py``::"
msgstr ""

#: ../../usage/tasks.rst:382
msgid ""
"As a final step, we import the sub-package into our root-level "
"``__init__.py``, so now its first few lines look like this::"
msgstr ""

#: ../../usage/tasks.rst:388
msgid "After all that, our file tree looks like this::"
msgstr ""

#: ../../usage/tasks.rst:397
msgid "and ``fab --list`` shows::"
msgstr ""

#: ../../usage/tasks.rst:405
msgid ""
"We could also have specified (or imported) tasks directly into "
"``db/__init__.py``, and they would show up as ``db.<whatever>`` as you might"
" expect."
msgstr ""

#: ../../usage/tasks.rst:410
msgid "Limiting with ``__all__``"
msgstr ""

#: ../../usage/tasks.rst:412
msgid ""
"You may limit what Fabric \"sees\" when it examines imported modules, by "
"using the Python convention of a module level ``__all__`` variable (a list "
"of variable names.) If we didn't want the ``db.migrations.run`` task to show"
" up by default for some reason, we could add this to the top of "
"``db/migrations.py``::"
msgstr ""

#: ../../usage/tasks.rst:419
msgid ""
"Note the lack of ``'run'`` there. You could, if needed, import ``run`` "
"directly into some other part of the hierarchy, but otherwise it'll remain "
"hidden."
msgstr ""

#: ../../usage/tasks.rst:423
msgid "Switching it up"
msgstr ""

#: ../../usage/tasks.rst:425
msgid ""
"We've been keeping our fabfile package neatly organized and importing it in "
"a straightforward manner, but the filesystem layout doesn't actually matter "
"here. All Fabric's loader cares about is the names the modules are given "
"when they're imported."
msgstr ""

#: ../../usage/tasks.rst:430
msgid ""
"For example, if we changed the top of our root ``__init__.py`` to look like "
"this::"
msgstr ""

#: ../../usage/tasks.rst:435
msgid "Our task list would change thusly::"
msgstr ""

#: ../../usage/tasks.rst:443
msgid ""
"This applies to any other import -- you could import third party modules "
"into your own task hierarchy, or grab a deeply nested module and make it "
"appear near the top level."
msgstr ""

#: ../../usage/tasks.rst:448
msgid "Nested list output"
msgstr ""

#: ../../usage/tasks.rst:450
msgid ""
"As a final note, we've been using the default Fabric :option:`--list <-l>` "
"output during this section -- it makes it more obvious what the actual task "
"names are. However, you can get a more nested or tree-like view by passing "
"``nested`` to the :option:`--list-format <-F>` option::"
msgstr ""

#: ../../usage/tasks.rst:467
msgid ""
"While it slightly obfuscates the \"real\" task names, this view provides a "
"handy way of noting the organization of tasks in large namespaces."
msgstr ""

#: ../../usage/tasks.rst:474
msgid "Classic tasks"
msgstr ""

#: ../../usage/tasks.rst:476
msgid ""
"When no new-style `~fabric.tasks.Task`-based tasks are found, Fabric will "
"consider any callable object found in your fabfile, **except** the "
"following:"
msgstr ""

#: ../../usage/tasks.rst:479
msgid ""
"Callables whose name starts with an underscore (``_``). In other words, "
"Python's usual \"private\" convention holds true here."
msgstr ""

#: ../../usage/tasks.rst:481
msgid ""
"Callables defined within Fabric itself. Fabric's own functions such as "
"`~fabric.operations.run` and `~fabric.operations.sudo`  will not show up in "
"your task list."
msgstr ""

#: ../../usage/tasks.rst:487
msgid "Imports"
msgstr ""

#: ../../usage/tasks.rst:489
msgid ""
"Python's ``import`` statement effectively includes the imported objects in "
"your module's namespace. Since Fabric's fabfiles are just Python modules, "
"this means that imports are also considered as possible classic-style tasks,"
" alongside anything defined in the fabfile itself."
msgstr ""

#: ../../usage/tasks.rst:495
msgid ""
"This only applies to imported *callable objects* -- not modules. Imported "
"modules only come into play if they contain :ref:`new-style tasks <new-"
"style-tasks>`, at which point this section no longer applies."
msgstr ""

#: ../../usage/tasks.rst:500
msgid ""
"Because of this, we strongly recommend that you use the ``import module`` "
"form of importing, followed by ``module.callable()``, which will result in a"
" cleaner fabfile API than doing ``from module import callable``."
msgstr ""

#: ../../usage/tasks.rst:504
msgid ""
"For example, here's a sample fabfile which uses ``urllib.urlopen`` to get "
"some data out of a webservice::"
msgstr ""

#: ../../usage/tasks.rst:515
msgid ""
"This looks simple enough, and will run without error. However, look what "
"happens if we run :option:`fab --list <-l>` on this fabfile::"
msgstr ""

#: ../../usage/tasks.rst:524
msgid ""
"Our fabfile of only one task is showing two \"tasks\", which is bad enough, "
"and an unsuspecting user might accidentally try to call ``fab urlopen``, "
"which probably won't work very well. Imagine any real-world fabfile, which "
"is likely to be much more complex, and hopefully you can see how this could "
"get messy fast."
msgstr ""

#: ../../usage/tasks.rst:530
msgid "For reference, here's the recommended way to do it::"
msgstr ""

#: ../../usage/tasks.rst:540
msgid ""
"It's a simple change, but it'll make anyone using your fabfile a bit "
"happier."
msgstr ""
