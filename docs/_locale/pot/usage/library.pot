# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Christian Vest Hansen and Jeffrey E. Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-03 19:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../usage/library.rst:3
# c67d586ef72348b5aea5341eb3755510
msgid "Library Use"
msgstr ""

#: ../../usage/library.rst:5
# 887ccd8e74f0416d87dfa1678c1ed002
msgid "Fabric's primary use case is via fabfiles and the :doc:`fab </usage/fab>` tool, and this is reflected in much of the documentation. However, Fabric's internals are written in such a manner as to be easily used without ``fab`` or fabfiles at all -- this document will show you how."
msgstr ""

#: ../../usage/library.rst:10
# 475a65bfff664b0eb64db813083a7fa0
msgid "There's really only a couple of considerations one must keep in mind, when compared to writing a fabfile and using ``fab`` to run it: how connections are really made, and how disconnections occur."
msgstr ""

#: ../../usage/library.rst:15
# d4f1943a346b4f3d9b0111ca28fa9a2a
msgid "Connections"
msgstr ""

#: ../../usage/library.rst:17
# a26b765a64f943eab818a6fb0173c3da
msgid "We've documented how Fabric really connects to its hosts before, but it's currently somewhat buried in the middle of the overall :doc:`execution docs </usage/execution>`. Specifically, you'll want to skip over to the :ref:`connections` section and read it real quick. (You should really give that entire document a once-over, but it's not absolutely required.)"
msgstr ""

#: ../../usage/library.rst:23
# f53733a6513e4ff99436d9321cce2be2
msgid "As that section mentions, the key is simply that `~fabric.operations.run`, `~fabric.operations.sudo` and the other operations only look in one place when connecting: :ref:`env.host_string <host_string>`. All of the other mechanisms for setting hosts are interpreted by the ``fab`` tool when it runs, and don't matter when running as a library."
msgstr ""

#: ../../usage/library.rst:29
# 70f78b944dd04172922059ba4c17fe50
msgid "That said, most use cases where you want to marry a given task ``X`` and a given list of hosts ``Y`` can, as of Fabric 1.3, be handled with the `~fabric.tasks.execute` function via ``execute(X, hosts=Y)``. Please see `~fabric.tasks.execute`'s documentation for details -- manual host string manipulation should be rarely necessary."
msgstr ""

#: ../../usage/library.rst:32
# b4a2d67b2030424082f65791734b5f58
msgid "Disconnecting"
msgstr ""

#: ../../usage/library.rst:34
# dd44158f9be540e68bd3d87a7945a8f4
msgid "The other main thing that ``fab`` does for you is to disconnect from all hosts at the end of a session; otherwise, Python will sit around forever waiting for those network resources to be released."
msgstr ""

#: ../../usage/library.rst:38
# 9ca76f3abaf945d2898620ed0d96c439
msgid "Fabric 0.9.4 and newer have a function you can use to do this easily: `~fabric.network.disconnect_all`. Simply make sure your code calls this when it terminates (typically in the ``finally`` clause of an outer ``try: finally`` statement -- lest errors in your code prevent disconnections from happening!) and things ought to work pretty well."
msgstr ""

#: ../../usage/library.rst:44
# 46e6e7fd11f443218e854341a3b30c23
msgid "If you're on Fabric 0.9.3 or older, you can simply do this (``disconnect_all`` just adds a bit of nice output to this logic)::"
msgstr ""

#: ../../usage/library.rst:55
# 3ab21c377c724048858945923137ca72
msgid "Final note"
msgstr ""

#: ../../usage/library.rst:57
# 94ec56cceffb44d4bf056b75ec4048e0
msgid "This document is an early draft, and may not cover absolutely every difference between ``fab`` use and library use. However, the above should highlight the largest stumbling blocks. When in doubt, note that in the Fabric source code, ``fabric/main.py`` contains the bulk of the extra work done by ``fab``, and may serve as a useful reference."
msgstr ""

