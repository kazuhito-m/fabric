# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Christian Vest Hansen and Jeffrey E. Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-03 19:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../usage/parallel.rst:3
# 5eef8008994d470c9ef4cc9cb907530e
msgid "Parallel execution"
msgstr ""

#: ../../usage/parallel.rst:7
# 2f6a62970be24fa58add3f0e3340230f
msgid "By default, Fabric executes all specified tasks **serially** (see :ref:`execution-strategy` for details.) This document describes Fabric's options for running tasks on multiple hosts in **parallel**, via per-task decorators and/or global command-line switches."
msgstr ""

#: ../../usage/parallel.rst:14
# 476cfa9bc07747e6ac2ce212198052c5
msgid "What it does"
msgstr ""

#: ../../usage/parallel.rst:16
# 1d4d8b2b97c1414d80d99758b830be0d
msgid "Because Fabric 1.x is not fully threadsafe (and because in general use, task functions do not typically interact with one another) this functionality is implemented via the Python `multiprocessing <http://docs.python.org/library/multiprocessing.html>`_ module. It creates one new process for each host and task combination, optionally using a (configurable) sliding window to prevent too many processes from running at the same time."
msgstr ""

#: ../../usage/parallel.rst:24
# 6631f3b7963342f9af7a49ff877a517d
msgid "For example, imagine a scenario where you want to update Web application code on a number of Web servers, and then reload the servers once the code has been distributed everywhere (to allow for easier rollback if code updates fail.) One could implement this with the following fabfile::"
msgstr ""

#: ../../usage/parallel.rst:38
# fab85c3596f24005a12e3d4e9da1d218
msgid "and execute it on a set of 3 servers, in serial, like so::"
msgstr ""

#: ../../usage/parallel.rst:42
# 469cfb29b63b4ed6847e8020d9922a1d
msgid "Normally, without any parallel execution options activated, Fabric would run in order:"
msgstr ""

#: ../../usage/parallel.rst:45
# 3f1b12ffe39f4c06b134faca775d7ed0
msgid "``update`` on ``web1``"
msgstr ""

#: ../../usage/parallel.rst:46
# 15a63dd9c920477599bdb73405cbfcc0
msgid "``update`` on ``web2``"
msgstr ""

#: ../../usage/parallel.rst:47
# f4dda919bfb9496f83c5f84a72876fd9
msgid "``update`` on ``web3``"
msgstr ""

#: ../../usage/parallel.rst:48
# e3c868f740d249f1a16e69f5c90d54ea
msgid "``reload`` on ``web1``"
msgstr ""

#: ../../usage/parallel.rst:49
# 3007d1fedfff49119c697b0b6931416d
msgid "``reload`` on ``web2``"
msgstr ""

#: ../../usage/parallel.rst:50
# ee430a3829674ab8b341de5d84ead25f
msgid "``reload`` on ``web3``"
msgstr ""

#: ../../usage/parallel.rst:52
# 0705b451bba1425f8cad635f9e6f1c1e
msgid "With parallel execution activated (via :option:`-P` -- see below for details), this turns into:"
msgstr ""

#: ../../usage/parallel.rst:55
# 756ff3bab99149cda1f4ac5d8e817c8d
msgid "``update`` on ``web1``, ``web2``, and ``web3``"
msgstr ""

#: ../../usage/parallel.rst:56
# c060203786c44cf0b98791079705b6cb
msgid "``reload`` on ``web1``, ``web2``, and ``web3``"
msgstr ""

#: ../../usage/parallel.rst:58
# 19add83468b84ce39f5a5820b53352cd
msgid "Hopefully the benefits of this are obvious -- if ``update`` took 5 seconds to run and ``reload`` took 2 seconds, serial execution takes (5+2)*3 = 21 seconds to run, while parallel execution takes only a third of the time, (5+2) = 7 seconds on average."
msgstr ""

#: ../../usage/parallel.rst:65
# 13ea316a3fa8455f8af616729dca2e58
msgid "How to use it"
msgstr ""

#: ../../usage/parallel.rst:68
# 8c520cda42184da0bfa78ff4181765f9
msgid "Decorators"
msgstr ""

#: ../../usage/parallel.rst:70
# 1b2507fc7797460fb6636d54fa6c2216
msgid "Since the minimum \"unit\" that parallel execution affects is a task, the functionality may be enabled or disabled on a task-by-task basis using the `~fabric.decorators.parallel` and `~fabric.decorators.serial` decorators. For example, this fabfile::"
msgstr ""

#: ../../usage/parallel.rst:84
# 1606b319e8fc41e5b02a09b97a326f27
msgid "when run in this manner::"
msgstr ""

#: ../../usage/parallel.rst:88
# c622e0461f2742888df3b3d2affea1b8
msgid "will result in the following execution sequence:"
msgstr ""

#: ../../usage/parallel.rst:90
# 5c48073a70e34db5b7867b745da8e488
msgid "``runs_in_parallel`` on ``host1``, ``host2``, and ``host3``"
msgstr ""

#: ../../usage/parallel.rst:91
# 3341712dfb5f4575bd5cd4bceec19f68
msgid "``runs_serially`` on ``host1``"
msgstr ""

#: ../../usage/parallel.rst:92
# e06dc9754725484cbb1a60aebf1a8ab7
msgid "``runs_serially`` on ``host2``"
msgstr ""

#: ../../usage/parallel.rst:93
# 659e1e09e11a4788afbfd7821fa0a34e
msgid "``runs_serially`` on ``host3``"
msgstr ""

#: ../../usage/parallel.rst:96
# 75e7de53fb2a443495bfe8c8884c9036
msgid "Command-line flags"
msgstr ""

#: ../../usage/parallel.rst:98
# 1fc9a76d492a47ceb5d5d35afeb2fcee
msgid "One may also force all tasks to run in parallel by using the command-line flag :option:`-P` or the env variable :ref:`env.parallel <env-parallel>`.  However, any task specifically wrapped with `~fabric.decorators.serial` will ignore this setting and continue to run serially."
msgstr ""

#: ../../usage/parallel.rst:103
# 4290899d31fb4c38a16d168dab9dd6a8
msgid "For example, the following fabfile will result in the same execution sequence as the one above::"
msgstr ""

#: ../../usage/parallel.rst:115
# 6358cabdaeb249afa9951141df8fef4d
msgid "when invoked like so::"
msgstr ""

#: ../../usage/parallel.rst:119
# e19c9f89744147d4ad19ecdb0548e28d
msgid "As before, ``runs_in_parallel`` will run in parallel, and ``runs_serially`` in sequence."
msgstr ""

#: ../../usage/parallel.rst:124
# 694623499bfc48c4b320f7d52e2b0b39
msgid "Bubble size"
msgstr ""

#: ../../usage/parallel.rst:126
# 5cb3988032004b0db03c52d05d1f1ae2
msgid "With large host lists, a user's local machine can get overwhelmed by running too many concurrent Fabric processes. Because of this, you may opt to use a moving bubble approach that limits Fabric to a specific number of concurrently active processes."
msgstr ""

#: ../../usage/parallel.rst:131
# 972e1cadb68e4c3a9cdc22a81b3eee1e
msgid "By default, no bubble is used and all hosts are run in one concurrent pool. You can override this on a per-task level by specifying the ``pool_size`` keyword argument to `~fabric.decorators.parallel`, or globally via :option:`-z`."
msgstr ""

#: ../../usage/parallel.rst:135
# 8aecb873ec2a4923a50825016300069d
msgid "For example, to run on 5 hosts at a time::"
msgstr ""

#: ../../usage/parallel.rst:143
# 646926a6da604a608f9574f8d0b56d45
msgid "Or skip the ``pool_size`` kwarg and instead::"
msgstr ""

#: ../../usage/parallel.rst:150
# 63d7f80129ac4c86a230bac1ae2b11e4
msgid "Linewise vs bytewise output"
msgstr ""

#: ../../usage/parallel.rst:152
# 83334d85eb4c4bd8b12c771b34bb9d33
msgid "Fabric's default mode of printing to the terminal is byte-by-byte, in order to support :doc:`/usage/interactivity`. This often gives poor results when running in parallel mode, as the multiple processes may write to your terminal's standard out stream simultaneously."
msgstr ""

#: ../../usage/parallel.rst:157
# 9b0fe2fe76c24e77bcaab62bfe50498f
msgid "To help offset this problem, Fabric's option for linewise output is automatically enabled whenever parallelism is active. This will cause you to lose most of the benefits outlined in the above link Fabric's remote interactivity features, but as those do not map well to parallel invocations, it's typically a fair trade."
msgstr ""

#: ../../usage/parallel.rst:163
# afd099786dc24e5295da7f292e53f66f
msgid "There's no way to avoid the multiple processes mixing up on a line-by-line basis, but you will at least be able to tell them apart by the host-string line prefix."
msgstr ""

#: ../../usage/parallel.rst:168
# 01ebc2e20e18413c885cecf1dc9fcfc1
msgid "Future versions will add improved logging support to make troubleshooting parallel runs easier."
msgstr ""

