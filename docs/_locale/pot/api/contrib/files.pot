# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Christian Vest Hansen and Jeffrey E. Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-02-15 23:41+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../api/contrib/files.rst:3
# 874831b22d6d46ad9fcd111084b7569b
msgid "File and Directory Management"
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files:1
# 14289e3ba3ec4b0aa6c99424cfd62c61
msgid "Module providing easy API for working with remote files and folders."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:1
# 91f6ea7f2e98428889b7698c04c51eed
msgid "Append string (or list of strings) ``text`` to ``filename``."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:3
# 77a4c4fa078b405fafc2204657c427b0
msgid "When a list is given, each string inside is handled independently (but in the order given.)"
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:6
# 7162b110ded64b538e80e6534972dcf8
msgid "If ``text`` is already found in ``filename``, the append is not run, and None is returned immediately. Otherwise, the given text is appended to the end of the given ``filename`` via e.g. ``echo '$text' >> $filename``."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:10
# ee43a54b9a43472daf83c2a3eae6e882
msgid "The test for whether ``text`` already exists defaults to a full line match, e.g. ``^<text>$``, as this seems to be the most sensible approach for the \"append lines to a file\" use case. You may override this and force partial searching (e.g. ``^<text>``) by specifying ``partial=True``."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:15
# 3a0f2ad2468e40e288c7249a3ce72218
msgid "Because ``text`` is single-quoted, single quotes will be transparently backslash-escaped. This can be disabled with ``escape=False``."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:18
#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.contains:12
#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.exists:3
#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.sed:12
# de25016d2f3d49bf80a934ea377f2e54
# e0105864fd7d4c24a65789a989d2f367
# e12cf94887ec486294ef299884fc39fe
# 8dfa6dd61a6a48dda819505e879e7a38
msgid "If ``use_sudo`` is True, will use `sudo` instead of `run`."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:20
#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.contains:18
# 921d2ca385cd4fc0b5617f26d3a387f2
# 567689d743194d93b6a7fac5f5e2a421
msgid "The ``shell`` argument will be eventually passed to ``run/sudo``. See description of the same argumnet in ``~fabric.contrib.sed`` for details."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:23
# 4cc1a5505f234b998e886062cdc4af3b
msgid "Added the ``partial`` keyword argument."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:25
#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.contains:21
# 06089da506934c8a8f7aa8c886395330
# 023ce9b06811495d9eb432b388b192a6
msgid "Swapped the order of the ``filename`` and ``text`` arguments to be consistent with other functions in this module."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:28
# 550dce4095984842b1653d865549e50b
msgid "Changed default value of ``partial`` kwarg to be ``False``."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:30
#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.contains:24
# 46f681bde72749478d97e12eb69b75f2
# 50363a3142604ffbb3a7089cfc99c183
msgid "Updated the regular expression related escaping to try and solve various corner cases."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.append:33
#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.comment:30
#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.contains:29
#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.sed:28
#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.uncomment:15
# 0b0081777733426188e67995e952da77
# b4d63ddadda64225915216f04091fab3
# fd86358557354a218a56b5f36ead4698
# c2186913aa7c4297b1f2af889e68695d
# 21551988594441e193e19d15903452e3
msgid "Added the ``shell`` keyword argument."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.comment:1
# 322339a8cc1b4f69a608b4d8dc5588e9
msgid "Attempt to comment out all lines in ``filename`` matching ``regex``."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.comment:3
# 315780e303eb42cca32b6e21b9b915a8
msgid "The default commenting character is `#` and may be overridden by the ``char`` argument."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.comment:6
#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.uncomment:6
# fc675bc6783e4aa2b4e8cd25a095ee25
# 3186b03e66684eb0a22fc550555bbbbd
msgid "This function uses the `sed` function, and will accept the same ``use_sudo``, ``shell`` and ``backup`` keyword arguments that `sed` does."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.comment:9
# 3f8d085e69c34d3e84c33670f62265f2
msgid "`comment` will prepend the comment character to the beginning of the line, so that lines end up looking like so::"
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.comment:16
# 07f204410a574c6680c37b57641c92fc
msgid "In other words, comment characters will not \"follow\" indentation as they sometimes do when inserted by hand. Neither will they have a trailing space unless you specify e.g. ``char='# '``."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.comment:22
# f719ae054e5e4538b9f5edb0a0765409
msgid "In order to preserve the line being commented out, this function will wrap your ``regex`` argument in parentheses, so you don't need to. It will ensure that any preceding/trailing ``^`` or ``$`` characters are correctly moved outside the parentheses. For example, calling ``comment(filename, r'^foo$')`` will result in a `sed` call with the \"before\" regex of ``r'^(foo)$'`` (and the \"after\" regex, naturally, of ``r'#\\1'``.)"
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.contains:1
# 842a66dd6c124fcc9576c56d82abcee6
msgid "Return True if ``filename`` contains ``text`` (which may be a regex.)"
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.contains:3
# 41cdf7cfa14f4afa89aea8bfe6d85695
msgid "By default, this function will consider a partial line match (i.e. where ``text`` only makes up part of the line it's on). Specify ``exact=True`` to change this behavior so that only a line containing exactly ``text`` results in a True return value."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.contains:8
# 39f107c64b5b49299b642ff1e963af7f
msgid "This function leverages ``egrep`` on the remote end (so it may not follow Python regular expression syntax perfectly), and skips ``env.shell`` wrapper by default."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.contains:14
# d7d7045fbd8843468638d76c69374f1d
msgid "If ``escape`` is False, no extra regular expression related escaping is performed (this includes overriding ``exact`` so that no ``^``/``$`` is added.)"
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.contains:27
# 79389027ff2545ec8c30807f867b740e
msgid "Added ``escape`` keyword argument."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.exists:1
# 8d6933085b0249aa9ea5648a03770bd5
msgid "Return True if given path exists on the current remote host."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.exists:5
# f7a68d9d99a04ba0a46772f2879122e4
msgid "`exists` will, by default, hide all output (including the run line, stdout, stderr and any warning resulting from the file not existing) in order to avoid cluttering output. You may specify ``verbose=True`` to change this behavior."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.first:1
# deac703c2f6b4d67a4644c7b3a11dadb
msgid "Given one or more file paths, returns first one found, or None if none exist. May specify ``use_sudo`` and ``verbose`` which are passed to `exists`."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.is_link:1
# 22c707cbdc4949b08017d2a461b304ae
msgid "Return True if the given path is a symlink on the current remote host."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.is_link:3
# 0a94a0dc89cb4c11a6b2a3fd704d009d
msgid "If ``use_sudo`` is True, will use `.sudo` instead of `.run`."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.is_link:5
# 8e5f7f202c4746cab37c0b9b86435ff9
msgid "`.is_link` will, by default, hide all output. Give ``verbose=True`` to change this."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.sed:1
# 2b9ae4457c834acb9402320512765211
msgid "Run a search-and-replace on ``filename`` with given regex patterns."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.sed:3
# 067eb938e8f74e88b7922e01d7c10007
msgid "Equivalent to ``sed -i<backup> -r -e \"/<limit>/ s/<before>/<after>/<flags>g\" <filename>``. Setting ``backup`` to an empty string will, disable backup file creation."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.sed:7
# 43a0bca353a54c048ca1ea63eb4554e3
msgid "For convenience, ``before`` and ``after`` will automatically escape forward slashes, single quotes and parentheses for you, so you don't need to specify e.g.  ``http:\\/\\/foo\\.com``, instead just using ``http://foo\\.com`` is fine."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.sed:14
# 89699e5b8e104936a4e9a6c3b0bf967c
msgid "The ``shell`` argument will be eventually passed to `run`/`sudo`. It defaults to False in order to avoid problems with many nested levels of quotes and backslashes. However, setting it to True may help when using ``~fabric.operations.cd`` to wrap explicit or implicit ``sudo`` calls. (``cd`` by it's nature is a shell built-in, not a standalone command, so it should be called within a shell.)"
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.sed:21
# 6067750287384cc5aba558906a54d30d
msgid "Other options may be specified with sed-compatible regex flags -- for example, to make the search and replace case insensitive, specify ``flags=\"i\"``. The ``g`` flag is always specified regardless, so you do not need to remember to include it when overriding this parameter."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.sed:26
# b3a3961bd93c410a8b357af8b17756f3
msgid "The ``flags`` parameter."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.uncomment:1
# 09ecd420c1bd45fba33263c193e0d5b1
msgid "Attempt to uncomment all lines in ``filename`` matching ``regex``."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.uncomment:3
# a1101ff482874208b5add20798565e4b
msgid "The default comment delimiter is `#` and may be overridden by the ``char`` argument."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.uncomment:9
# 52f8cb75f3bc4d7fa9bb436782ac5d69
msgid "`uncomment` will remove a single whitespace character following the comment character, if it exists, but will preserve all preceding whitespace.  For example, ``# foo`` would become ``foo`` (the single space is stripped) but ``    # foo`` would become ``    foo`` (the single space is still stripped, but the preceding 4 spaces are not.)"
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.upload_template:1
# 047ef7b56d754d049d45fa7e54077ce9
msgid "Render and upload a template text file to a remote host."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.upload_template:3
# 3de06fe4408445ca9ad965929a0d54ae
msgid "Returns the result of the inner call to `~fabric.operations.put` -- see its documentation for details."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.upload_template:6
# 3c72e32cceac4a969919ec9c223ef8b2
msgid "``filename`` should be the path to a text file, which may contain `Python string interpolation formatting <http://docs.python.org/library/stdtypes.html#string-formatting>`_ and will be rendered with the given context dictionary ``context`` (if given.)"
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.upload_template:11
# a3be7ddace464170a4fcddb121f5e02c
msgid "Alternately, if ``use_jinja`` is set to True and you have the Jinja2 templating library available, Jinja will be used to render the template instead. Templates will be loaded from the invoking user's current working directory by default, or from ``template_dir`` if given."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.upload_template:16
# f61fd24d30d54a62816588331a6d1352
msgid "The resulting rendered file will be uploaded to the remote file path ``destination``.  If the destination file already exists, it will be renamed with a ``.bak`` extension unless ``backup=False`` is specified."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.upload_template:20
# 2ff71457abb8422bb8a116edd79819f2
msgid "By default, the file will be copied to ``destination`` as the logged-in user; specify ``use_sudo=True`` to use `sudo` instead."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.upload_template:23
# 63192020ec774f7dbd204c4dfa67ed0a
msgid "The ``mirror_local_mode`` and ``mode`` kwargs are passed directly to an internal `~fabric.operations.put` call; please see its documentation for details on these two options."
msgstr ""

#: ../../../fabric/contrib/files.py:docstring of fabric.contrib.files.upload_template:27
# 0de8939ad0924f9685111981bae4edcf
msgid "Added the ``backup``, ``mirror_local_mode`` and ``mode`` kwargs."
msgstr ""

