# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Christian Vest Hansen and Jeffrey E. Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-03 19:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../api/core/utils.rst:3
# d063eade349f4fe5baf95da116177c72
msgid "Utils"
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils:1
# 36f0b49ef00f4960b2df6624ab4ed6ea
msgid "Internal subroutines for e.g. aborting execution with an error message, or performing indenting on multiline output."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.abort:1
# 4439866d6d7445dfb0ed4a00fd726ce3
msgid "Abort execution, print ``msg`` to stderr and exit with error status (1.)"
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.abort:3
# 5ddfde135e6a484086b5c75844f755b5
msgid "This function currently makes use of `sys.exit`_, which raises `SystemExit`_. Therefore, it's possible to detect and recover from inner calls to `abort` by using ``except SystemExit`` or similar."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.error:1
# dfb811b6b57b4ba48ec79d78e1934f3d
msgid "Call ``func`` with given error ``message``."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.error:3
# f117d3bfeb484e2584b7e982e3460313
msgid "If ``func`` is None (the default), the value of ``env.warn_only`` determines whether to call ``abort`` or ``warn``."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.error:6
# 81e76058e6cc4388a324251d59e4f11e
msgid "If ``exception`` is given, it is inspected to get a string message, which is printed alongside the user-generated ``message``."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.error:9
# 91e3186dfbe54c618735fe4a8daaf87b
msgid "If ``stdout`` and/or ``stderr`` are given, they are assumed to be strings to be printed."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.fastprint:1
# 1810e8f026b843ccad913bb860cb5d13
msgid "Print ``text`` immediately, without any prefix or line ending."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.fastprint:3
# 871ee938ea8e4322879aad27750f4d72
msgid "This function is simply an alias of `~fabric.utils.puts` with different default argument values, such that the ``text`` is printed without any embellishment and immediately flushed."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.fastprint:7
# 1ebde97669cc428aa1d350f4c7c25cd6
msgid "It is useful for any situation where you wish to print text which might otherwise get buffered by Python's output buffering (such as within a processor intensive ``for`` loop). Since such use cases typically also require a lack of line endings (such as printing a series of dots to signify progress) it also omits the traditional newline by default."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.fastprint:15
# b6c43e13266f4f7ab62bb386b5f794db
msgid "Since `~fabric.utils.fastprint` calls `~fabric.utils.puts`, it is likewise subject to the ``user`` :doc:`output level </usage/output_controls>`."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.fastprint:20
# 20c69a30fb1447b8b00805f1c63195d0
msgid "`~fabric.utils.puts`"
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.indent:1
# ec9dbe9ca0114f99b4a2dd71e4a046a9
msgid "Return ``text`` indented by the given number of spaces."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.indent:3
# 625da6068c30477a99f45ca6c4b1b7f0
msgid "If text is not a string, it is assumed to be a list of lines and will be joined by ``\\n`` prior to indenting."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.indent:6
# 9750328f1e40499d9777e715dba79b67
msgid "When ``strip`` is ``True``, a minimum amount of whitespace is removed from the left-hand side of the given string (so that relative indents are preserved, but otherwise things are left-stripped). This allows you to effectively \"normalize\" any previous indentation for some inputs."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.puts:1
# a497f88255724b29adab7beeede74381
msgid "An alias for ``print`` whose output is managed by Fabric's output controls."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.puts:3
# 52b0587a1fb642608685c0905923f2fc
msgid "In other words, this function simply prints to ``sys.stdout``, but will hide its output if the ``user`` :doc:`output level </usage/output_controls>` is set to ``False``."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.puts:7
# a47deb16a75241ccbcbc29ab58c42d36
msgid "If ``show_prefix=False``, `puts` will omit the leading ``[hostname]`` which it tacks on by default. (It will also omit this prefix if ``env.host_string`` is empty.)"
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.puts:11
# fcb23db045204678bd299fdb8d6c8194
msgid "Newlines may be disabled by setting ``end`` to the empty string (``''``). (This intentionally mirrors Python 3's ``print`` syntax.)"
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.puts:14
# a80b8f99cbdc4a3dace9c2c56ccec7ea
msgid "You may force output flushing (e.g. to bypass output buffering) by setting ``flush=True``."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.puts:18
# 5b46555e59644f30857303d81b7e502d
msgid "`~fabric.utils.fastprint`"
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.warn:1
# 74fdae8783d54303a55c32bdfd246eef
msgid "Print warning message, but do not abort execution."
msgstr ""

#: ../../../fabric/utils.py:docstring of fabric.utils.warn:3
# 5c94e1f0b66a45e1804d328a1419ca32
msgid "This function honors Fabric's :doc:`output controls <../../usage/output_controls>` and will print the given ``msg`` to stderr, provided that the ``warnings`` output level (which is active by default) is turned on."
msgstr ""

