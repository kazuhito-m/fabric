# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Jeff Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-31 10:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/api/core/decorators.rst:3
# d2f6d83726514e58b41088d65be60df8
msgid "Decorators"
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators:1
# 5cf8d49c072146edad029eb9ce86c1cc
msgid "Convenience decorators for use in fabfiles."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.hosts:1
# fa716539d24b4a45a57d7ff451231573
msgid "Decorator defining which host or hosts to execute the wrapped function on."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.hosts:3
# 3019c19f15a34923b2da252247a43069
msgid "For example, the following will ensure that, barring an override on the command line, ``my_func`` will be run on ``host1``, ``host2`` and ``host3``, and with specific users on ``host1`` and ``host3``::"
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.hosts:11
# d26fb8b65ccc4665b5bb544a1411efad
msgid "`~fabric.decorators.hosts` may be invoked with either an argument list (``@hosts('host1')``, ``@hosts('host1', 'host2')``) or a single, iterable argument (``@hosts(['host1', 'host2'])``)."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.hosts:15
# 63144731c29d43c394a3f242ae166916
msgid "Note that this decorator actually just sets the function's ``.hosts`` attribute, which is then read prior to executing the function."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.hosts:18
# e8739bfc8aa54184bfd59d820ed503ca
msgid "Allow a single, iterable argument (``@hosts(iterable)``) to be used instead of requiring ``@hosts(*iterable)``."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.parallel:1
# b3e96bc5d15e4db88bf1a4e43c44aded
msgid "Forces the wrapped function to run in parallel, instead of sequentially."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.parallel:3
# 325094c8c8d3458f8f46de409519485b
msgid "This decorator takes precedence over the global value of :ref:`env.parallel <env-parallel>`. It also takes precedence over `~fabric.decorators.serial` if a task is decorated with both."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.roles:1
# ea063f7aee32476795c04b855d29b634
msgid "Decorator defining a list of role names, used to look up host lists."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.roles:3
# 1c3bb84c5a584f0f965ac1f770872618
msgid "A role is simply defined as a key in `env` whose value is a list of one or more host connection strings. For example, the following will ensure that, barring an override on the command line, ``my_func`` will be executed against the hosts listed in the ``webserver`` and ``dbserver`` roles::"
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.roles:17
# 0b8a27e42a084ccb8777a54cfa28b0cd
msgid "As with `~fabric.decorators.hosts`, `~fabric.decorators.roles` may be invoked with either an argument list or a single, iterable argument. Similarly, this decorator uses the same mechanism as `~fabric.decorators.hosts` and simply sets ``<function>.roles``."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.roles:22
# 2255d55aec854e92bbcec8aa2592cf9a
msgid "Allow a single, iterable argument to be used (same as `~fabric.decorators.hosts`)."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.runs_once:1
# 5b92e0e66f3c41f7a2260e3e20272359
msgid "Decorator preventing wrapped function from running more than once."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.runs_once:3
# 403a1776f5f948fb8d28be4b7c2f41ab
msgid "By keeping internal state, this decorator allows you to mark a function such that it will only run once per Python interpreter session, which in typical use means \"once per invocation of the ``fab`` program\"."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.runs_once:7
# 5790d3d1e85246a19ef2e1c37874a0e5
msgid "Any function wrapped with this decorator will silently fail to execute the 2nd, 3rd, ..., Nth time it is called, and will return the value of the original run."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.runs_once:11
# 8aeabfc74fe4432fae16a3a92105069e
msgid "``runs_once`` does not work with parallel task execution."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.serial:1
# 6a5cdc84ff434d698e769d5211235a9d
msgid "Forces the wrapped function to always run sequentially, never in parallel."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.serial:3
# f6ad2410fde441bab65c84da53fbb7d0
msgid "This decorator takes precedence over the global value of :ref:`env.parallel <env-parallel>`. However, if a task is decorated with both `~fabric.decorators.serial` *and* `~fabric.decorators.parallel`, `~fabric.decorators.parallel` wins."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.task:1
# 01952011530441db90803587c02349aa
msgid "Decorator declaring the wrapped function to be a new-style task."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.task:3
# 8cb8150e250e42898dd354d139c0bf7e
msgid "May be invoked as a simple, argument-less decorator (i.e. ``@task``) or with arguments customizing its behavior (e.g. ``@task(alias='myalias')``)."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.task:6
# b5981f70e9b6482eafb5586620bf9eab
msgid "Please see the :ref:`new-style task <task-decorator>` documentation for details on how to use this decorator."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.task:9
# 898059704ff14e8da59f237aec85c67c
msgid "Added the ``alias``, ``aliases``, ``task_class`` and ``default`` keyword arguments. See :ref:`task-decorator-arguments` for details."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.task:12
# 8c5309434c1d4608bf238e340b257450
msgid "Added the ``name`` keyword argument."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.task:15
# 328e6e742ff64d2e93c26e6630075b30
msgid "`~fabric.docs.unwrap_tasks`, `~fabric.tasks.WrappedCallableTask`"
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.with_settings:1
# e0a102d9fe5b4a2ba584a4fc75c10363
msgid "Decorator equivalent of ``fabric.context_managers.settings``."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.with_settings:3
# 5d9d8d294e2b44868a9d3dbd56fd14da
msgid "Allows you to wrap an entire function as if it was called inside a block with the ``settings`` context manager. This may be useful if you know you want a given setting applied to an entire function body, or wish to retrofit old code without indenting everything."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.with_settings:8
# b94a9c99c0ad414d9f50e39212eca860
msgid "For example, to turn aborts into warnings for an entire task function::"
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/decorators.py:docstring of fabric.decorators.with_settings:14
# 4079f20bc5c1486fa902f1d59fed029f
msgid "`~fabric.context_managers.settings`"
msgstr ""

