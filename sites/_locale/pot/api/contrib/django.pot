# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Jeff Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-31 10:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/api/contrib/django.rst:3
# 11beb811e4ac43adab775e1dc01f055c
msgid "Django Integration"
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django:3
# 9acab1d558464829becb17a67ca4daa9
msgid "These functions streamline the process of initializing Django's settings module environment variable. Once this is done, your fabfile may import from your Django project, or Django itself, without requiring the use of ``manage.py`` plugins or having to set the environment variable yourself every time you use your fabfile."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django:9
# 71204eeab21b4e009ed417bb6f86ee75
msgid "Currently, these functions only allow Fabric to interact with local-to-your-fabfile Django installations. This is not as limiting as it sounds; for example, you can use Fabric as a remote \"build\" tool as well as using it locally. Imagine the following fabfile::"
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django:29
# a53f4f5ea7ce499fab09aea727a142e6
msgid "With Fabric installed on both ends, you could execute ``print_production_instances`` locally, which would trigger ``print_instances`` on the production server -- which would then be interacting with your production Django database."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django:34
# dd64812ceabc4c688667465905e564fc
msgid "As another example, if your local and remote settings are similar, you can use it to obtain e.g. your database settings, and then use those when executing a remote (non-Fabric) command. This would allow you some degree of freedom even if Fabric is only installed locally::"
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django:52
# 9faa97aaad504486b13ec9cdb9c77f40
msgid "The above snippet will work if run from a local, development environment, again provided your local ``settings.py`` mirrors your remote one in terms of database connection info."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django.project:1
# c8b559afb7d848b383699c409932af6d
msgid "Sets ``DJANGO_SETTINGS_MODULE`` to ``'<name>.settings'``."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django.project:3
# 8fbe70636c094fcb91b0879a9e3eefe3
msgid "This function provides a handy shortcut for the common case where one is using the Django default naming convention for their settings file and location."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django.project:7
# e336bbcf6ca24cfb9f87dca2dfc19dcc
msgid "Uses `settings_module` -- see its documentation for details on why and how to use this functionality."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django.settings_module:1
# 7d942b0ce6fe4d3b891192594fd01b2d
msgid "Set ``DJANGO_SETTINGS_MODULE`` shell environment variable to ``module``."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django.settings_module:3
# 47797e46f51f422481ea4050b0134849
msgid "Due to how Django works, imports from Django or a Django project will fail unless the shell environment variable ``DJANGO_SETTINGS_MODULE`` is correctly set (see `the Django settings docs <http://docs.djangoproject.com/en/dev/topics/settings/>`_.)"
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django.settings_module:8
# b9edf73776744ed983a1a58d1ab7e66d
msgid "This function provides a shortcut for doing so; call it near the top of your fabfile or Fabric-using code, after which point any Django imports should work correctly."
msgstr ""

#: ../../../../../../../../usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Fabric-1.10.0-py2.7.egg/fabric/contrib/django.py:docstring of fabric.contrib.django.settings_module:14
# 5be09a904ba04dcfaf26fd3d8a0a1338
msgid "This function sets a **shell** environment variable (via ``os.environ``) and is unrelated to Fabric's own internal \"env\" variables."
msgstr ""

