# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Jeff Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-31 10:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorial.rst:3
# 1799483d1b754347a44484c204fecd32
msgid "Overview and Tutorial"
msgstr ""

#: ../../docs/tutorial.rst:5
# 95f58d5e682f42dcab940e44c33bca90
msgid "Welcome to Fabric!"
msgstr ""

#: ../../docs/tutorial.rst:7
# 446617d5c6744b03b9d8486564ff5180
msgid "This document is a whirlwind tour of Fabric's features and a quick guide to its use. Additional documentation (which is linked to throughout) can be found in the :ref:`usage documentation <usage-docs>` -- please make sure to check it out."
msgstr ""

#: ../../docs/tutorial.rst:13
# 9d77827966e9478b8fc26a67912f035a
msgid "What is Fabric?"
msgstr ""

#: ../../docs/tutorial.rst:15
# 25abc2389151404387029f52626b7212
msgid "As the ``README`` says:"
msgstr ""

#: ../../../README.rst:1
# da74e81dac25489991906afc955d8373
msgid "Fabric is a Python (2.5-2.7) library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks."
msgstr ""

#: ../../docs/tutorial.rst:20
# 7d9c470c55e445528b7795b8138d3412
msgid "More specifically, Fabric is:"
msgstr ""

#: ../../docs/tutorial.rst:22
# 37895d1a734942978c9a642883baa003
msgid "A tool that lets you execute **arbitrary Python functions** via the **command line**;"
msgstr ""

#: ../../docs/tutorial.rst:24
# bb51cd9a13c9455c85f84c8c8b08e4fb
msgid "A library of subroutines (built on top of a lower-level library) to make executing shell commands over SSH **easy** and **Pythonic**."
msgstr ""

#: ../../docs/tutorial.rst:27
# 07ca77fb35c44bb6b48dfb6cfc1df196
msgid "Naturally, most users combine these two things, using Fabric to write and execute Python functions, or **tasks**, to automate interactions with remote servers. Let's take a look."
msgstr ""

#: ../../docs/tutorial.rst:33
# 5810db7278d94393a932f6d5440d60a3
msgid "Hello, ``fab``"
msgstr ""

#: ../../docs/tutorial.rst:35
# caa5382a6652422aad7d502627938a09
msgid "This wouldn't be a proper tutorial without \"the usual\"::"
msgstr ""

#: ../../docs/tutorial.rst:40
# a5a94b83fe0f4eb59015f256f1470081
msgid "Placed in a Python module file named ``fabfile.py`` in your current working directory, that ``hello`` function can be executed with the ``fab`` tool (installed as part of Fabric) and does just what you'd expect::"
msgstr ""

#: ../../docs/tutorial.rst:49
# 7fff134f3808469291edff966272ea38
msgid "That's all there is to it. This functionality allows Fabric to be used as a (very) basic build tool even without importing any of its API."
msgstr ""

#: ../../docs/tutorial.rst:54
# 937c211c96d241d98ca6e32fda64a189
msgid "The ``fab`` tool simply imports your fabfile and executes the function or functions you instruct it to. There's nothing magic about it -- anything you can do in a normal Python script can be done in a fabfile!"
msgstr ""

#: ../../docs/tutorial.rst:58
# ae46169c7bc04633a3170733ed632c37
msgid ":ref:`execution-strategy`, :doc:`/usage/tasks`, :doc:`/usage/fab`"
msgstr ""

#: ../../docs/tutorial.rst:62
# 8c6c50b38b88432fa6d0e918d0d892e9
msgid "Task arguments"
msgstr ""

#: ../../docs/tutorial.rst:64
# dd6ea441c8d94bcc8947f6fbde1d432e
msgid "It's often useful to pass runtime parameters into your tasks, just as you might during regular Python programming. Fabric has basic support for this using a shell-compatible notation: ``<task name>:<arg>,<kwarg>=<value>,...``. It's contrived, but let's extend the above example to say hello to you personally::"
msgstr ""

#: ../../docs/tutorial.rst:72
# b4e08b94a2714266ad8c983310476519
msgid "By default, calling ``fab hello`` will still behave as it did before; but now we can personalize it::"
msgstr ""

#: ../../docs/tutorial.rst:80
# d1261f2577a04cb79e906b597ff83370
msgid "Those already used to programming in Python might have guessed that this invocation behaves exactly the same way::"
msgstr ""

#: ../../docs/tutorial.rst:88
# d0a08d1107e44b40823a63ebdba00f13
msgid "For the time being, your argument values will always show up in Python as strings and may require a bit of string manipulation for complex types such as lists. Future versions may add a typecasting system to make this easier."
msgstr ""

#: ../../docs/tutorial.rst:92
# 428e3fa8ea5649c59790b2cba03d4cb2
msgid ":ref:`task-arguments`"
msgstr ""

#: ../../docs/tutorial.rst:95
# 455b13d18fc248fb8bba27b04cf88030
msgid "Local commands"
msgstr ""

#: ../../docs/tutorial.rst:97
# 8b0fd68def0a44a6a708c78aa40aa18a
msgid "As used above, ``fab`` only really saves a couple lines of ``if __name__ == \"__main__\"`` boilerplate. It's mostly designed for use with Fabric's API, which contains functions (or **operations**) for executing shell commands, transferring files, and so forth."
msgstr ""

#: ../../docs/tutorial.rst:102
# ab69645ab6d8445a8b18b969eabe15aa
msgid "Let's build a hypothetical Web application fabfile. This example scenario is as follows: The Web application is managed via Git on a remote host ``vcshost``. On ``localhost``, we have a local clone of said Web application. When we push changes back to ``vcshost``, we want to be able to immediately install these changes on a remote host ``my_server`` in an automated fashion. We will do this by automating the local and remote Git commands."
msgstr ""

#: ../../docs/tutorial.rst:109
# 0db64d19539c41aeabd8777f060bc881
msgid "Fabfiles usually work best at the root of a project::"
msgstr ""

#: ../../docs/tutorial.rst:127
# d92e8a5e68c44a9291a7fc8dfe5b33f8
msgid "We're using a Django application here, but only as an example -- Fabric is not tied to any external codebase, save for its SSH library."
msgstr ""

#: ../../docs/tutorial.rst:130
# 4e15af221d7e4c3ebe88c5cf64b5e198
msgid "For starters, perhaps we want to run our tests and commit to our VCS so we're ready for a deploy::"
msgstr ""

#: ../../docs/tutorial.rst:140
# 681e9e566aa6426680bb7f19d072a24c
msgid "The output of which might look a bit like this::"
msgstr ""

#: ../../docs/tutorial.rst:164
# 8ded0065bd4a4789a452746e7a2d06a6
msgid "The code itself is straightforward: import a Fabric API function, `~fabric.operations.local`, and use it to run and interact with local shell commands. The rest of Fabric's API is similar -- it's all just Python."
msgstr ""

#: ../../docs/tutorial.rst:168
# df27f7a0054f4b5d9193c524b2ecb65f
msgid ":doc:`api/core/operations`, :ref:`fabfile-discovery`"
msgstr ""

#: ../../docs/tutorial.rst:172
# 1a6dab29f9424a7d82b24d503d87a9e9
msgid "Organize it your way"
msgstr ""

#: ../../docs/tutorial.rst:174
# 96232b507b274a0597f5489d52cc0c59
msgid "Because Fabric is \"just Python\" you're free to organize your fabfile any way you want. For example, it's often useful to start splitting things up into subtasks::"
msgstr ""

#: ../../docs/tutorial.rst:194
# 3bfed54b09c74b7ab59c56b2218fd136
msgid "The ``prepare_deploy`` task can be called just as before, but now you can make a more granular call to one of the sub-tasks, if desired."
msgstr ""

#: ../../docs/tutorial.rst:199
# bab0d0b69b04418aace6691a7b9fecc1
msgid "Failure"
msgstr ""

#: ../../docs/tutorial.rst:201
# 83f7fbaafa8840a9ae33251df51d3759
msgid "Our base case works fine now, but what happens if our tests fail?  Chances are we want to put on the brakes and fix them before deploying."
msgstr ""

#: ../../docs/tutorial.rst:204
# e2dc35a30fca4161b2b4d6ab2430d345
msgid "Fabric checks the return value of programs called via operations and will abort if they didn't exit cleanly. Let's see what happens if one of our tests encounters an error::"
msgstr ""

#: ../../docs/tutorial.rst:230
# 831a18de7b1340bd8b30806dda1c3c9e
msgid "Great! We didn't have to do anything ourselves: Fabric detected the failure and aborted, never running the ``commit`` task."
msgstr ""

#: ../../docs/tutorial.rst:233
# 43e6a5aea0534b7e8d2e079a2be74525
msgid ":ref:`Failure handling (usage documentation) <failures>`"
msgstr ""

#: ../../docs/tutorial.rst:236
# 30cf786ce6ac44afb8a8e470a2b20c13
msgid "Failure handling"
msgstr ""

#: ../../docs/tutorial.rst:238
# e0c67493b7f84ca7b2696a2f0e8692f1
msgid "But what if we wanted to be flexible and give the user a choice? A setting (or **environment variable**, usually shortened to **env var**) called :ref:`warn_only` lets you turn aborts into warnings, allowing flexible error handling to occur."
msgstr ""

#: ../../docs/tutorial.rst:243
# bdbc7f13ecbe4b0dbc2ce1a636d10ad8
msgid "Let's flip this setting on for our ``test`` function, and then inspect the result of the `~fabric.operations.local` call ourselves::"
msgstr ""

#: ../../docs/tutorial.rst:258
# a331b586e6c84d6ea5457196996f7513
msgid "In adding this new feature we've introduced a number of new things:"
msgstr ""

#: ../../docs/tutorial.rst:260
# e275fe175a6040859eb13113857edbe1
msgid "The ``__future__`` import required to use ``with:`` in Python 2.5;"
msgstr ""

#: ../../docs/tutorial.rst:261
# b8cd5da43d4b48b4a8353514ca0c1b69
msgid "Fabric's `contrib.console <fabric.contrib.console>` submodule, containing the `~fabric.contrib.console.confirm` function, used for simple yes/no prompts;"
msgstr ""

#: ../../docs/tutorial.rst:263
# 4dfb63692b734f8daf6992b51f5c27a1
msgid "The `~fabric.context_managers.settings` context manager, used to apply settings to a specific block of code;"
msgstr ""

#: ../../docs/tutorial.rst:265
# e8b6cb89025c4c11897c831fd6037f7b
msgid "Command-running operations like `~fabric.operations.local` can return objects containing info about their result (such as ``.failed``, or ``.return_code``);"
msgstr ""

#: ../../docs/tutorial.rst:268
# a51e86e8c6ee4bb6b8c691e03fca2a92
msgid "And the `~fabric.utils.abort` function, used to manually abort execution."
msgstr ""

#: ../../docs/tutorial.rst:270
# 2ade8cdf5486405ab1f593e3c638130e
msgid "However, despite the additional complexity, it's still pretty easy to follow, and is now much more flexible."
msgstr ""

#: ../../docs/tutorial.rst:273
# ca300bc2e81041a4903e68e88f1a890f
msgid ":doc:`api/core/context_managers`, :ref:`env-vars`"
msgstr ""

#: ../../docs/tutorial.rst:277
# 293cc1bf38a74e2a8af5b1a72c15a30e
msgid "Making connections"
msgstr ""

#: ../../docs/tutorial.rst:279
# b60ced2f6a6545e9b0aab82cd8eac628
msgid "Let's start wrapping up our fabfile by putting in the keystone: a ``deploy`` task that is destined to run on one or more remote server(s), and ensures the code is up to date::"
msgstr ""

#: ../../docs/tutorial.rst:289
# e7e78307331445e9ba78df04dd8ec81a
msgid "Here again, we introduce a handful of new concepts:"
msgstr ""

#: ../../docs/tutorial.rst:291
# 1a49ae7742224490bebffedc3bf50c67
msgid "Fabric is just Python -- so we can make liberal use of regular Python code constructs such as variables and string interpolation;"
msgstr ""

#: ../../docs/tutorial.rst:293
# 426a6644008149c9a202843ef6ee4a7c
msgid "`~fabric.context_managers.cd`, an easy way of prefixing commands with a ``cd /to/some/directory`` call. This is similar to  `~fabric.context_managers.lcd` which does the same locally."
msgstr ""

#: ../../docs/tutorial.rst:296
# 4147db0bd587431d96012f729624e3dc
msgid "`~fabric.operations.run`, which is similar to `~fabric.operations.local` but runs **remotely** instead of locally."
msgstr ""

#: ../../docs/tutorial.rst:299
# ed1020712fa14bfcbbbae2f471a31acb
msgid "We also need to make sure we import the new functions at the top of our file::"
msgstr ""

#: ../../docs/tutorial.rst:305
# 1c7f8e3b01f34c57981c9900b129c4d7
msgid "With these changes in place, let's deploy::"
msgstr ""

#: ../../docs/tutorial.rst:316
# 1251577bf26943469d7aa561ef292b97
msgid "We never specified any connection info in our fabfile, so Fabric doesn't know on which host(s) the remote command should be executed. When this happens, Fabric prompts us at runtime. Connection definitions use SSH-like \"host strings\" (e.g. ``user@host:port``) and will use your local username as a default -- so in this example, we just had to specify the hostname, ``my_server``."
msgstr ""

#: ../../docs/tutorial.rst:325
# 758564f2f822442a9fb6369175af03c3
msgid "Remote interactivity"
msgstr ""

#: ../../docs/tutorial.rst:327
# 5664f80c4e294499a1a187fe1c9e3839
msgid "``git pull`` works fine if you've already got a checkout of your source code -- but what if this is the first deploy? It'd be nice to handle that case too and do the initial ``git clone``::"
msgstr ""

#: ../../docs/tutorial.rst:340
# 923ebc8087aa4128aeb52bf1f933e5ae
msgid "As with our calls to `~fabric.operations.local` above, `~fabric.operations.run` also lets us construct clean Python-level logic based on executed shell commands. However, the interesting part here is the ``git clone`` call: since we're using Git's SSH method of accessing the repository on our Git server, this means our remote `~fabric.operations.run` call will need to authenticate itself."
msgstr ""

#: ../../docs/tutorial.rst:347
# d34d6ee67fdd409c8fecad3a9713b737
msgid "Older versions of Fabric (and similar high level SSH libraries) run remote programs in limbo, unable to be touched from the local end. This is problematic when you have a serious need to enter passwords or otherwise interact with the remote program."
msgstr ""

#: ../../docs/tutorial.rst:352
# 748880c40bfd4f8197113e0703b372ad
msgid "Fabric 1.0 and later breaks down this wall and ensures you can always talk to the other side. Let's see what happens when we run our updated ``deploy`` task on a new server with no Git checkout::"
msgstr ""

#: ../../docs/tutorial.rst:378
# 8bbc0cab9b5446dfab64130c75b4062a
msgid "Notice the ``Password:`` prompt -- that was our remote ``git`` call on our Web server, asking for the password to the Git server. We were able to type it in and the clone continued normally."
msgstr ""

#: ../../docs/tutorial.rst:380
# abf28e3c6c4e48299737b71785b27ca9
msgid ":doc:`/usage/interactivity`"
msgstr ""

#: ../../docs/tutorial.rst:386
# 58d5fe6a3d664e319d3ed55765296b06
msgid "Defining connections beforehand"
msgstr ""

#: ../../docs/tutorial.rst:388
# f373d5e52a4f41bb8abb3f07e41664b1
msgid "Specifying connection info at runtime gets old real fast, so Fabric provides a handful of ways to do it in your fabfile or on the command line. We won't cover all of them here, but we will show you the most common one: setting the global host list, :ref:`env.hosts <hosts>`."
msgstr ""

#: ../../docs/tutorial.rst:393
# 07f78dd003d4447dbcf2b317adc5a79a
msgid ":doc:`env <usage/env>` is a global dictionary-like object driving many of Fabric's settings, and can be written to with attributes as well (in fact, `~fabric.context_managers.settings`, seen above, is simply a wrapper for this.) Thus, we can modify it at module level near the top of our fabfile like so::"
msgstr ""

#: ../../docs/tutorial.rst:407
# b2f23445a00b47f099481996baf38c71
msgid "When ``fab`` loads up our fabfile, our modification of ``env`` will execute, storing our settings change. The end result is exactly as above: our ``deploy`` task will run against the ``my_server`` server."
msgstr ""

#: ../../docs/tutorial.rst:411
# 60d7483346604a009de66a4366fed0e0
msgid "This is also how you can tell Fabric to run on multiple remote systems at once: because ``env.hosts`` is a list, ``fab`` iterates over it, calling the given task once for each connection."
msgstr ""

#: ../../docs/tutorial.rst:415
# 00ca2c9875cd411d920246ad1c3eba58
msgid ":doc:`usage/env`, :ref:`host-lists`"
msgstr ""

#: ../../docs/tutorial.rst:419
# 31187dd501ad412abbcdb723db04bc4c
msgid "Conclusion"
msgstr ""

#: ../../docs/tutorial.rst:421
# 5667e8e0d23a449da96c950951ea2b08
msgid "Our completed fabfile is still pretty short, as such things go. Here it is in its entirety::"
msgstr ""

#: ../../docs/tutorial.rst:456
# 130e7fc172844e5aa2f5668552151e8c
msgid "This fabfile makes use of a large portion of Fabric's feature set:"
msgstr ""

#: ../../docs/tutorial.rst:458
# ac0b286a7c8f4c3ea3a05af456eb883c
msgid "defining fabfile tasks and running them with :doc:`fab <usage/fab>`;"
msgstr ""

#: ../../docs/tutorial.rst:459
# 936214b91002413890a7e037d566c9ea
msgid "calling local shell commands with `~fabric.operations.local`;"
msgstr ""

#: ../../docs/tutorial.rst:460
# c6e07ccd33fc4482825411fcf88e859c
msgid "modifying env vars with `~fabric.context_managers.settings`;"
msgstr ""

#: ../../docs/tutorial.rst:461
# c7c40ea0c36c43be8420a107318b6b88
msgid "handling command failures, prompting the user, and manually aborting;"
msgstr ""

#: ../../docs/tutorial.rst:462
# 5a649f8730094faf993968a3777fb68b
msgid "and defining host lists and `~fabric.operations.run`-ning remote commands."
msgstr ""

#: ../../docs/tutorial.rst:464
# 167c63d0fab34a7fa1f2ca3108e2bcce
msgid "However, there's still a lot more we haven't covered here! Please make sure you follow the various \"see also\" links, and check out the documentation table of contents on :doc:`the main index page <index>`."
msgstr ""

#: ../../docs/tutorial.rst:468
# 4887137c8be44a6c9a052cc0f937c4a5
msgid "Thanks for reading!"
msgstr ""

