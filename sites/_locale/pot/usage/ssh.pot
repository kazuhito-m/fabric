# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Jeff Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-31 10:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/usage/ssh.rst:3
# 41cf50a402f440a9af5fc85c1d8bd693
msgid "SSH behavior"
msgstr ""

#: ../../docs/usage/ssh.rst:5
# bb4bd3267e1a4dfea1af4a00f31054b8
msgid "Fabric currently makes use of a pure-Python SSH re-implementation for managing connections, meaning that there are occasionally spots where it is limited by that library's capabilities. Below are areas of note where Fabric will exhibit behavior that isn't consistent with, or as flexible as, the behavior of the ``ssh`` command-line program."
msgstr ""

#: ../../docs/usage/ssh.rst:13
# 1c51dc1c9f3b42fda019920545f5a094
msgid "Unknown hosts"
msgstr ""

#: ../../docs/usage/ssh.rst:15
# d7e647d0f30842b181f4675c54db2925
msgid "SSH's host key tracking mechanism keeps tabs on all the hosts you attempt to connect to, and maintains a ``~/.ssh/known_hosts`` file with mappings between identifiers (IP address, sometimes with a hostname as well) and SSH keys. (For details on how this works, please see the `OpenSSH documentation <http://openssh.org/manual.html>`_.)"
msgstr ""

#: ../../docs/usage/ssh.rst:21
# 555f30d09e0440fbb1f7713b1df712a1
msgid "The ``paramiko`` library is capable of loading up your ``known_hosts`` file, and will then compare any host it connects to, with that mapping. Settings are available to determine what happens when an unknown host (a host whose username or IP is not found in ``known_hosts``) is seen:"
msgstr ""

#: ../../docs/usage/ssh.rst:26
# 8fd5ba5f1aa64a0690cb8769a81addf9
msgid "**Reject**: the host key is rejected and the connection is not made. This results in a Python exception, which will terminate your Fabric session with a message that the host is unknown."
msgstr ""

#: ../../docs/usage/ssh.rst:29
# 13a79b165cba41078765ee8466e3d518
msgid "**Add**: the new host key is added to the in-memory list of known hosts, the connection is made, and things continue normally. Note that this does **not** modify your on-disk ``known_hosts`` file!"
msgstr ""

#: ../../docs/usage/ssh.rst:32
# 757c4e72f39b4890895b84020803f0bc
msgid "**Ask**: not yet implemented at the Fabric level, this is a ``paramiko`` library option which would result in the user being prompted about the unknown key and whether to accept it."
msgstr ""

#: ../../docs/usage/ssh.rst:36
# 8c73524147e84342a11cee88fe9d6897
msgid "Whether to reject or add hosts, as above, is controlled in Fabric via the :ref:`env.reject_unknown_hosts <reject-unknown-hosts>` option, which is False by default for convenience's sake. We feel this is a valid tradeoff between convenience and security; anyone who feels otherwise can easily modify their fabfiles at module level to set ``env.reject_unknown_hosts = True``."
msgstr ""

#: ../../docs/usage/ssh.rst:44
# 864f93975d2c4187ac9fe9e531be7f23
msgid "Known hosts with changed keys"
msgstr ""

#: ../../docs/usage/ssh.rst:46
# 086bd33042694a999c33730730fdf709
msgid "The point of SSH's key/fingerprint tracking is so that man-in-the-middle attacks can be detected: if an attacker redirects your SSH traffic to a computer under his control, and pretends to be your original destination server, the host keys will not match. Thus, the default behavior of SSH (and its Python implementation) is to immediately abort the connection when a host previously recorded in ``known_hosts`` suddenly starts sending us a different host key."
msgstr ""

#: ../../docs/usage/ssh.rst:54
# 1808091d2b1f407e8817e2c63805cac2
msgid "In some edge cases such as some EC2 deployments, you may want to ignore this potential problem. Our SSH layer, at the time of writing, doesn't give us control over this exact behavior, but we can sidestep it by simply skipping the loading of ``known_hosts`` -- if the host list being compared to is empty, then there's no problem. Set :ref:`env.disable_known_hosts <disable-known-hosts>` to True when you want this behavior; it is False by default, in order to preserve default SSH behavior."
msgstr ""

#: ../../docs/usage/ssh.rst:63
# c8b7009154be428fb7900e74bbc6357c
msgid "Enabling :ref:`env.disable_known_hosts <disable-known-hosts>` will leave you wide open to man-in-the-middle attacks! Please use with caution."
msgstr ""

