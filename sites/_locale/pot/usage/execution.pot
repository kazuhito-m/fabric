# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Jeff Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-31 10:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/usage/execution.rst:3
# 2bd7d8dcd5db48dd864718b88f52c0a9
msgid "Execution model"
msgstr ""

#: ../../docs/usage/execution.rst:5
# 7a7b8b71274a483184674adf252a7ec4
msgid "If you've read the :doc:`../tutorial`, you should already be familiar with how Fabric operates in the base case (a single task on a single host.) However, in many situations you'll find yourself wanting to execute multiple tasks and/or on multiple hosts. Perhaps you want to split a big task into smaller reusable parts, or crawl a collection of servers looking for an old user to remove. Such a scenario requires specific rules for when and how tasks are executed."
msgstr ""

#: ../../docs/usage/execution.rst:12
# 153df17d45b347c29ed037e789f27405
msgid "This document explores Fabric's execution model, including the main execution loop, how to define host lists, how connections are made, and so forth."
msgstr ""

#: ../../docs/usage/execution.rst:19
# 62a791045f1d47389e5f9278b89f842b
msgid "Execution strategy"
msgstr ""

#: ../../docs/usage/execution.rst:21
# 5e6fd0d80931437cb0ae953fed246cb9
msgid "Fabric defaults to a single, serial execution method, though there is an alternative parallel mode available as of Fabric 1.3 (see :doc:`/usage/parallel`). This default behavior is as follows:"
msgstr ""

#: ../../docs/usage/execution.rst:25
# e317ab3026284fe0b9e75b9e4c2cf490
msgid "A list of tasks is created. Currently this list is simply the arguments given to :doc:`fab <fab>`, preserving the order given."
msgstr ""

#: ../../docs/usage/execution.rst:27
# c859b1a6eeea4f5b9f4f3c1387cc988b
msgid "For each task, a task-specific host list is generated from various sources (see :ref:`host-lists` below for details.)"
msgstr ""

#: ../../docs/usage/execution.rst:29
# 041bd1e6b4ed48ad810ac7ab7f73ff55
msgid "The task list is walked through in order, and each task is run once per host in its host list."
msgstr ""

#: ../../docs/usage/execution.rst:31
# d7ef27f7fe484c219655105c70c1a651
msgid "Tasks with no hosts in their host list are considered local-only, and will always run once and only once."
msgstr ""

#: ../../docs/usage/execution.rst:34
# 475a15fc65354681b2438c0f32b5e614
msgid "Thus, given the following fabfile::"
msgstr ""

#: ../../docs/usage/execution.rst:46
# 5325808bf6134ef68cc955f4cafc8596
msgid "and the following invocation::"
msgstr ""

#: ../../docs/usage/execution.rst:50
# d033f3416b5e4691a0276b4ca7f1681e
msgid "you will see that Fabric performs the following:"
msgstr ""

#: ../../docs/usage/execution.rst:52
# 3670a8d3b99e42bbb76a7b6fb9e7cd62
msgid "``taskA`` executed on ``host1``"
msgstr ""

#: ../../docs/usage/execution.rst:53
# 461d6e2f2123431bba3112348b4ba358
msgid "``taskA`` executed on ``host2``"
msgstr ""

#: ../../docs/usage/execution.rst:54
# 1156b8487a5445d78202fc0532e05962
msgid "``taskB`` executed on ``host1``"
msgstr ""

#: ../../docs/usage/execution.rst:55
# 9b57735eaa4c4c4aa7615ac1af2faebb
msgid "``taskB`` executed on ``host2``"
msgstr ""

#: ../../docs/usage/execution.rst:57
# 533da3da837d47148615f8861ee2189b
msgid "While this approach is simplistic, it allows for a straightforward composition of task functions, and (unlike tools which push the multi-host functionality down to the individual function calls) enables shell script-like logic where you may introspect the output or return code of a given command and decide what to do next."
msgstr ""

#: ../../docs/usage/execution.rst:65
# 5110ad4d3cb240c5bd4f9f46f001f0aa
msgid "Defining tasks"
msgstr ""

#: ../../docs/usage/execution.rst:67
# dd4af33c1b604f0b9c152ebf426e9e43
msgid "For details on what constitutes a Fabric task and how to organize them, please see :doc:`/usage/tasks`."
msgstr ""

#: ../../docs/usage/execution.rst:71
# fe189f9e5fa64a07a04fe1f031ca339f
msgid "Defining host lists"
msgstr ""

#: ../../docs/usage/execution.rst:73
# 8d2e8274207043cf907c0919703fc097
msgid "Unless you're using Fabric as a simple build system (which is possible, but not the primary use-case) having tasks won't do you any good without the ability to specify remote hosts on which to execute them. There are a number of ways to do so, with scopes varying from global to per-task, and it's possible mix and match as needed."
msgstr ""

#: ../../docs/usage/execution.rst:82
# 76ec644a0c744d418f07cf45f5ebc341
msgid "Hosts"
msgstr ""

#: ../../docs/usage/execution.rst:84
# 3931bb4a2e194147b970dafeda9067dc
msgid "Hosts, in this context, refer to what are also called \"host strings\": Python strings specifying a username, hostname and port combination, in the form of ``username@hostname:port``. User and/or port (and the associated ``@`` or ``:``) may be omitted, and will be filled by the executing user's local username, and/or port 22, respectively. Thus, ``admin@foo.com:222``, ``deploy@website`` and ``nameserver1`` could all be valid host strings."
msgstr ""

#: ../../docs/usage/execution.rst:91
# dbf4db85b7134ddea80b590e4b3e4ad9
msgid "IPv6 address notation is also supported, for example ``::1``, ``[::1]:1222``, ``user@2001:db8::1`` or ``user@[2001:db8::1]:1222``. Square brackets are necessary only to separate the address from the port number. If no port number is used, the brackets are optional. Also if host string is specified via command-line argument, it may be necessary to escape brackets in some shells."
msgstr ""

#: ../../docs/usage/execution.rst:99
# d5e4a890851c431c9d3c0091751c29e2
msgid "The user/hostname split occurs at the last ``@`` found, so e.g. email address usernames are valid and will be parsed correctly."
msgstr ""

#: ../../docs/usage/execution.rst:102
# 6e8002aa48d74adab5cd8ea76a0891d8
msgid "During execution, Fabric normalizes the host strings given and then stores each part (username/hostname/port) in the environment dictionary, for both its use and for tasks to reference if the need arises. See :doc:`env` for details."
msgstr ""

#: ../../docs/usage/execution.rst:109
# 6c045667ef3249019bd5b51402fcea7c
msgid "Roles"
msgstr ""

#: ../../docs/usage/execution.rst:111
# af15c6d418bd470393e61ac2fcad772e
msgid "Host strings map to single hosts, but sometimes it's useful to arrange hosts in groups. Perhaps you have a number of Web servers behind a load balancer and want to update all of them, or want to run a task on \"all client servers\". Roles provide a way of defining strings which correspond to lists of host strings, and can then be specified instead of writing out the entire list every time."
msgstr ""

#: ../../docs/usage/execution.rst:118
# 225e3bd4a1ff46488c847cce807d0a8f
msgid "This mapping is defined as a dictionary, ``env.roledefs``, which must be modified by a fabfile in order to be used. A simple example::"
msgstr ""

#: ../../docs/usage/execution.rst:125
# 084fefa6d83d47fcbb36349d51869f1d
msgid "Since ``env.roledefs`` is naturally empty by default, you may also opt to re-assign to it without fear of losing any information (provided you aren't loading other fabfiles which also modify it, of course)::"
msgstr ""

#: ../../docs/usage/execution.rst:136
# 1b8d51e466d4489885e7b393f9de9c93
msgid "Role definitions are not necessary configuration of hosts only, but could hold other role specific settings of your choice. This is achieved by defining the roles as dicts and host strings under a ``hosts`` key::"
msgstr ""

#: ../../docs/usage/execution.rst:153
# 8206dd0575904f4b85225c57262257f0
msgid "In addition to list/iterable object types, the values in ``env.roledefs`` (or value of ``hosts`` key in dict style definition) may be callables, and will thus be called when looked up when tasks are run instead of at module load time. (For example, you could connect to remote servers to obtain role definitions, and not worry about causing delays at fabfile load time when calling e.g. ``fab --list``.)"
msgstr ""

#: ../../docs/usage/execution.rst:160
# 2ee1a22b45cb4d16b01f3ef81bd63c35
msgid "Use of roles is not required in any way -- it's simply a convenience in situations where you have common groupings of servers."
msgstr ""

#: ../../docs/usage/execution.rst:163
# 7cf57d4a4d434d10846c058fb981b5c8
msgid "Added ability to use callables as ``roledefs`` values."
msgstr ""

#: ../../docs/usage/execution.rst:169
# 5e1489cbf2434a00b0c4801e512feb13
msgid "How host lists are constructed"
msgstr ""

#: ../../docs/usage/execution.rst:171
# 9566c27192c34b239839b71ef64106c1
msgid "There are a number of ways to specify host lists, either globally or per-task, and generally these methods override one another instead of merging together (though this may change in future releases.) Each such method is typically split into two parts, one for hosts and one for roles."
msgstr ""

#: ../../docs/usage/execution.rst:177
# 2473d015eee04bb69994af0f4b0fc9c0
msgid "Globally, via ``env``"
msgstr ""

#: ../../docs/usage/execution.rst:179
# 57165a06cf0c42529f0eb1431228537a
msgid "The most common method of setting hosts or roles is by modifying two key-value pairs in the environment dictionary, :doc:`env <env>`: ``hosts`` and ``roles``. The value of these variables is checked at runtime, while constructing each tasks's host list."
msgstr ""

#: ../../docs/usage/execution.rst:184
# e741b7faa2184b8fb27dfe902de8ef90
msgid "Thus, they may be set at module level, which will take effect when the fabfile is imported::"
msgstr ""

#: ../../docs/usage/execution.rst:194
# 1460172bab3141e38c09dbe169492709
msgid "Such a fabfile, run simply as ``fab mytask``, will run ``mytask`` on ``host1`` followed by ``host2``."
msgstr ""

#: ../../docs/usage/execution.rst:197
# 0c50feaa397844f190dc891a3f76922b
msgid "Since the env vars are checked for *each* task, this means that if you have the need, you can actually modify ``env`` in one task and it will affect all following tasks::"
msgstr ""

#: ../../docs/usage/execution.rst:209
# a559f18d85b042dfa4115d66638bd574
msgid "When run as ``fab set_hosts mytask``, ``set_hosts`` is a \"local\" task -- its own host list is empty -- but ``mytask`` will again run on the two hosts given."
msgstr ""

#: ../../docs/usage/execution.rst:214
# 579d6378e3ad45cab364c0220ea6780b
msgid "This technique used to be a common way of creating fake \"roles\", but is less necessary now that roles are fully implemented. It may still be useful in some situations, however."
msgstr ""

#: ../../docs/usage/execution.rst:218
# 32fb75fb7b054a8189a232e1a29eaf72
msgid "Alongside ``env.hosts`` is ``env.roles`` (not to be confused with ``env.roledefs``!) which, if given, will be taken as a list of role names to look up in ``env.roledefs``."
msgstr ""

#: ../../docs/usage/execution.rst:223
# af6abb43e7a843e68566d937f50c39f1
msgid "Globally, via the command line"
msgstr ""

#: ../../docs/usage/execution.rst:225
# 849a5b3712744bfaa7f9c5257f388630
msgid "In addition to modifying ``env.hosts``, ``env.roles``, and ``env.exclude_hosts`` at the module level, you may define them by passing comma-separated string arguments to the command-line switches :option:`--hosts/-H <-H>` and :option:`--roles/-R <-R>`, e.g.::"
msgstr ""

#: ../../docs/usage/execution.rst:232
# 3d551556cd4b4cad86621b6797119995
msgid "Such an invocation is directly equivalent to ``env.hosts = ['host1', 'host2']`` -- the argument parser knows to look for these arguments and will modify ``env`` at parse time."
msgstr ""

#: ../../docs/usage/execution.rst:238
# 18382573891f4b939923ba6bd5cfb1c6
msgid "It's possible, and in fact common, to use these switches to set only a single host or role. Fabric simply calls ``string.split(',')`` on the given string, so a string with no commas turns into a single-item list."
msgstr ""

#: ../../docs/usage/execution.rst:242
# a3738537cdc54fad9db938bb398213fa
msgid "It is important to know that these command-line switches are interpreted **before** your fabfile is loaded: any reassignment to ``env.hosts`` or ``env.roles`` in your fabfile will overwrite them."
msgstr ""

#: ../../docs/usage/execution.rst:246
# 6933cfc2f6534bcbbe2544b488a25446
msgid "If you wish to nondestructively merge the command-line hosts with your fabfile-defined ones, make sure your fabfile uses ``env.hosts.extend()`` instead::"
msgstr ""

#: ../../docs/usage/execution.rst:257
# d2843d6cd64147dba7ead2dd0c6be995
msgid "When this fabfile is run as ``fab -H host1,host2 mytask``, ``env.hosts`` will then contain ``['host1', 'host2', 'host3', 'host4']`` at the time that ``mytask`` is executed."
msgstr ""

#: ../../docs/usage/execution.rst:263
# 95b4d243b61b496c9a9c9fab0f6ad93b
msgid "``env.hosts`` is simply a Python list object -- so you may use ``env.hosts.append()`` or any other such method you wish."
msgstr ""

#: ../../docs/usage/execution.rst:269
# 1d8b3629e6d2450793e47ba55ff65686
msgid "Per-task, via the command line"
msgstr ""

#: ../../docs/usage/execution.rst:271
# 18490a37435e44f3b159cf56c382fd84
msgid "Globally setting host lists only works if you want all your tasks to run on the same host list all the time. This isn't always true, so Fabric provides a few ways to be more granular and specify host lists which apply to a single task only. The first of these uses task arguments."
msgstr ""

#: ../../docs/usage/execution.rst:276
# 6514409bebd941328162e6f4f8bf5c0e
msgid "As outlined in :doc:`fab`, it's possible to specify per-task arguments via a special command-line syntax. In addition to naming actual arguments to your task function, this may be used to set the ``host``, ``hosts``, ``role`` or ``roles`` \"arguments\", which are interpreted by Fabric when building host lists (and removed from the arguments passed to the task itself.)"
msgstr ""

#: ../../docs/usage/execution.rst:284
# 2c0bc9562ac040838936b1d8c64276ec
msgid "Since commas are already used to separate task arguments from one another, semicolons must be used in the ``hosts`` or ``roles`` arguments to delineate individual host strings or role names. Furthermore, the argument must be quoted to prevent your shell from interpreting the semicolons."
msgstr ""

#: ../../docs/usage/execution.rst:289
# bcee27db0583443e90c88fbfde40ea86
msgid "Take the below fabfile, which is the same one we've been using, but which doesn't define any host info at all::"
msgstr ""

#: ../../docs/usage/execution.rst:297
# 948952c7022440f58e639154484cd7b7
msgid "To specify per-task hosts for ``mytask``, execute it like so::"
msgstr ""

#: ../../docs/usage/execution.rst:301
# 6ee1e676b008451e84a3f85dd71f7906
msgid "This will override any other host list and ensure ``mytask`` always runs on just those two hosts."
msgstr ""

#: ../../docs/usage/execution.rst:305
# d29513c6640f4e75a02eed03724e6f21
msgid "Per-task, via decorators"
msgstr ""

#: ../../docs/usage/execution.rst:307
# 6685e04aaabc4ccaa5fd1b9418439179
msgid "If a given task should always run on a predetermined host list, you may wish to specify this in your fabfile itself. This can be done by decorating a task function with the `~fabric.decorators.hosts` or `~fabric.decorators.roles` decorators. These decorators take a variable argument list, like so::"
msgstr ""

#: ../../docs/usage/execution.rst:318
# 46303bb37f4947aaac3445246b2463a8
msgid "They will also take an single iterable argument, e.g.::"
msgstr ""

#: ../../docs/usage/execution.rst:325
# 379c09bb17ca4eea8bde33303d8738b1
msgid "When used, these decorators override any checks of ``env`` for that particular task's host list (though ``env`` is not modified in any way -- it is simply ignored.) Thus, even if the above fabfile had defined ``env.hosts`` or the call to :doc:`fab <fab>` uses :option:`--hosts/-H <-H>`, ``mytask`` would still run on a host list of ``['host1', 'host2']``."
msgstr ""

#: ../../docs/usage/execution.rst:331
# cf1aecafa93b4108a5986ac412078b39
msgid "However, decorator host lists do **not** override per-task command-line arguments, as given in the previous section."
msgstr ""

#: ../../docs/usage/execution.rst:335
# 54c533b69a974f7096282e25199ff086
msgid "Order of precedence"
msgstr ""

#: ../../docs/usage/execution.rst:337
# 6679b989614f494dac2ccd9ffaea8012
msgid "We've been pointing out which methods of setting host lists trump the others, as we've gone along. However, to make things clearer, here's a quick breakdown:"
msgstr ""

#: ../../docs/usage/execution.rst:340
# 823ef9468ec74eec8b6539078be5e8db
msgid "Per-task, command-line host lists (``fab mytask:host=host1``) override absolutely everything else."
msgstr ""

#: ../../docs/usage/execution.rst:342
# 7854aa7dfb42445aa2062378c442aada
msgid "Per-task, decorator-specified host lists (``@hosts('host1')``) override the ``env`` variables."
msgstr ""

#: ../../docs/usage/execution.rst:344
# 1b691872daae4417bc90b981da8e5168
msgid "Globally specified host lists set in the fabfile (``env.hosts = ['host1']``) *can* override such lists set on the command-line, but only if you're not careful (or want them to.)"
msgstr ""

#: ../../docs/usage/execution.rst:347
# ae4406604e3a4e3382e51cb6ad1ca836
msgid "Globally specified host lists set on the command-line (``--hosts=host1``) will initialize the ``env`` variables, but that's it."
msgstr ""

#: ../../docs/usage/execution.rst:350
# 9241dc1f4e1548148120181685b4066c
msgid "This logic may change slightly in the future to be more consistent (e.g. having :option:`--hosts <-H>` somehow take precedence over ``env.hosts`` in the same way that command-line per-task lists trump in-code ones) but only in a backwards-incompatible release."
msgstr ""

#: ../../docs/usage/execution.rst:358
# 77dcbbd0c06b421aa41df2a157c8120e
msgid "Combining host lists"
msgstr ""

#: ../../docs/usage/execution.rst:360
# 77b7f90caa964a358a6e84e4e3856913
msgid "There is no \"unionizing\" of hosts between the various sources mentioned in :ref:`host-lists`. If ``env.hosts`` is set to ``['host1', 'host2', 'host3']``, and a per-function (e.g.  via `~fabric.decorators.hosts`) host list is set to just ``['host2', 'host3']``, that function will **not** execute on ``host1``, because the per-task decorator host list takes precedence."
msgstr ""

#: ../../docs/usage/execution.rst:366
# a33736307d4c4b979fef456c28cc8843
msgid "However, for each given source, if both roles **and** hosts are specified, they will be merged together into a single host list. Take, for example, this fabfile where both of the decorators are used::"
msgstr ""

#: ../../docs/usage/execution.rst:379
# aafc4afc4e9e4bfbb4d116bd2aa4e4b9
msgid "Assuming no command-line hosts or roles are given when ``mytask`` is executed, this fabfile will call ``mytask`` on a host list of ``['a', 'b', 'c']`` -- the union of ``role1`` and the contents of the `~fabric.decorators.hosts` call."
msgstr ""

#: ../../docs/usage/execution.rst:387
# af78922e8b814eeb8f3486908e061765
msgid "Host list deduplication"
msgstr ""

#: ../../docs/usage/execution.rst:389
# 7c58aad0f8c644c0bf3fe5c5a0b746d2
msgid "By default, to support :ref:`combining-host-lists`, Fabric deduplicates the final host list so any given host string is only present once. However, this prevents explicit/intentional running of a task multiple times on the same target host, which is sometimes useful."
msgstr ""

#: ../../docs/usage/execution.rst:394
# a2ad85510f7948f79df4649d35a16255
msgid "To turn off deduplication, set :ref:`env.dedupe_hosts <dedupe_hosts>` to ``False``."
msgstr ""

#: ../../docs/usage/execution.rst:401
# 1975d568fe2b4a7e8d5ccc95a1d2879e
msgid "Excluding specific hosts"
msgstr ""

#: ../../docs/usage/execution.rst:403
# 7e0de9fa8b6041e883de15956c84b816
msgid "At times, it is useful to exclude one or more specific hosts, e.g. to override a few bad or otherwise undesirable hosts which are pulled in from a role or an autogenerated host list."
msgstr ""

#: ../../docs/usage/execution.rst:408
# 2a3f940572bf48c7889d5d068d5d9a97
msgid "As of Fabric 1.4, you may wish to use :ref:`skip-bad-hosts` instead, which automatically skips over any unreachable hosts."
msgstr ""

#: ../../docs/usage/execution.rst:411
# f20e4a07f1e24f71bab18f2f7565b90f
msgid "Host exclusion may be accomplished globally with :option:`--exclude-hosts/-x <-x>`::"
msgstr ""

#: ../../docs/usage/execution.rst:416
# 79b0f1e66f77432b9cfcbb055abbb518
msgid "If ``myrole`` was defined as ``['host1', 'host2', ..., 'host15']``, the above invocation would run with an effective host list of ``['host1', 'host3', 'host4', 'host6', ..., 'host15']``."
msgstr ""

#: ../../docs/usage/execution.rst:421
# c60ebd904e644a7c897026bae6b04c19
msgid "Using this option does not modify ``env.hosts`` -- it only causes the main execution loop to skip the requested hosts."
msgstr ""

#: ../../docs/usage/execution.rst:424
# 8cce39a7150142d29252181337ed77d2
msgid "Exclusions may be specified per-task by using an extra ``exclude_hosts`` kwarg, which is implemented similarly to the abovementioned ``hosts`` and ``roles`` per-task kwargs, in that it is stripped from the actual task invocation. This example would have the same result as the global exclude above::"
msgstr ""

#: ../../docs/usage/execution.rst:431
# a115314f3b9f4d9a966f3bf79a1dde6f
msgid "Note that the host list is semicolon-separated, just as with the ``hosts`` per-task argument."
msgstr ""

#: ../../docs/usage/execution.rst:435
# 9244d54ee4134105b3146283611ea48b
msgid "Combining exclusions"
msgstr ""

#: ../../docs/usage/execution.rst:437
# 8f94700bc32f4af08b238ea3c446b377
msgid "Host exclusion lists, like host lists themselves, are not merged together across the different \"levels\" they can be declared in. For example, a global ``-x`` option will not affect a per-task host list set with a decorator or keyword argument, nor will per-task ``exclude_hosts`` keyword arguments affect a global ``-H`` list."
msgstr ""

#: ../../docs/usage/execution.rst:443
# c1c95989664b49e19b091e063b7314fb
msgid "There is one minor exception to this rule, namely that CLI-level keyword arguments (``mytask:exclude_hosts=x,y``) **will** be taken into account when examining host lists set via ``@hosts`` or ``@roles``. Thus a task function decorated with ``@hosts('host1', 'host2')`` executed as ``fab taskname:exclude_hosts=host2`` will only run on ``host1``."
msgstr ""

#: ../../docs/usage/execution.rst:449
# c9c73bcf579e4f33bb2e6e92b1a85c83
msgid "As with the host list merging, this functionality is currently limited (partly to keep the implementation simple) and may be expanded in future releases."
msgstr ""

#: ../../docs/usage/execution.rst:456
# 5260d269d12c455fb681fc7ae81a7851
msgid "Intelligently executing tasks with ``execute``"
msgstr ""

#: ../../docs/usage/execution.rst:460
# 91337768d30f4ab6866577ec6a07ec73
msgid "Most of the information here involves \"top level\" tasks executed via :doc:`fab <fab>`, such as the first example where we called ``fab taskA taskB``. However, it's often convenient to wrap up multi-task invocations like this into their own, \"meta\" tasks."
msgstr ""

#: ../../docs/usage/execution.rst:465
# 1e8d0ce0958f49149e056079d68ee1fa
msgid "Prior to Fabric 1.3, this had to be done by hand, as outlined in :doc:`/usage/library`. Fabric's design eschews magical behavior, so simply *calling* a task function does **not** take into account decorators such as `~fabric.decorators.roles`."
msgstr ""

#: ../../docs/usage/execution.rst:470
# 3a1fe2081cfa473590d9bc7ca7d977a1
msgid "New in Fabric 1.3 is the `~fabric.tasks.execute` helper function, which takes a task object or name as its first argument. Using it is effectively the same as calling the given task from the command line: all the rules given above in :ref:`host-lists` apply. (The ``hosts`` and ``roles`` keyword arguments to `~fabric.tasks.execute` are analogous to :ref:`CLI per-task arguments <hosts-per-task-cli>`, including how they override all other host/role-setting methods.)"
msgstr ""

#: ../../docs/usage/execution.rst:478
# 708d426843e54deea341d4113039d2b5
msgid "As an example, here's a fabfile defining two stand-alone tasks for deploying a Web application::"
msgstr ""

#: ../../docs/usage/execution.rst:498
# 04b3c51e9dad4a29bf76fd65107c6968
msgid "In Fabric <=1.2, the only way to ensure that ``migrate`` runs on the DB servers and that ``update`` runs on the Web servers (short of manual ``env.host_string`` manipulation) was to call both as top level tasks::"
msgstr ""

#: ../../docs/usage/execution.rst:504
# 6a28f8c42f1149f28a36ff100d55eff1
msgid "Fabric >=1.3 can use `~fabric.tasks.execute` to set up a meta-task. Update the ``import`` line like so::"
msgstr ""

#: ../../docs/usage/execution.rst:509
# c2e235c517fc462c8bf23466f0bf45ab
msgid "and append this to the bottom of the file::"
msgstr ""

#: ../../docs/usage/execution.rst:515
# b69b01782edd45e48668606d2dd1683c
msgid "That's all there is to it; the `~fabric.decorators.roles` decorators will be honored as expected, resulting in the following execution sequence:"
msgstr ""

#: ../../docs/usage/execution.rst:517
# b98e1e0cb538492285a5f9240b23dfa3
msgid "`migrate` on `db1`"
msgstr ""

#: ../../docs/usage/execution.rst:518
# 9cc42f6dcbb14bb5bb641618a81e4151
msgid "`migrate` on `db2`"
msgstr ""

#: ../../docs/usage/execution.rst:519
# c0d816d4a9d14954904401589d6a926f
msgid "`update` on `web1`"
msgstr ""

#: ../../docs/usage/execution.rst:520
# 4c65d54e5fde4a18a92316151064a032
msgid "`update` on `web2`"
msgstr ""

#: ../../docs/usage/execution.rst:521
# 95683cab3348418b9d32908e9bd23183
msgid "`update` on `web3`"
msgstr ""

#: ../../docs/usage/execution.rst:524
# 5c52fd2bf20e4cf1a23243f6f481e3fa
msgid "This technique works because tasks that themselves have no host list (this includes the global host list settings) only run one time. If used inside a \"regular\" task that is going to run on multiple hosts, calls to `~fabric.tasks.execute` will also run multiple times, resulting in multiplicative numbers of subtask calls -- be careful!"
msgstr ""

#: ../../docs/usage/execution.rst:530
# 3ec5d30a6ab0493783dc6bcdba374b08
msgid "If you would like your `execute` calls to only be called once, you may use the `~fabric.decorators.runs_once` decorator."
msgstr ""

#: ../../docs/usage/execution.rst:533
# 962d206b708d4731ac66a32608467177
msgid "`~fabric.tasks.execute`, `~fabric.decorators.runs_once`"
msgstr ""

#: ../../docs/usage/execution.rst:539
# 83931759810b41778b87d96b068e8302
msgid "Leveraging ``execute`` to access multi-host results"
msgstr ""

#: ../../docs/usage/execution.rst:541
# 660a0a8fc39a4cbb88f2b8abaaa1dbc4
msgid "In nontrivial Fabric runs, especially parallel ones, you may want to gather up a bunch of per-host result values at the end - e.g. to present a summary table, perform calculations, etc."
msgstr ""

#: ../../docs/usage/execution.rst:545
# 24a3f5d24ba246ee8406ce54bfcf5df2
msgid "It's not possible to do this in Fabric's default \"naive\" mode (one where you rely on Fabric looping over host lists on your behalf), but with `.execute` it's pretty easy. Simply switch from calling the actual work-bearing task, to calling a \"meta\" task which takes control of execution with `.execute`::"
msgstr ""

#: ../../docs/usage/execution.rst:562
# 18d9f21fd59b493d9ca2daff5f23a7fc
msgid "In the above, ``workhorse`` can do any Fabric stuff at all -- it's literally your old \"naive\" task -- except that it needs to return something useful."
msgstr ""

#: ../../docs/usage/execution.rst:565
# e4b222fcffce4b749441b6fd8aa873dd
msgid "``go`` is your new entry point (to be invoked as ``fab go``, or whatnot) and its job is to take the ``results`` dictionary from the `.execute` call and do whatever you need with it. Check the API docs for details on the structure of that return value."
msgstr ""

#: ../../docs/usage/execution.rst:574
# 2b74ae343eb24ca98da8fc6fea765e3a
msgid "Using ``execute`` with dynamically-set host lists"
msgstr ""

#: ../../docs/usage/execution.rst:576
# a74ccdd71e004866872fee0df39f292f
msgid "A common intermediate-to-advanced use case for Fabric is to parameterize lookup of one's target host list at runtime (when use of :ref:`execution-roles` does not suffice). ``execute`` can make this extremely simple, like so::"
msgstr ""

#: ../../docs/usage/execution.rst:601
# 037202f3d8be47a6ba30fa8f04cc72ea
msgid "For example, if ``external_datastore`` was a simplistic \"look up hosts by tag in a database\" service, and you wanted to run a task on all hosts tagged as being related to your application stack, you might call the above like this::"
msgstr ""

#: ../../docs/usage/execution.rst:607
# 9befb440ff974bc5ba9bdfdb97e6d34c
msgid "But wait! A data migration has gone awry on the DB servers. Let's fix up our migration code in our source repo, and deploy just the DB boxes again::"
msgstr ""

#: ../../docs/usage/execution.rst:612
# 0ce1cc9eec0e43c5ae32479365ec1eaa
msgid "This use case looks similar to Fabric's roles, but has much more potential, and is by no means limited to a single argument. Define the task however you wish, query your external data store in whatever way you need -- it's just Python."
msgstr ""

#: ../../docs/usage/execution.rst:617
# 2f7f045aea8345b186fcd9bd3691a97b
msgid "The alternate approach"
msgstr ""

#: ../../docs/usage/execution.rst:619
# 6ccbea85d87743fe8530be2ad6045370
msgid "Similar to the above, but using ``fab``'s ability to call multiple tasks in succession instead of an explicit ``execute`` call, is to mutate :ref:`env.hosts <hosts>` in a host-list lookup task and then call ``do_work`` in the same session::"
msgstr ""

#: ../../docs/usage/execution.rst:639
# 9a90bc41047d4f1295e40fbfcf52bb33
msgid "Then invoke like so::"
msgstr ""

#: ../../docs/usage/execution.rst:643
# 0b417b65dbb749b2af3a6755f4bfde37
msgid "One benefit of this approach over the previous one is that you can replace ``do_work`` with any other \"workhorse\" task::"
msgstr ""

#: ../../docs/usage/execution.rst:654
# 1b3d7a011d8943d29b17767efd3c227c
msgid "Failure handling"
msgstr ""

#: ../../docs/usage/execution.rst:656
# b7290e76e5874d36ac70e3a248d5ff8b
msgid "Once the task list has been constructed, Fabric will start executing them as outlined in :ref:`execution-strategy`, until all tasks have been run on the entirety of their host lists. However, Fabric defaults to a \"fail-fast\" behavior pattern: if anything goes wrong, such as a remote program returning a nonzero return value or your fabfile's Python code encountering an exception, execution will halt immediately."
msgstr ""

#: ../../docs/usage/execution.rst:663
# 36b061ac58d140818ff5a09659baf3c2
msgid "This is typically the desired behavior, but there are many exceptions to the rule, so Fabric provides ``env.warn_only``, a Boolean setting. It defaults to ``False``, meaning an error condition will result in the program aborting immediately. However, if ``env.warn_only`` is set to ``True`` at the time of failure -- with, say, the `~fabric.context_managers.settings` context manager -- Fabric will emit a warning message but continue executing."
msgstr ""

#: ../../docs/usage/execution.rst:674
# 531493784ecf47499a507bc2aa888c16
msgid "Connections"
msgstr ""

#: ../../docs/usage/execution.rst:676
# f17efb1c21d54b39a56826eb6482ca98
msgid "``fab`` itself doesn't actually make any connections to remote hosts. Instead, it simply ensures that for each distinct run of a task on one of its hosts, the env var ``env.host_string`` is set to the right value. Users wanting to leverage Fabric as a library may do so manually to achieve similar effects (though as of Fabric 1.3, using `~fabric.tasks.execute` is preferred and more powerful.)"
msgstr ""

#: ../../docs/usage/execution.rst:683
# 2e6ebf79c5424d128ea5dc756ee60129
msgid "``env.host_string`` is (as the name implies) the \"current\" host string, and is what Fabric uses to determine what connections to make (or re-use) when network-aware functions are run. Operations like `~fabric.operations.run` or `~fabric.operations.put` use ``env.host_string`` as a lookup key in a shared dictionary which maps host strings to SSH connection objects."
msgstr ""

#: ../../docs/usage/execution.rst:691
# b68fad414314497187363d4453750cfd
msgid "The connections dictionary (currently located at ``fabric.state.connections``) acts as a cache, opting to return previously created connections if possible in order to save some overhead, and creating new ones otherwise."
msgstr ""

#: ../../docs/usage/execution.rst:697
# f96d07672c2e4a608a48aa06189a6cb7
msgid "Lazy connections"
msgstr ""

#: ../../docs/usage/execution.rst:699
# 759ee8a0a7ea4394945e460bf18ff384
msgid "Because connections are driven by the individual operations, Fabric will not actually make connections until they're necessary. Take for example this task which does some local housekeeping prior to interacting with the remote server::"
msgstr ""

#: ../../docs/usage/execution.rst:714
# 67dbebe3a11b4c13a290881b3dda5bd7
msgid "What happens, connection-wise, is as follows:"
msgstr ""

#: ../../docs/usage/execution.rst:716
# 1cd36111f6864fca92667f9bf02baf91
msgid "The two `~fabric.operations.local` calls will run without making any network connections whatsoever;"
msgstr ""

#: ../../docs/usage/execution.rst:718
# 7325e2715e9641fabab2a8ebba99ffa2
msgid "`~fabric.operations.put` asks the connection cache for a connection to ``host1``;"
msgstr ""

#: ../../docs/usage/execution.rst:720
# c2f60fe09b6844fda95dc08e6d353957
msgid "The connection cache fails to find an existing connection for that host string, and so creates a new SSH connection, returning it to `~fabric.operations.put`;"
msgstr ""

#: ../../docs/usage/execution.rst:723
# 4648b1b5e43b4d9097f9458e1d0d5336
msgid "`~fabric.operations.put` uploads the file through that connection;"
msgstr ""

#: ../../docs/usage/execution.rst:724
# d21fa8441e684316967f3a507c37aeea
msgid "Finally, the `~fabric.operations.run` call asks the cache for a connection to that same host string, and is given the existing, cached connection for its own use."
msgstr ""

#: ../../docs/usage/execution.rst:728
# b54028c5a1ef4ef3b35a70ce0554d03b
msgid "Extrapolating from this, you can also see that tasks which don't use any network-borne operations will never actually initiate any connections (though they will still be run once for each host in their host list, if any.)"
msgstr ""

#: ../../docs/usage/execution.rst:733
# eccc6ccd03744b5eba63aba7b3414041
msgid "Closing connections"
msgstr ""

#: ../../docs/usage/execution.rst:735
# 58b580bcdf75456eaa618d1fc0b30d70
msgid "Fabric's connection cache never closes connections itself -- it leaves this up to whatever is using it. The :doc:`fab <fab>` tool does this bookkeeping for you: it iterates over all open connections and closes them just before it exits (regardless of whether the tasks failed or not.)"
msgstr ""

#: ../../docs/usage/execution.rst:740
# 82bd6a761545490bb91bc08ea6ff7b29
msgid "Library users will need to ensure they explicitly close all open connections before their program exits. This can be accomplished by calling `~fabric.network.disconnect_all` at the end of your script."
msgstr ""

#: ../../docs/usage/execution.rst:745
# ba1dbe1544394042b668821ee09afe83
msgid "`~fabric.network.disconnect_all` may be moved to a more public location in the future; we're still working on making the library aspects of Fabric more solidified and organized."
msgstr ""

#: ../../docs/usage/execution.rst:750
# 77023703e71d400d98584b458f71dee7
msgid "Multiple connection attempts and skipping bad hosts"
msgstr ""

#: ../../docs/usage/execution.rst:752
# 5b8d0e4202964376850861a6b1580a9d
msgid "As of Fabric 1.4, multiple attempts may be made to connect to remote servers before aborting with an error: Fabric will try connecting :ref:`env.connection_attempts <connection-attempts>` times before giving up, with a timeout of :ref:`env.timeout <timeout>` seconds each time. (These currently default to 1 try and 10 seconds, to match previous behavior, but they may be safely changed to whatever you need.)"
msgstr ""

#: ../../docs/usage/execution.rst:759
# f24a9540e6a44aaeb4b6214e465496f5
msgid "Furthermore, even total failure to connect to a server is no longer an absolute hard stop: set :ref:`env.skip_bad_hosts <skip-bad-hosts>` to ``True`` and in most situations (typically initial connections) Fabric will simply warn and continue, instead of aborting."
msgstr ""

#: ../../docs/usage/execution.rst:769
# b031a31d58c643fb95f18192a526f47b
msgid "Password management"
msgstr ""

#: ../../docs/usage/execution.rst:771
# f605d44ac86d4158a1fafa18f966a06e
msgid "Fabric maintains an in-memory, two-tier password cache to help remember your login and sudo passwords in certain situations; this helps avoid tedious re-entry when multiple systems share the same password [#]_, or if a remote system's ``sudo`` configuration doesn't do its own caching."
msgstr ""

#: ../../docs/usage/execution.rst:776
# c2b5cb4c4bde449d887431e2a6ee2a62
msgid "The first layer is a simple default or fallback password cache, :ref:`env.password <password>` (which may also be set at the command line via :option:`--password <-p>` or :option:`--initial-password-prompt <-I>`). This env var stores a single password which (if non-empty) will be tried in the event that the host-specific cache (see below) has no entry for the current :ref:`host string <host_string>`."
msgstr ""

#: ../../docs/usage/execution.rst:783
# d6b79504f8b4424c835d88116c05160e
msgid ":ref:`env.passwords <passwords>` (plural!) serves as a per-user/per-host cache, storing the most recently entered password for every unique user/host/port combination (**note** that you must include **all three values** if modifying the structure by hand - see the above link for details). Due to this cache, connections to multiple different users and/or hosts in the same session will only require a single password entry for each. (Previous versions of Fabric used only the single, default password cache and thus required password re-entry every time the previously entered password became invalid.)"
msgstr ""

#: ../../docs/usage/execution.rst:792
# b06ffe8ab3c94571b8a29d40b57a37a4
msgid "Depending on your configuration and the number of hosts your session will connect to, you may find setting either or both of these env vars to be useful. However, Fabric will automatically fill them in as necessary without any additional configuration."
msgstr ""

#: ../../docs/usage/execution.rst:797
# bdc8d17f8b484fd3a8d88a920e3767e0
msgid "Specifically, each time a password prompt is presented to the user, the value entered is used to update both the single default password cache, and the cache value for the current value of ``env.host_string``."
msgstr ""

#: ../../docs/usage/execution.rst:801
# 312ee374150e404f92124a138c57e58f
msgid "We highly recommend the use of SSH `key-based access <http://en.wikipedia.org/wiki/Public_key>`_ instead of relying on homogeneous password setups, as it's significantly more secure."
msgstr ""

#: ../../docs/usage/execution.rst:809
# d42a77c392874e7bbc7beff0dbe02773
msgid "Leveraging native SSH config files"
msgstr ""

#: ../../docs/usage/execution.rst:811
# b9baf404aeb84e3d8c17b76fc4aaa5d7
msgid "Command-line SSH clients (such as the one provided by `OpenSSH <http://openssh.org>`_) make use of a specific configuration format typically known as ``ssh_config``, and will read from a file in the platform-specific location ``$HOME/.ssh/config`` (or an arbitrary path given to :option:`--ssh-config-path`/:ref:`env.ssh_config_path <ssh-config-path>`.) This file allows specification of various SSH options such as default or per-host usernames, hostname aliases, and toggling other settings (such as whether to use :ref:`agent forwarding <forward-agent>`.)"
msgstr ""

#: ../../docs/usage/execution.rst:820
# 7d75867dd632468190393dbef901a8af
msgid "Fabric's SSH implementation allows loading a subset of these options from one's actual SSH config file, should it exist. This behavior is not enabled by default (in order to be backwards compatible) but may be turned on by setting :ref:`env.use_ssh_config <use-ssh-config>` to ``True`` at the top of your fabfile."
msgstr ""

#: ../../docs/usage/execution.rst:826
# 6a6535cd18d4489c847d954d9ec87ef0
msgid "If enabled, the following SSH config directives will be loaded and honored by Fabric:"
msgstr ""

#: ../../docs/usage/execution.rst:828
# a02b2e81329f4fe3926d1625763c5163
msgid "``User`` and ``Port`` will be used to fill in the appropriate connection parameters when not otherwise specified, in the following fashion:"
msgstr ""

#: ../../docs/usage/execution.rst:831
# 5f96b606fda04693b4ecaae525e843c2
msgid "Globally specified ``User``/``Port`` will be used in place of the current defaults (local username and 22, respectively) if the appropriate env vars are not set."
msgstr ""

#: ../../docs/usage/execution.rst:834
# 9100132aa5ee43fca731c55c5b8553bc
msgid "However, if :ref:`env.user <user>`/:ref:`env.port <port>` *are* set, they override global ``User``/``Port`` values."
msgstr ""

#: ../../docs/usage/execution.rst:836
# e72ad6158458415e9cebfddba651b184
msgid "User/port values in the host string itself (e.g. ``hostname:222``) will override everything, including any ``ssh_config`` values."
msgstr ""

#: ../../docs/usage/execution.rst:838
# b78da0c3b31f4e6084383870b0a3362a
msgid "``HostName`` can be used to replace the given hostname, just like with regular ``ssh``. So a ``Host foo`` entry specifying ``HostName example.com`` will allow you to give Fabric the hostname ``'foo'`` and have that expanded into ``'example.com'`` at connection time."
msgstr ""

#: ../../docs/usage/execution.rst:842
# 5a1e2c498e504b26848ad2f37b9efe0f
msgid "``IdentityFile`` will extend (not replace) :ref:`env.key_filename <key-filename>`."
msgstr ""

#: ../../docs/usage/execution.rst:844
# 1a8221034d894a859513edda9e0f7cee
msgid "``ForwardAgent`` will augment :ref:`env.forward_agent <forward-agent>` in an \"OR\" manner: if either is set to a positive value, agent forwarding will be enabled."
msgstr ""

#: ../../docs/usage/execution.rst:847
# 8b5472591af942abba5476af8c21e95a
msgid "``ProxyCommand`` will trigger use of a proxy command for host connections, just as with regular ``ssh``."
msgstr ""

#: ../../docs/usage/execution.rst:851
# e07903c9143846b6b22dd8ae4266913e
msgid "If all you want to do is bounce SSH traffic off a gateway, you may find :ref:`env.gateway <gateway>` to be a more efficient connection method (which will also honor more Fabric-level settings) than the typical ``ssh gatewayhost nc %h %p`` method of using ``ProxyCommand`` as a gateway."
msgstr ""

#: ../../docs/usage/execution.rst:857
# d24dd8f52dc948dda4c80c5ad5abec61
msgid "If your SSH config file contains ``ProxyCommand`` directives *and* you have set :ref:`env.gateway <gateway>` to a non-``None`` value, ``env.gateway`` will take precedence and the ``ProxyCommand`` will be ignored."
msgstr ""

#: ../../docs/usage/execution.rst:861
# 165062bf1ad44c138e3e1c7e35c6a5df
msgid "If one has a pre-created SSH config file, rationale states it will be easier for you to modify ``env.gateway`` (e.g. via `~fabric.context_managers.settings`) than to work around your conf file's contents entirely."
msgstr ""

