# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Jeff Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-31 11:06+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../usage/parallel.rst:3
# 5f6c456ed7bd46e0bd0095386d4b2b6f
msgid "Parallel execution"
msgstr ""

#: ../../usage/parallel.rst:9
# a4208e4e4cb54e42b7d1622556e48aa3
msgid "By default, Fabric executes all specified tasks **serially** (see :ref:`execution-strategy` for details.) This document describes Fabric's options for running tasks on multiple hosts in **parallel**, via per-task decorators and/or global command-line switches."
msgstr ""

#: ../../usage/parallel.rst:16
# 260c1ef7754a419789ad8d8512f83183
msgid "What it does"
msgstr ""

#: ../../usage/parallel.rst:18
# be893c2ccd3a498b95f9f4abe6e166ca
msgid "Because Fabric 1.x is not fully threadsafe (and because in general use, task functions do not typically interact with one another) this functionality is implemented via the Python `multiprocessing <http://docs.python.org/library/multiprocessing.html>`_ module. It creates one new process for each host and task combination, optionally using a (configurable) sliding window to prevent too many processes from running at the same time."
msgstr ""

#: ../../usage/parallel.rst:26
# d5d094892ba241c3b941abd8053d36b0
msgid "For example, imagine a scenario where you want to update Web application code on a number of Web servers, and then reload the servers once the code has been distributed everywhere (to allow for easier rollback if code updates fail.) One could implement this with the following fabfile::"
msgstr ""

#: ../../usage/parallel.rst:40
# 691531cb7922431d89e4de7d0a682eca
msgid "and execute it on a set of 3 servers, in serial, like so::"
msgstr ""

#: ../../usage/parallel.rst:44
# 2938fb329fb040caab70f045b55d955e
msgid "Normally, without any parallel execution options activated, Fabric would run in order:"
msgstr ""

#: ../../usage/parallel.rst:47
# fe1711b9f1bc4b2692b5557c7e0195b8
msgid "``update`` on ``web1``"
msgstr ""

#: ../../usage/parallel.rst:48
# 40296f384c6842eab2c1191f76322a53
msgid "``update`` on ``web2``"
msgstr ""

#: ../../usage/parallel.rst:49
# 4734d97ce0944ac6a064d946b5bfa6c3
msgid "``update`` on ``web3``"
msgstr ""

#: ../../usage/parallel.rst:50
# a05b38113d5641e3826afae07159fade
msgid "``reload`` on ``web1``"
msgstr ""

#: ../../usage/parallel.rst:51
# 004f776689584bb3807f99fb945f1d32
msgid "``reload`` on ``web2``"
msgstr ""

#: ../../usage/parallel.rst:52
# 9b79ccc22f11499fbf88a83423d299ab
msgid "``reload`` on ``web3``"
msgstr ""

#: ../../usage/parallel.rst:54
# ba60358eac0645b8a965ec2783e41aa5
msgid "With parallel execution activated (via :option:`-P` -- see below for details), this turns into:"
msgstr ""

#: ../../usage/parallel.rst:57
# 2400eaaf77ed4be18ae58f3990d05bb2
msgid "``update`` on ``web1``, ``web2``, and ``web3``"
msgstr ""

#: ../../usage/parallel.rst:58
# afb7a1a7e5f649fc8e229a99ea810647
msgid "``reload`` on ``web1``, ``web2``, and ``web3``"
msgstr ""

#: ../../usage/parallel.rst:60
# a30a0bb09c30440b9f948889451a8108
msgid "Hopefully the benefits of this are obvious -- if ``update`` took 5 seconds to run and ``reload`` took 2 seconds, serial execution takes (5+2)*3 = 21 seconds to run, while parallel execution takes only a third of the time, (5+2) = 7 seconds on average."
msgstr ""

#: ../../usage/parallel.rst:67
# 9757dc9e4a1046ef805e08b4f16fa17f
msgid "How to use it"
msgstr ""

#: ../../usage/parallel.rst:70
# ed5cf35a8a6944ed99c279c658ca35b8
msgid "Decorators"
msgstr ""

#: ../../usage/parallel.rst:72
# 79f7b31e4a7e48daa8be07afb780e103
msgid "Since the minimum \"unit\" that parallel execution affects is a task, the functionality may be enabled or disabled on a task-by-task basis using the `~fabric.decorators.parallel` and `~fabric.decorators.serial` decorators. For example, this fabfile::"
msgstr ""

#: ../../usage/parallel.rst:86
# d91e361afb7a4debb4c85470e217d643
msgid "when run in this manner::"
msgstr ""

#: ../../usage/parallel.rst:90
# 4f82519921844bb18a067bf5f1b50ccb
msgid "will result in the following execution sequence:"
msgstr ""

#: ../../usage/parallel.rst:92
# bec3a547f11043f985ca8079829cf2b4
msgid "``runs_in_parallel`` on ``host1``, ``host2``, and ``host3``"
msgstr ""

#: ../../usage/parallel.rst:93
# cdf619418dee45f48035334d40379e4e
msgid "``runs_serially`` on ``host1``"
msgstr ""

#: ../../usage/parallel.rst:94
# d19fa6f44fc24e7e9fc5c7df77afc65e
msgid "``runs_serially`` on ``host2``"
msgstr ""

#: ../../usage/parallel.rst:95
# 50612469f13c46fd982a75b5c9c94eb0
msgid "``runs_serially`` on ``host3``"
msgstr ""

#: ../../usage/parallel.rst:98
# 0f1ea7b0fd554131900edaeb507acd03
msgid "Command-line flags"
msgstr ""

#: ../../usage/parallel.rst:100
# 6ca1334104e442f7ab25b39205a5ca61
msgid "One may also force all tasks to run in parallel by using the command-line flag :option:`-P` or the env variable :ref:`env.parallel <env-parallel>`.  However, any task specifically wrapped with `~fabric.decorators.serial` will ignore this setting and continue to run serially."
msgstr ""

#: ../../usage/parallel.rst:105
# a067d0cf49fd4fc4a51f5228f52b61a4
msgid "For example, the following fabfile will result in the same execution sequence as the one above::"
msgstr ""

#: ../../usage/parallel.rst:117
# 77d9dae52904469f907c73397905085b
msgid "when invoked like so::"
msgstr ""

#: ../../usage/parallel.rst:121
# c90c3004d0954e61a5baf3b64f4b9498
msgid "As before, ``runs_in_parallel`` will run in parallel, and ``runs_serially`` in sequence."
msgstr ""

#: ../../usage/parallel.rst:126
# 86abf749b5634ca19cb014be86fd6902
msgid "Bubble size"
msgstr ""

#: ../../usage/parallel.rst:128
# 72976501863e4455b4351853f2456ed9
msgid "With large host lists, a user's local machine can get overwhelmed by running too many concurrent Fabric processes. Because of this, you may opt to use a moving bubble approach that limits Fabric to a specific number of concurrently active processes."
msgstr ""

#: ../../usage/parallel.rst:133
# 2b40e7647360489a842db36a3bcc1c58
msgid "By default, no bubble is used and all hosts are run in one concurrent pool. You can override this on a per-task level by specifying the ``pool_size`` keyword argument to `~fabric.decorators.parallel`, or globally via :option:`-z`."
msgstr ""

#: ../../usage/parallel.rst:137
# 41cb6ecd822d4f728bc899a0b88e8a0c
msgid "For example, to run on 5 hosts at a time::"
msgstr ""

#: ../../usage/parallel.rst:145
# ed8d56905d9a4b3696927f4129c9f586
msgid "Or skip the ``pool_size`` kwarg and instead::"
msgstr ""

#: ../../usage/parallel.rst:152
# f907e5c833034675a20bf7969022090b
msgid "Linewise vs bytewise output"
msgstr ""

#: ../../usage/parallel.rst:154
# 6798761877b145f184edffa54b133364
msgid "Fabric's default mode of printing to the terminal is byte-by-byte, in order to support :doc:`/usage/interactivity`. This often gives poor results when running in parallel mode, as the multiple processes may write to your terminal's standard out stream simultaneously."
msgstr ""

#: ../../usage/parallel.rst:159
# 97c919e9319d498eba676ff24ecb1e0b
msgid "To help offset this problem, Fabric's option for linewise output is automatically enabled whenever parallelism is active. This will cause you to lose most of the benefits outlined in the above link Fabric's remote interactivity features, but as those do not map well to parallel invocations, it's typically a fair trade."
msgstr ""

#: ../../usage/parallel.rst:165
# 3225db7a51f845fdb4190f5d8aff1303
msgid "There's no way to avoid the multiple processes mixing up on a line-by-line basis, but you will at least be able to tell them apart by the host-string line prefix."
msgstr ""

#: ../../usage/parallel.rst:170
# e3a22731c461484cb3832b00ce739275
msgid "Future versions will add improved logging support to make troubleshooting parallel runs easier."
msgstr ""

