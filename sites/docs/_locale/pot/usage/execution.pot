# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Jeff Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-31 11:06+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../usage/execution.rst:3
# f25e80fae77c497e9556467a18e078b8
msgid "Execution model"
msgstr ""

#: ../../usage/execution.rst:5
# 0a136c89ac3840cfa32fcb8cf6acb99b
msgid "If you've read the :doc:`../tutorial`, you should already be familiar with how Fabric operates in the base case (a single task on a single host.) However, in many situations you'll find yourself wanting to execute multiple tasks and/or on multiple hosts. Perhaps you want to split a big task into smaller reusable parts, or crawl a collection of servers looking for an old user to remove. Such a scenario requires specific rules for when and how tasks are executed."
msgstr ""

#: ../../usage/execution.rst:12
# 3500fe03836a478080b262c7f48ce767
msgid "This document explores Fabric's execution model, including the main execution loop, how to define host lists, how connections are made, and so forth."
msgstr ""

#: ../../usage/execution.rst:19
# 0c1df60aa01e42d6a86f07b13cab7f27
msgid "Execution strategy"
msgstr ""

#: ../../usage/execution.rst:21
# 061ce491cc4a420ba0302c6b4887bb1e
msgid "Fabric defaults to a single, serial execution method, though there is an alternative parallel mode available as of Fabric 1.3 (see :doc:`/usage/parallel`). This default behavior is as follows:"
msgstr ""

#: ../../usage/execution.rst:25
# ecf5b402ed79452694865e8fae6b6e01
msgid "A list of tasks is created. Currently this list is simply the arguments given to :doc:`fab <fab>`, preserving the order given."
msgstr ""

#: ../../usage/execution.rst:27
# 13a5278e36114117a6fda086fea43b12
msgid "For each task, a task-specific host list is generated from various sources (see :ref:`host-lists` below for details.)"
msgstr ""

#: ../../usage/execution.rst:29
# 9213089f3612414895952ad63670874c
msgid "The task list is walked through in order, and each task is run once per host in its host list."
msgstr ""

#: ../../usage/execution.rst:31
# 513cae04386344ac9016e336828f8609
msgid "Tasks with no hosts in their host list are considered local-only, and will always run once and only once."
msgstr ""

#: ../../usage/execution.rst:34
# 6a7a7b5a0af64078904aaab7e7964412
msgid "Thus, given the following fabfile::"
msgstr ""

#: ../../usage/execution.rst:46
# d7101c48d6b7439fa9219bd4b15b9e77
msgid "and the following invocation::"
msgstr ""

#: ../../usage/execution.rst:50
# b9e20733a58741d6998dc3a920e5f529
msgid "you will see that Fabric performs the following:"
msgstr ""

#: ../../usage/execution.rst:52
# 972013bedf7b48869558367be571dcf3
msgid "``taskA`` executed on ``host1``"
msgstr ""

#: ../../usage/execution.rst:53
# ba09462c879f4bb7bb42bcf173496d62
msgid "``taskA`` executed on ``host2``"
msgstr ""

#: ../../usage/execution.rst:54
# dc727793f3dd41fd8ef5d84331531bba
msgid "``taskB`` executed on ``host1``"
msgstr ""

#: ../../usage/execution.rst:55
# 2bb09c1340b642198bdcc639e7272aec
msgid "``taskB`` executed on ``host2``"
msgstr ""

#: ../../usage/execution.rst:57
# 52a92124362f4ff3a18911e23fece385
msgid "While this approach is simplistic, it allows for a straightforward composition of task functions, and (unlike tools which push the multi-host functionality down to the individual function calls) enables shell script-like logic where you may introspect the output or return code of a given command and decide what to do next."
msgstr ""

#: ../../usage/execution.rst:65
# 837aa087b5bd4198a6aa89a1d43ff20c
msgid "Defining tasks"
msgstr ""

#: ../../usage/execution.rst:67
# 1889354d37bf4f978915aec41e0ba74c
msgid "For details on what constitutes a Fabric task and how to organize them, please see :doc:`/usage/tasks`."
msgstr ""

#: ../../usage/execution.rst:71
# 717ae620ea3042b7a89047e802e2c608
msgid "Defining host lists"
msgstr ""

#: ../../usage/execution.rst:73
# 36ea020d11ae4cccb628454a60340fd0
msgid "Unless you're using Fabric as a simple build system (which is possible, but not the primary use-case) having tasks won't do you any good without the ability to specify remote hosts on which to execute them. There are a number of ways to do so, with scopes varying from global to per-task, and it's possible mix and match as needed."
msgstr ""

#: ../../usage/execution.rst:82
# 595997679b604ab7bbe8fbea140819e1
msgid "Hosts"
msgstr ""

#: ../../usage/execution.rst:84
# e9161b905a724ffdae47ca8e7caccc24
msgid "Hosts, in this context, refer to what are also called \"host strings\": Python strings specifying a username, hostname and port combination, in the form of ``username@hostname:port``. User and/or port (and the associated ``@`` or ``:``) may be omitted, and will be filled by the executing user's local username, and/or port 22, respectively. Thus, ``admin@foo.com:222``, ``deploy@website`` and ``nameserver1`` could all be valid host strings."
msgstr ""

#: ../../usage/execution.rst:91
# 80296900ecb642b1a3661be2e7f9ae4f
msgid "IPv6 address notation is also supported, for example ``::1``, ``[::1]:1222``, ``user@2001:db8::1`` or ``user@[2001:db8::1]:1222``. Square brackets are necessary only to separate the address from the port number. If no port number is used, the brackets are optional. Also if host string is specified via command-line argument, it may be necessary to escape brackets in some shells."
msgstr ""

#: ../../usage/execution.rst:99
# bc5767335cc54a8798f57be15b7d44e7
msgid "The user/hostname split occurs at the last ``@`` found, so e.g. email address usernames are valid and will be parsed correctly."
msgstr ""

#: ../../usage/execution.rst:102
# 41d8d87debde407aa9b42140125ede76
msgid "During execution, Fabric normalizes the host strings given and then stores each part (username/hostname/port) in the environment dictionary, for both its use and for tasks to reference if the need arises. See :doc:`env` for details."
msgstr ""

#: ../../usage/execution.rst:109
# 36cdbad54d4847bc9b711eafc32d5926
msgid "Roles"
msgstr ""

#: ../../usage/execution.rst:111
# ab1c199c00d74e6ca0b9f7085d776fd2
msgid "Host strings map to single hosts, but sometimes it's useful to arrange hosts in groups. Perhaps you have a number of Web servers behind a load balancer and want to update all of them, or want to run a task on \"all client servers\". Roles provide a way of defining strings which correspond to lists of host strings, and can then be specified instead of writing out the entire list every time."
msgstr ""

#: ../../usage/execution.rst:118
# 3e7f6c0b492f454d9b4f8d3705ae9309
msgid "This mapping is defined as a dictionary, ``env.roledefs``, which must be modified by a fabfile in order to be used. A simple example::"
msgstr ""

#: ../../usage/execution.rst:125
# 433cf7b76bb34f398e52f21f88f87599
msgid "Since ``env.roledefs`` is naturally empty by default, you may also opt to re-assign to it without fear of losing any information (provided you aren't loading other fabfiles which also modify it, of course)::"
msgstr ""

#: ../../usage/execution.rst:136
# 46668425604e4a69ad895f7947ee5d42
msgid "Role definitions are not necessary configuration of hosts only, but could hold other role specific settings of your choice. This is achieved by defining the roles as dicts and host strings under a ``hosts`` key::"
msgstr ""

#: ../../usage/execution.rst:153
# fadde30aa67247cb98640f11a2f7b957
msgid "In addition to list/iterable object types, the values in ``env.roledefs`` (or value of ``hosts`` key in dict style definition) may be callables, and will thus be called when looked up when tasks are run instead of at module load time. (For example, you could connect to remote servers to obtain role definitions, and not worry about causing delays at fabfile load time when calling e.g. ``fab --list``.)"
msgstr ""

#: ../../usage/execution.rst:160
# 9f129dc555d64fffbc5a83ab66b62bf2
msgid "Use of roles is not required in any way -- it's simply a convenience in situations where you have common groupings of servers."
msgstr ""

#: ../../usage/execution.rst:163
# 38f00a70b0224f83809a55539f658839
msgid "Added ability to use callables as ``roledefs`` values."
msgstr ""

#: ../../usage/execution.rst:169
# a38921855aa947f9874c26aa40fe9349
msgid "How host lists are constructed"
msgstr ""

#: ../../usage/execution.rst:171
# e91c30663d894e849c27a0b5f8def4c7
msgid "There are a number of ways to specify host lists, either globally or per-task, and generally these methods override one another instead of merging together (though this may change in future releases.) Each such method is typically split into two parts, one for hosts and one for roles."
msgstr ""

#: ../../usage/execution.rst:177
# a5b24c721ecf4ce18b9e14693d406814
msgid "Globally, via ``env``"
msgstr ""

#: ../../usage/execution.rst:179
# 1708a97050e54f1a8200c31b498c4ec2
msgid "The most common method of setting hosts or roles is by modifying two key-value pairs in the environment dictionary, :doc:`env <env>`: ``hosts`` and ``roles``. The value of these variables is checked at runtime, while constructing each tasks's host list."
msgstr ""

#: ../../usage/execution.rst:184
# 4cdbf7b420f64b80986862915035aa7d
msgid "Thus, they may be set at module level, which will take effect when the fabfile is imported::"
msgstr ""

#: ../../usage/execution.rst:194
# 55853cadc11e40e0ba62c85723984b29
msgid "Such a fabfile, run simply as ``fab mytask``, will run ``mytask`` on ``host1`` followed by ``host2``."
msgstr ""

#: ../../usage/execution.rst:197
# d76dba1e244745b894835be177c7cfa1
msgid "Since the env vars are checked for *each* task, this means that if you have the need, you can actually modify ``env`` in one task and it will affect all following tasks::"
msgstr ""

#: ../../usage/execution.rst:209
# 16bc6da343b341fe8f9b85d5abcbe4d8
msgid "When run as ``fab set_hosts mytask``, ``set_hosts`` is a \"local\" task -- its own host list is empty -- but ``mytask`` will again run on the two hosts given."
msgstr ""

#: ../../usage/execution.rst:214
# 52dba7e66fc34f8cb860fbd8c7fa73ff
msgid "This technique used to be a common way of creating fake \"roles\", but is less necessary now that roles are fully implemented. It may still be useful in some situations, however."
msgstr ""

#: ../../usage/execution.rst:218
# 34341f1554dc4b6c849f5eb8789031c7
msgid "Alongside ``env.hosts`` is ``env.roles`` (not to be confused with ``env.roledefs``!) which, if given, will be taken as a list of role names to look up in ``env.roledefs``."
msgstr ""

#: ../../usage/execution.rst:223
# 20af474b3eb145dc9fd0e466c6c8e061
msgid "Globally, via the command line"
msgstr ""

#: ../../usage/execution.rst:225
# 678963028785465eb6068fb01d9d60a6
msgid "In addition to modifying ``env.hosts``, ``env.roles``, and ``env.exclude_hosts`` at the module level, you may define them by passing comma-separated string arguments to the command-line switches :option:`--hosts/-H <-H>` and :option:`--roles/-R <-R>`, e.g.::"
msgstr ""

#: ../../usage/execution.rst:232
# f9af39873d55403193231be1cb969202
msgid "Such an invocation is directly equivalent to ``env.hosts = ['host1', 'host2']`` -- the argument parser knows to look for these arguments and will modify ``env`` at parse time."
msgstr ""

#: ../../usage/execution.rst:238
# 98e1599645de48c482a51b679b09d00b
msgid "It's possible, and in fact common, to use these switches to set only a single host or role. Fabric simply calls ``string.split(',')`` on the given string, so a string with no commas turns into a single-item list."
msgstr ""

#: ../../usage/execution.rst:242
# 5be945f03c7d463fb6105e8f600faf27
msgid "It is important to know that these command-line switches are interpreted **before** your fabfile is loaded: any reassignment to ``env.hosts`` or ``env.roles`` in your fabfile will overwrite them."
msgstr ""

#: ../../usage/execution.rst:246
# 06caa3dc50fb45cda71cc3951e869b81
msgid "If you wish to nondestructively merge the command-line hosts with your fabfile-defined ones, make sure your fabfile uses ``env.hosts.extend()`` instead::"
msgstr ""

#: ../../usage/execution.rst:257
# bfbf40e2f690483880f19991c2ede008
msgid "When this fabfile is run as ``fab -H host1,host2 mytask``, ``env.hosts`` will then contain ``['host1', 'host2', 'host3', 'host4']`` at the time that ``mytask`` is executed."
msgstr ""

#: ../../usage/execution.rst:263
# 2eb8111e74604016a443d8c3fb5227a0
msgid "``env.hosts`` is simply a Python list object -- so you may use ``env.hosts.append()`` or any other such method you wish."
msgstr ""

#: ../../usage/execution.rst:269
# d6909c5a81d143ed928956561f239c3b
msgid "Per-task, via the command line"
msgstr ""

#: ../../usage/execution.rst:271
# 7ad71460cfca4a89a1cbe9b498578bfd
msgid "Globally setting host lists only works if you want all your tasks to run on the same host list all the time. This isn't always true, so Fabric provides a few ways to be more granular and specify host lists which apply to a single task only. The first of these uses task arguments."
msgstr ""

#: ../../usage/execution.rst:276
# be229f5d1952485094731f86800e25de
msgid "As outlined in :doc:`fab`, it's possible to specify per-task arguments via a special command-line syntax. In addition to naming actual arguments to your task function, this may be used to set the ``host``, ``hosts``, ``role`` or ``roles`` \"arguments\", which are interpreted by Fabric when building host lists (and removed from the arguments passed to the task itself.)"
msgstr ""

#: ../../usage/execution.rst:284
# 3bebb143b1724413a26484f63b462f72
msgid "Since commas are already used to separate task arguments from one another, semicolons must be used in the ``hosts`` or ``roles`` arguments to delineate individual host strings or role names. Furthermore, the argument must be quoted to prevent your shell from interpreting the semicolons."
msgstr ""

#: ../../usage/execution.rst:289
# ff10515e0463466dbd92110e0c5944a5
msgid "Take the below fabfile, which is the same one we've been using, but which doesn't define any host info at all::"
msgstr ""

#: ../../usage/execution.rst:297
# 8982918dbb364a6a9a36ebaa32cc8f64
msgid "To specify per-task hosts for ``mytask``, execute it like so::"
msgstr ""

#: ../../usage/execution.rst:301
# dd5567f38ea6469da0604eceae0ad1f9
msgid "This will override any other host list and ensure ``mytask`` always runs on just those two hosts."
msgstr ""

#: ../../usage/execution.rst:305
# 73dd4a59d7634965b11f30d9641286e6
msgid "Per-task, via decorators"
msgstr ""

#: ../../usage/execution.rst:307
# a5872bd35c1840ef8e10a6adc8d85e70
msgid "If a given task should always run on a predetermined host list, you may wish to specify this in your fabfile itself. This can be done by decorating a task function with the `~fabric.decorators.hosts` or `~fabric.decorators.roles` decorators. These decorators take a variable argument list, like so::"
msgstr ""

#: ../../usage/execution.rst:318
# 8672c6aeb1e8429092dd4d00a665ca3f
msgid "They will also take an single iterable argument, e.g.::"
msgstr ""

#: ../../usage/execution.rst:325
# 8cc404e5a6ab44a289d3908cf618f852
msgid "When used, these decorators override any checks of ``env`` for that particular task's host list (though ``env`` is not modified in any way -- it is simply ignored.) Thus, even if the above fabfile had defined ``env.hosts`` or the call to :doc:`fab <fab>` uses :option:`--hosts/-H <-H>`, ``mytask`` would still run on a host list of ``['host1', 'host2']``."
msgstr ""

#: ../../usage/execution.rst:331
# b65e6775d60c468099362a3c6270a93b
msgid "However, decorator host lists do **not** override per-task command-line arguments, as given in the previous section."
msgstr ""

#: ../../usage/execution.rst:335
# 7e93da5aa4d246ec8ca74edd80105ec8
msgid "Order of precedence"
msgstr ""

#: ../../usage/execution.rst:337
# c8fdac677c974d8db11f00111e95d3ac
msgid "We've been pointing out which methods of setting host lists trump the others, as we've gone along. However, to make things clearer, here's a quick breakdown:"
msgstr ""

#: ../../usage/execution.rst:340
# e545953e127f4ee99fd69178c4575894
msgid "Per-task, command-line host lists (``fab mytask:host=host1``) override absolutely everything else."
msgstr ""

#: ../../usage/execution.rst:342
# 0de2074a6f4249da996f875c5493c943
msgid "Per-task, decorator-specified host lists (``@hosts('host1')``) override the ``env`` variables."
msgstr ""

#: ../../usage/execution.rst:344
# b996a433ac054e6ca1855cc128cdc01d
msgid "Globally specified host lists set in the fabfile (``env.hosts = ['host1']``) *can* override such lists set on the command-line, but only if you're not careful (or want them to.)"
msgstr ""

#: ../../usage/execution.rst:347
# 3496099ce8054b508de72ff2de4bfd3b
msgid "Globally specified host lists set on the command-line (``--hosts=host1``) will initialize the ``env`` variables, but that's it."
msgstr ""

#: ../../usage/execution.rst:350
# d2e8efde1e8f4b94b8782e1d48f62c0e
msgid "This logic may change slightly in the future to be more consistent (e.g. having :option:`--hosts <-H>` somehow take precedence over ``env.hosts`` in the same way that command-line per-task lists trump in-code ones) but only in a backwards-incompatible release."
msgstr ""

#: ../../usage/execution.rst:358
# d4674e7c3cd64d25a016d1f7ff5d2bb1
msgid "Combining host lists"
msgstr ""

#: ../../usage/execution.rst:360
# 9ad029bc40324867bb2bddbb80970797
msgid "There is no \"unionizing\" of hosts between the various sources mentioned in :ref:`host-lists`. If ``env.hosts`` is set to ``['host1', 'host2', 'host3']``, and a per-function (e.g.  via `~fabric.decorators.hosts`) host list is set to just ``['host2', 'host3']``, that function will **not** execute on ``host1``, because the per-task decorator host list takes precedence."
msgstr ""

#: ../../usage/execution.rst:366
# a29c947c9f4a4fc9b42059275f503c8c
msgid "However, for each given source, if both roles **and** hosts are specified, they will be merged together into a single host list. Take, for example, this fabfile where both of the decorators are used::"
msgstr ""

#: ../../usage/execution.rst:379
# cc16846bbf274105bdb574cdb2057253
msgid "Assuming no command-line hosts or roles are given when ``mytask`` is executed, this fabfile will call ``mytask`` on a host list of ``['a', 'b', 'c']`` -- the union of ``role1`` and the contents of the `~fabric.decorators.hosts` call."
msgstr ""

#: ../../usage/execution.rst:387
# 3c4d8358aef245089bc7929ea98a7b53
msgid "Host list deduplication"
msgstr ""

#: ../../usage/execution.rst:389
# e5fe7b5854ab4615974067001d2e9e4b
msgid "By default, to support :ref:`combining-host-lists`, Fabric deduplicates the final host list so any given host string is only present once. However, this prevents explicit/intentional running of a task multiple times on the same target host, which is sometimes useful."
msgstr ""

#: ../../usage/execution.rst:394
# c65ac406635d49f291132ac99c632ffc
msgid "To turn off deduplication, set :ref:`env.dedupe_hosts <dedupe_hosts>` to ``False``."
msgstr ""

#: ../../usage/execution.rst:401
# fb13e04dee0949ce87e73752b37eec06
msgid "Excluding specific hosts"
msgstr ""

#: ../../usage/execution.rst:403
# c11f6471c3c74f73a4162d76402836bb
msgid "At times, it is useful to exclude one or more specific hosts, e.g. to override a few bad or otherwise undesirable hosts which are pulled in from a role or an autogenerated host list."
msgstr ""

#: ../../usage/execution.rst:408
# 7598bb8d9b4b478a861e4a6f711b3f72
msgid "As of Fabric 1.4, you may wish to use :ref:`skip-bad-hosts` instead, which automatically skips over any unreachable hosts."
msgstr ""

#: ../../usage/execution.rst:411
# 1b08750eafa74985ab3fd3ab281344a0
msgid "Host exclusion may be accomplished globally with :option:`--exclude-hosts/-x <-x>`::"
msgstr ""

#: ../../usage/execution.rst:416
# dd4eefb13d32449fab741d014347b8ad
msgid "If ``myrole`` was defined as ``['host1', 'host2', ..., 'host15']``, the above invocation would run with an effective host list of ``['host1', 'host3', 'host4', 'host6', ..., 'host15']``."
msgstr ""

#: ../../usage/execution.rst:421
# 9dfce62f31814e19b0353c0ef20b13d7
msgid "Using this option does not modify ``env.hosts`` -- it only causes the main execution loop to skip the requested hosts."
msgstr ""

#: ../../usage/execution.rst:424
# 9e9101ce3e794a1a87ea8b402873592f
msgid "Exclusions may be specified per-task by using an extra ``exclude_hosts`` kwarg, which is implemented similarly to the abovementioned ``hosts`` and ``roles`` per-task kwargs, in that it is stripped from the actual task invocation. This example would have the same result as the global exclude above::"
msgstr ""

#: ../../usage/execution.rst:431
# 550b0917676b419a9afc900ac325a8bd
msgid "Note that the host list is semicolon-separated, just as with the ``hosts`` per-task argument."
msgstr ""

#: ../../usage/execution.rst:435
# edecec72c56848e19380af338ad7b91b
msgid "Combining exclusions"
msgstr ""

#: ../../usage/execution.rst:437
# 471b9d52c2a8410bbb2ea25a2dcce037
msgid "Host exclusion lists, like host lists themselves, are not merged together across the different \"levels\" they can be declared in. For example, a global ``-x`` option will not affect a per-task host list set with a decorator or keyword argument, nor will per-task ``exclude_hosts`` keyword arguments affect a global ``-H`` list."
msgstr ""

#: ../../usage/execution.rst:443
# d36538e0d8d346e58aca26ff9b1db358
msgid "There is one minor exception to this rule, namely that CLI-level keyword arguments (``mytask:exclude_hosts=x,y``) **will** be taken into account when examining host lists set via ``@hosts`` or ``@roles``. Thus a task function decorated with ``@hosts('host1', 'host2')`` executed as ``fab taskname:exclude_hosts=host2`` will only run on ``host1``."
msgstr ""

#: ../../usage/execution.rst:449
# 964427eb8288404aa0ba805babc3e01f
msgid "As with the host list merging, this functionality is currently limited (partly to keep the implementation simple) and may be expanded in future releases."
msgstr ""

#: ../../usage/execution.rst:456
# bb772fddeda84b76a093237cd2288aa5
msgid "Intelligently executing tasks with ``execute``"
msgstr ""

#: ../../usage/execution.rst:460
# 5bc28d2a1ccb4fb5b609a6690b7d3602
msgid "Most of the information here involves \"top level\" tasks executed via :doc:`fab <fab>`, such as the first example where we called ``fab taskA taskB``. However, it's often convenient to wrap up multi-task invocations like this into their own, \"meta\" tasks."
msgstr ""

#: ../../usage/execution.rst:465
# e1e81678d24b4cca8e057cc767216673
msgid "Prior to Fabric 1.3, this had to be done by hand, as outlined in :doc:`/usage/library`. Fabric's design eschews magical behavior, so simply *calling* a task function does **not** take into account decorators such as `~fabric.decorators.roles`."
msgstr ""

#: ../../usage/execution.rst:470
# 4e20a993357c438e8949e93560e63e5d
msgid "New in Fabric 1.3 is the `~fabric.tasks.execute` helper function, which takes a task object or name as its first argument. Using it is effectively the same as calling the given task from the command line: all the rules given above in :ref:`host-lists` apply. (The ``hosts`` and ``roles`` keyword arguments to `~fabric.tasks.execute` are analogous to :ref:`CLI per-task arguments <hosts-per-task-cli>`, including how they override all other host/role-setting methods.)"
msgstr ""

#: ../../usage/execution.rst:478
# 86278a18497449f18e395c7c94bf071e
msgid "As an example, here's a fabfile defining two stand-alone tasks for deploying a Web application::"
msgstr ""

#: ../../usage/execution.rst:498
# 1b04948e6b4c4f0eb1e2c0e6adcd9e56
msgid "In Fabric <=1.2, the only way to ensure that ``migrate`` runs on the DB servers and that ``update`` runs on the Web servers (short of manual ``env.host_string`` manipulation) was to call both as top level tasks::"
msgstr ""

#: ../../usage/execution.rst:504
# 82ed65c879ec40ae93968dae7d49217b
msgid "Fabric >=1.3 can use `~fabric.tasks.execute` to set up a meta-task. Update the ``import`` line like so::"
msgstr ""

#: ../../usage/execution.rst:509
# d93bb7fc82174f9eb6b0c4f0c81fcf58
msgid "and append this to the bottom of the file::"
msgstr ""

#: ../../usage/execution.rst:515
# 389328215d4d4fa5b844cca5a3c723ee
msgid "That's all there is to it; the `~fabric.decorators.roles` decorators will be honored as expected, resulting in the following execution sequence:"
msgstr ""

#: ../../usage/execution.rst:517
# 7b035d0e08b4493b97b6df22b43c7905
msgid "`migrate` on `db1`"
msgstr ""

#: ../../usage/execution.rst:518
# a6e6364cbc4240bcbb5ded7c316e718d
msgid "`migrate` on `db2`"
msgstr ""

#: ../../usage/execution.rst:519
# af393d6ddad94359899cc2a9c5b6d24f
msgid "`update` on `web1`"
msgstr ""

#: ../../usage/execution.rst:520
# 5ff3558cc6a0433fa952cfd0a1cfc099
msgid "`update` on `web2`"
msgstr ""

#: ../../usage/execution.rst:521
# 7e1e5711c18b41cbab869e79014db1f1
msgid "`update` on `web3`"
msgstr ""

#: ../../usage/execution.rst:524
# 3410272a5c33402cbd3fd6f3bcd44288
msgid "This technique works because tasks that themselves have no host list (this includes the global host list settings) only run one time. If used inside a \"regular\" task that is going to run on multiple hosts, calls to `~fabric.tasks.execute` will also run multiple times, resulting in multiplicative numbers of subtask calls -- be careful!"
msgstr ""

#: ../../usage/execution.rst:530
# 4e8f29ba81884bfd941c7fbc57303f01
msgid "If you would like your `execute` calls to only be called once, you may use the `~fabric.decorators.runs_once` decorator."
msgstr ""

#: ../../usage/execution.rst:533
# d8e41fe49c6b450c97143ccc90b62e67
msgid "`~fabric.tasks.execute`, `~fabric.decorators.runs_once`"
msgstr ""

#: ../../usage/execution.rst:539
# fd0924906e4b48f1997fb8f9069357da
msgid "Leveraging ``execute`` to access multi-host results"
msgstr ""

#: ../../usage/execution.rst:541
# f07762c5e08d49bcb49d2862c8e00d40
msgid "In nontrivial Fabric runs, especially parallel ones, you may want to gather up a bunch of per-host result values at the end - e.g. to present a summary table, perform calculations, etc."
msgstr ""

#: ../../usage/execution.rst:545
# 7ce40aed0e744f72a700a7cc4b87b4ae
msgid "It's not possible to do this in Fabric's default \"naive\" mode (one where you rely on Fabric looping over host lists on your behalf), but with `.execute` it's pretty easy. Simply switch from calling the actual work-bearing task, to calling a \"meta\" task which takes control of execution with `.execute`::"
msgstr ""

#: ../../usage/execution.rst:562
# aca5e803d9d54cdb9f012e0f25659be8
msgid "In the above, ``workhorse`` can do any Fabric stuff at all -- it's literally your old \"naive\" task -- except that it needs to return something useful."
msgstr ""

#: ../../usage/execution.rst:565
# 64fdd2bd9fbc4b1db6ed6d1ed40c2008
msgid "``go`` is your new entry point (to be invoked as ``fab go``, or whatnot) and its job is to take the ``results`` dictionary from the `.execute` call and do whatever you need with it. Check the API docs for details on the structure of that return value."
msgstr ""

#: ../../usage/execution.rst:574
# 2608535efb954aa1a8d4fbec77ec0af7
msgid "Using ``execute`` with dynamically-set host lists"
msgstr ""

#: ../../usage/execution.rst:576
# 3cde81c39b034ad58fa2f1bd61fc1b15
msgid "A common intermediate-to-advanced use case for Fabric is to parameterize lookup of one's target host list at runtime (when use of :ref:`execution-roles` does not suffice). ``execute`` can make this extremely simple, like so::"
msgstr ""

#: ../../usage/execution.rst:601
# 7ce67f6436b24e108be4d3b7cb2424f0
msgid "For example, if ``external_datastore`` was a simplistic \"look up hosts by tag in a database\" service, and you wanted to run a task on all hosts tagged as being related to your application stack, you might call the above like this::"
msgstr ""

#: ../../usage/execution.rst:607
# ec300dec82cf4295b0ab0744e88c0e63
msgid "But wait! A data migration has gone awry on the DB servers. Let's fix up our migration code in our source repo, and deploy just the DB boxes again::"
msgstr ""

#: ../../usage/execution.rst:612
# 197163f69bda497281e5e165ccbd3a5d
msgid "This use case looks similar to Fabric's roles, but has much more potential, and is by no means limited to a single argument. Define the task however you wish, query your external data store in whatever way you need -- it's just Python."
msgstr ""

#: ../../usage/execution.rst:617
# 2fecdcb9dc0a42d390bbc70a43cb88d4
msgid "The alternate approach"
msgstr ""

#: ../../usage/execution.rst:619
# 287050382c9349beaf3345fa26b65be0
msgid "Similar to the above, but using ``fab``'s ability to call multiple tasks in succession instead of an explicit ``execute`` call, is to mutate :ref:`env.hosts <hosts>` in a host-list lookup task and then call ``do_work`` in the same session::"
msgstr ""

#: ../../usage/execution.rst:639
# e3878b6a31ad4697887e8f55813cf50b
msgid "Then invoke like so::"
msgstr ""

#: ../../usage/execution.rst:643
# 6fc207d305ef4be5a1149e932a08aa5a
msgid "One benefit of this approach over the previous one is that you can replace ``do_work`` with any other \"workhorse\" task::"
msgstr ""

#: ../../usage/execution.rst:654
# ced88c1037aa443dafa6e1618ebbaa9c
msgid "Failure handling"
msgstr ""

#: ../../usage/execution.rst:656
# b702175e0e28457286ce73308c04329a
msgid "Once the task list has been constructed, Fabric will start executing them as outlined in :ref:`execution-strategy`, until all tasks have been run on the entirety of their host lists. However, Fabric defaults to a \"fail-fast\" behavior pattern: if anything goes wrong, such as a remote program returning a nonzero return value or your fabfile's Python code encountering an exception, execution will halt immediately."
msgstr ""

#: ../../usage/execution.rst:663
# 056e3ef9c8ae4273b45fedc1835ead43
msgid "This is typically the desired behavior, but there are many exceptions to the rule, so Fabric provides ``env.warn_only``, a Boolean setting. It defaults to ``False``, meaning an error condition will result in the program aborting immediately. However, if ``env.warn_only`` is set to ``True`` at the time of failure -- with, say, the `~fabric.context_managers.settings` context manager -- Fabric will emit a warning message but continue executing."
msgstr ""

#: ../../usage/execution.rst:674
# e0bb9ad877b24cdc9c474257029c4b15
msgid "Connections"
msgstr ""

#: ../../usage/execution.rst:676
# 0bc173c87d12430faa8c2c7ffe7ace4b
msgid "``fab`` itself doesn't actually make any connections to remote hosts. Instead, it simply ensures that for each distinct run of a task on one of its hosts, the env var ``env.host_string`` is set to the right value. Users wanting to leverage Fabric as a library may do so manually to achieve similar effects (though as of Fabric 1.3, using `~fabric.tasks.execute` is preferred and more powerful.)"
msgstr ""

#: ../../usage/execution.rst:683
# 827c5472f00e4ffdbb2df100b1eaa768
msgid "``env.host_string`` is (as the name implies) the \"current\" host string, and is what Fabric uses to determine what connections to make (or re-use) when network-aware functions are run. Operations like `~fabric.operations.run` or `~fabric.operations.put` use ``env.host_string`` as a lookup key in a shared dictionary which maps host strings to SSH connection objects."
msgstr ""

#: ../../usage/execution.rst:691
# fd4506a7f19d424aa6dd40e8798d6f1b
msgid "The connections dictionary (currently located at ``fabric.state.connections``) acts as a cache, opting to return previously created connections if possible in order to save some overhead, and creating new ones otherwise."
msgstr ""

#: ../../usage/execution.rst:697
# 0e2d6575c4db489fb60ae1b553492272
msgid "Lazy connections"
msgstr ""

#: ../../usage/execution.rst:699
# 95adfa44b1e94c08a2757fed30f86e8c
msgid "Because connections are driven by the individual operations, Fabric will not actually make connections until they're necessary. Take for example this task which does some local housekeeping prior to interacting with the remote server::"
msgstr ""

#: ../../usage/execution.rst:714
# 7d648f82083b41c29c7c5794d2558930
msgid "What happens, connection-wise, is as follows:"
msgstr ""

#: ../../usage/execution.rst:716
# 79c35552378144af91ef455aa0b07275
msgid "The two `~fabric.operations.local` calls will run without making any network connections whatsoever;"
msgstr ""

#: ../../usage/execution.rst:718
# dcbd6b79f3224a45b7d77d7f56fae6ed
msgid "`~fabric.operations.put` asks the connection cache for a connection to ``host1``;"
msgstr ""

#: ../../usage/execution.rst:720
# 5bf58ce7a08742a5ade9dff18b9f608c
msgid "The connection cache fails to find an existing connection for that host string, and so creates a new SSH connection, returning it to `~fabric.operations.put`;"
msgstr ""

#: ../../usage/execution.rst:723
# 446979f36efc4ed0a86d43c134b668a9
msgid "`~fabric.operations.put` uploads the file through that connection;"
msgstr ""

#: ../../usage/execution.rst:724
# 09581248f3114224a79ad3783ebf37bc
msgid "Finally, the `~fabric.operations.run` call asks the cache for a connection to that same host string, and is given the existing, cached connection for its own use."
msgstr ""

#: ../../usage/execution.rst:728
# 5c865faeb5df432cac5238c6daf7016b
msgid "Extrapolating from this, you can also see that tasks which don't use any network-borne operations will never actually initiate any connections (though they will still be run once for each host in their host list, if any.)"
msgstr ""

#: ../../usage/execution.rst:733
# 0f4c2ecd69854bebaf5d18847b1e244a
msgid "Closing connections"
msgstr ""

#: ../../usage/execution.rst:735
# bd69ce0e902b4c65a4cf03a581552623
msgid "Fabric's connection cache never closes connections itself -- it leaves this up to whatever is using it. The :doc:`fab <fab>` tool does this bookkeeping for you: it iterates over all open connections and closes them just before it exits (regardless of whether the tasks failed or not.)"
msgstr ""

#: ../../usage/execution.rst:740
# ebc17cc5a0fc46638dbe57e0ecde385d
msgid "Library users will need to ensure they explicitly close all open connections before their program exits. This can be accomplished by calling `~fabric.network.disconnect_all` at the end of your script."
msgstr ""

#: ../../usage/execution.rst:745
# 129a0ace1b5b41ccb09e84cd52b86b10
msgid "`~fabric.network.disconnect_all` may be moved to a more public location in the future; we're still working on making the library aspects of Fabric more solidified and organized."
msgstr ""

#: ../../usage/execution.rst:750
# bdfe47ab8dd848c3889d3d9168cbc68c
msgid "Multiple connection attempts and skipping bad hosts"
msgstr ""

#: ../../usage/execution.rst:752
# 81ed8c501875425abd5c83cc89f13d29
msgid "As of Fabric 1.4, multiple attempts may be made to connect to remote servers before aborting with an error: Fabric will try connecting :ref:`env.connection_attempts <connection-attempts>` times before giving up, with a timeout of :ref:`env.timeout <timeout>` seconds each time. (These currently default to 1 try and 10 seconds, to match previous behavior, but they may be safely changed to whatever you need.)"
msgstr ""

#: ../../usage/execution.rst:759
# 5504fb640c38494aacf3a8186c138154
msgid "Furthermore, even total failure to connect to a server is no longer an absolute hard stop: set :ref:`env.skip_bad_hosts <skip-bad-hosts>` to ``True`` and in most situations (typically initial connections) Fabric will simply warn and continue, instead of aborting."
msgstr ""

#: ../../usage/execution.rst:769
# 0b37c336f50e40c2ab7116bfe8751197
msgid "Password management"
msgstr ""

#: ../../usage/execution.rst:771
# 05567bc72dbb4ba8911b10a68e350747
msgid "Fabric maintains an in-memory, two-tier password cache to help remember your login and sudo passwords in certain situations; this helps avoid tedious re-entry when multiple systems share the same password [#]_, or if a remote system's ``sudo`` configuration doesn't do its own caching."
msgstr ""

#: ../../usage/execution.rst:776
# 99422ed0ed844afebbe637bb55d6ac65
msgid "The first layer is a simple default or fallback password cache, :ref:`env.password <password>` (which may also be set at the command line via :option:`--password <-p>` or :option:`--initial-password-prompt <-I>`). This env var stores a single password which (if non-empty) will be tried in the event that the host-specific cache (see below) has no entry for the current :ref:`host string <host_string>`."
msgstr ""

#: ../../usage/execution.rst:783
# 8f32499b7a5f4ee2914e81bd2876f708
msgid ":ref:`env.passwords <passwords>` (plural!) serves as a per-user/per-host cache, storing the most recently entered password for every unique user/host/port combination (**note** that you must include **all three values** if modifying the structure by hand - see the above link for details). Due to this cache, connections to multiple different users and/or hosts in the same session will only require a single password entry for each. (Previous versions of Fabric used only the single, default password cache and thus required password re-entry every time the previously entered password became invalid.)"
msgstr ""

#: ../../usage/execution.rst:792
# ab2d8763faf84fa4b4829c18fab2ada7
msgid "Depending on your configuration and the number of hosts your session will connect to, you may find setting either or both of these env vars to be useful. However, Fabric will automatically fill them in as necessary without any additional configuration."
msgstr ""

#: ../../usage/execution.rst:797
# b891eed20a7b46a0ba916e6f095526be
msgid "Specifically, each time a password prompt is presented to the user, the value entered is used to update both the single default password cache, and the cache value for the current value of ``env.host_string``."
msgstr ""

#: ../../usage/execution.rst:801
# c4163c36e6c44755adea59d577b5ece3
msgid "We highly recommend the use of SSH `key-based access <http://en.wikipedia.org/wiki/Public_key>`_ instead of relying on homogeneous password setups, as it's significantly more secure."
msgstr ""

#: ../../usage/execution.rst:809
# 2caf3b5e566245709babb466d4339b2f
msgid "Leveraging native SSH config files"
msgstr ""

#: ../../usage/execution.rst:811
# 3343b6e00766417586855fca618555fd
msgid "Command-line SSH clients (such as the one provided by `OpenSSH <http://openssh.org>`_) make use of a specific configuration format typically known as ``ssh_config``, and will read from a file in the platform-specific location ``$HOME/.ssh/config`` (or an arbitrary path given to :option:`--ssh-config-path`/:ref:`env.ssh_config_path <ssh-config-path>`.) This file allows specification of various SSH options such as default or per-host usernames, hostname aliases, and toggling other settings (such as whether to use :ref:`agent forwarding <forward-agent>`.)"
msgstr ""

#: ../../usage/execution.rst:820
# 21ecd7ab305d45e8afd29019a362698e
msgid "Fabric's SSH implementation allows loading a subset of these options from one's actual SSH config file, should it exist. This behavior is not enabled by default (in order to be backwards compatible) but may be turned on by setting :ref:`env.use_ssh_config <use-ssh-config>` to ``True`` at the top of your fabfile."
msgstr ""

#: ../../usage/execution.rst:826
# 458ce42ab0cc4061bf1f8da6abded545
msgid "If enabled, the following SSH config directives will be loaded and honored by Fabric:"
msgstr ""

#: ../../usage/execution.rst:828
# 9e052c0d7c9147d4a50b5725fb1f26b6
msgid "``User`` and ``Port`` will be used to fill in the appropriate connection parameters when not otherwise specified, in the following fashion:"
msgstr ""

#: ../../usage/execution.rst:831
# 73465c7d83504d6a95d86f352987d480
msgid "Globally specified ``User``/``Port`` will be used in place of the current defaults (local username and 22, respectively) if the appropriate env vars are not set."
msgstr ""

#: ../../usage/execution.rst:834
# 71e23a4f52b34e9b83e2cfd9f4f94e31
msgid "However, if :ref:`env.user <user>`/:ref:`env.port <port>` *are* set, they override global ``User``/``Port`` values."
msgstr ""

#: ../../usage/execution.rst:836
# ad6c7fc5621440c2b36d68125eec6994
msgid "User/port values in the host string itself (e.g. ``hostname:222``) will override everything, including any ``ssh_config`` values."
msgstr ""

#: ../../usage/execution.rst:838
# fdc33659456a4749b7e89f9e0699832e
msgid "``HostName`` can be used to replace the given hostname, just like with regular ``ssh``. So a ``Host foo`` entry specifying ``HostName example.com`` will allow you to give Fabric the hostname ``'foo'`` and have that expanded into ``'example.com'`` at connection time."
msgstr ""

#: ../../usage/execution.rst:842
# 03692df992d544f8a46a13f20b182a9e
msgid "``IdentityFile`` will extend (not replace) :ref:`env.key_filename <key-filename>`."
msgstr ""

#: ../../usage/execution.rst:844
# e01b290c38ca45e2b1c4de6eee22696f
msgid "``ForwardAgent`` will augment :ref:`env.forward_agent <forward-agent>` in an \"OR\" manner: if either is set to a positive value, agent forwarding will be enabled."
msgstr ""

#: ../../usage/execution.rst:847
# e7f128d576154f37a8891783fadf0bfe
msgid "``ProxyCommand`` will trigger use of a proxy command for host connections, just as with regular ``ssh``."
msgstr ""

#: ../../usage/execution.rst:851
# 2a0f608122da4cc0854f21fd7bd35f75
msgid "If all you want to do is bounce SSH traffic off a gateway, you may find :ref:`env.gateway <gateway>` to be a more efficient connection method (which will also honor more Fabric-level settings) than the typical ``ssh gatewayhost nc %h %p`` method of using ``ProxyCommand`` as a gateway."
msgstr ""

#: ../../usage/execution.rst:857
# 63fca1be882e44938b5db0809bebbf45
msgid "If your SSH config file contains ``ProxyCommand`` directives *and* you have set :ref:`env.gateway <gateway>` to a non-``None`` value, ``env.gateway`` will take precedence and the ``ProxyCommand`` will be ignored."
msgstr ""

#: ../../usage/execution.rst:861
# 80363115230f4a4ead0f4c44702e6939
msgid "If one has a pre-created SSH config file, rationale states it will be easier for you to modify ``env.gateway`` (e.g. via `~fabric.context_managers.settings`) than to work around your conf file's contents entirely."
msgstr ""

