# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015 Jeff Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-02-11 15:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../usage/ssh.rst:3
# 8824db54291646a6baee27bc935ea9ff
msgid "SSH behavior"
msgstr ""

#: ../../usage/ssh.rst:5
# c993a4fb501140618a456daa0ebf9704
msgid "Fabric currently makes use of a pure-Python SSH re-implementation for managing connections, meaning that there are occasionally spots where it is limited by that library's capabilities. Below are areas of note where Fabric will exhibit behavior that isn't consistent with, or as flexible as, the behavior of the ``ssh`` command-line program."
msgstr ""

#: ../../usage/ssh.rst:13
# bee74d34ed5942199aa386be44171bc2
msgid "Unknown hosts"
msgstr ""

#: ../../usage/ssh.rst:15
# 93af1b75bc594786ac67aba6ca001da5
msgid "SSH's host key tracking mechanism keeps tabs on all the hosts you attempt to connect to, and maintains a ``~/.ssh/known_hosts`` file with mappings between identifiers (IP address, sometimes with a hostname as well) and SSH keys. (For details on how this works, please see the `OpenSSH documentation <http://openssh.org/manual.html>`_.)"
msgstr ""

#: ../../usage/ssh.rst:21
# 36aa5bd821fb459cbadfa03a59d623c7
msgid "The ``paramiko`` library is capable of loading up your ``known_hosts`` file, and will then compare any host it connects to, with that mapping. Settings are available to determine what happens when an unknown host (a host whose username or IP is not found in ``known_hosts``) is seen:"
msgstr ""

#: ../../usage/ssh.rst:26
# f155404fb5744cefb7394664eccc0ab8
msgid "**Reject**: the host key is rejected and the connection is not made. This results in a Python exception, which will terminate your Fabric session with a message that the host is unknown."
msgstr ""

#: ../../usage/ssh.rst:29
# 221b2a04d45841bcbdd3cdd00d11a7a2
msgid "**Add**: the new host key is added to the in-memory list of known hosts, the connection is made, and things continue normally. Note that this does **not** modify your on-disk ``known_hosts`` file!"
msgstr ""

#: ../../usage/ssh.rst:32
# 4143e659ccf14e9a806034af55f44b9a
msgid "**Ask**: not yet implemented at the Fabric level, this is a ``paramiko`` library option which would result in the user being prompted about the unknown key and whether to accept it."
msgstr ""

#: ../../usage/ssh.rst:36
# 2dbf91983a81469da4617cdfaab0d07b
msgid "Whether to reject or add hosts, as above, is controlled in Fabric via the :ref:`env.reject_unknown_hosts <reject-unknown-hosts>` option, which is False by default for convenience's sake. We feel this is a valid tradeoff between convenience and security; anyone who feels otherwise can easily modify their fabfiles at module level to set ``env.reject_unknown_hosts = True``."
msgstr ""

#: ../../usage/ssh.rst:44
# ab8196f409244ae69a117713b9d307c5
msgid "Known hosts with changed keys"
msgstr ""

#: ../../usage/ssh.rst:46
# 73b503d974564241a408288428cb77f3
msgid "The point of SSH's key/fingerprint tracking is so that man-in-the-middle attacks can be detected: if an attacker redirects your SSH traffic to a computer under his control, and pretends to be your original destination server, the host keys will not match. Thus, the default behavior of SSH (and its Python implementation) is to immediately abort the connection when a host previously recorded in ``known_hosts`` suddenly starts sending us a different host key."
msgstr ""

#: ../../usage/ssh.rst:54
# 21726b84a7de48e181ae8a89e5b2618b
msgid "In some edge cases such as some EC2 deployments, you may want to ignore this potential problem. Our SSH layer, at the time of writing, doesn't give us control over this exact behavior, but we can sidestep it by simply skipping the loading of ``known_hosts`` -- if the host list being compared to is empty, then there's no problem. Set :ref:`env.disable_known_hosts <disable-known-hosts>` to True when you want this behavior; it is False by default, in order to preserve default SSH behavior."
msgstr ""

#: ../../usage/ssh.rst:63
# 626bf0a4a90b43918a2b9d50ad2b0939
msgid "Enabling :ref:`env.disable_known_hosts <disable-known-hosts>` will leave you wide open to man-in-the-middle attacks! Please use with caution."
msgstr ""

