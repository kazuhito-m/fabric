# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014 Jeff Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-31 11:06+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../tutorial.rst:3
# baf24ba1bab847aab2e7cf824c3311fb
msgid "Overview and Tutorial"
msgstr ""

#: ../../tutorial.rst:5
# 42f5c812c1604335a5db8e6f45367bb0
msgid "Welcome to Fabric!"
msgstr ""

#: ../../tutorial.rst:7
# 954df3c5018e42a9af8ba30780bc83c7
msgid "This document is a whirlwind tour of Fabric's features and a quick guide to its use. Additional documentation (which is linked to throughout) can be found in the :ref:`usage documentation <usage-docs>` -- please make sure to check it out."
msgstr ""

#: ../../tutorial.rst:13
# e2e2c72a6cf74fb2a362a1016fc243af
msgid "What is Fabric?"
msgstr ""

#: ../../tutorial.rst:15
# 29038bbe26d74885bdb8778476f4c0c0
msgid "As the ``README`` says:"
msgstr ""

#: ../../../../README.rst:1
# 6946019360a34da2924fe051bee6d355
msgid "Fabric is a Python (2.5-2.7) library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks."
msgstr ""

#: ../../tutorial.rst:20
# cbb939c252364240aecf4e54478e4f31
msgid "More specifically, Fabric is:"
msgstr ""

#: ../../tutorial.rst:22
# 4ad575a9f5e9436886fb5dfc2edebd34
msgid "A tool that lets you execute **arbitrary Python functions** via the **command line**;"
msgstr ""

#: ../../tutorial.rst:24
# e89536f29403455ea9149c5ef656e344
msgid "A library of subroutines (built on top of a lower-level library) to make executing shell commands over SSH **easy** and **Pythonic**."
msgstr ""

#: ../../tutorial.rst:27
# f28e17e59121410a8edd12a91f7cef4b
msgid "Naturally, most users combine these two things, using Fabric to write and execute Python functions, or **tasks**, to automate interactions with remote servers. Let's take a look."
msgstr ""

#: ../../tutorial.rst:33
# 379a5f1f5ced4a8cb5d8315339e30b04
msgid "Hello, ``fab``"
msgstr ""

#: ../../tutorial.rst:35
# 5a33a0666ef241f399573a8683f84407
msgid "This wouldn't be a proper tutorial without \"the usual\"::"
msgstr ""

#: ../../tutorial.rst:40
# 776ec07b7b4246f0ad2d8266443e9e35
msgid "Placed in a Python module file named ``fabfile.py`` in your current working directory, that ``hello`` function can be executed with the ``fab`` tool (installed as part of Fabric) and does just what you'd expect::"
msgstr ""

#: ../../tutorial.rst:49
# 7951a7637da24cae9efc39fbe28b979a
msgid "That's all there is to it. This functionality allows Fabric to be used as a (very) basic build tool even without importing any of its API."
msgstr ""

#: ../../tutorial.rst:54
# 0bd10b6cc9434da7b403e487094a5ad6
msgid "The ``fab`` tool simply imports your fabfile and executes the function or functions you instruct it to. There's nothing magic about it -- anything you can do in a normal Python script can be done in a fabfile!"
msgstr ""

#: ../../tutorial.rst:58
# a47d8a45bf3d41ce9c8e0626cf44fa39
msgid ":ref:`execution-strategy`, :doc:`/usage/tasks`, :doc:`/usage/fab`"
msgstr ""

#: ../../tutorial.rst:62
# 4a5ff285411c45f180e8648f88c019ec
msgid "Task arguments"
msgstr ""

#: ../../tutorial.rst:64
# 9eaffd5cb1af48158c2709fb770bf8af
msgid "It's often useful to pass runtime parameters into your tasks, just as you might during regular Python programming. Fabric has basic support for this using a shell-compatible notation: ``<task name>:<arg>,<kwarg>=<value>,...``. It's contrived, but let's extend the above example to say hello to you personally::"
msgstr ""

#: ../../tutorial.rst:72
# c4fc37d57b9249c7893f817cbebe65a8
msgid "By default, calling ``fab hello`` will still behave as it did before; but now we can personalize it::"
msgstr ""

#: ../../tutorial.rst:80
# cb0bb19db09a4fa397f38af4439eee03
msgid "Those already used to programming in Python might have guessed that this invocation behaves exactly the same way::"
msgstr ""

#: ../../tutorial.rst:88
# 8f524be42a7141fe98edee55cc3cd598
msgid "For the time being, your argument values will always show up in Python as strings and may require a bit of string manipulation for complex types such as lists. Future versions may add a typecasting system to make this easier."
msgstr ""

#: ../../tutorial.rst:92
# 8339b27eea4245d99a371762f53e5c71
msgid ":ref:`task-arguments`"
msgstr ""

#: ../../tutorial.rst:95
# 5bf6aac0581d49bf9861bc99798a265c
msgid "Local commands"
msgstr ""

#: ../../tutorial.rst:97
# f60266e88f4145f5aa6e528543deab82
msgid "As used above, ``fab`` only really saves a couple lines of ``if __name__ == \"__main__\"`` boilerplate. It's mostly designed for use with Fabric's API, which contains functions (or **operations**) for executing shell commands, transferring files, and so forth."
msgstr ""

#: ../../tutorial.rst:102
# 797cbcee19714469992453d1c23e31ae
msgid "Let's build a hypothetical Web application fabfile. This example scenario is as follows: The Web application is managed via Git on a remote host ``vcshost``. On ``localhost``, we have a local clone of said Web application. When we push changes back to ``vcshost``, we want to be able to immediately install these changes on a remote host ``my_server`` in an automated fashion. We will do this by automating the local and remote Git commands."
msgstr ""

#: ../../tutorial.rst:109
# d6cbbf00bd0e4b3ca1aabefd828189e6
msgid "Fabfiles usually work best at the root of a project::"
msgstr ""

#: ../../tutorial.rst:127
# d7b75a4846464639a709c8ce271f4565
msgid "We're using a Django application here, but only as an example -- Fabric is not tied to any external codebase, save for its SSH library."
msgstr ""

#: ../../tutorial.rst:130
# 1e94b0dc84eb4d05b5ee6269088d4cc1
msgid "For starters, perhaps we want to run our tests and commit to our VCS so we're ready for a deploy::"
msgstr ""

#: ../../tutorial.rst:140
# 731645fc93d74ce8929b3ffe7c3310a8
msgid "The output of which might look a bit like this::"
msgstr ""

#: ../../tutorial.rst:164
# b31dbbc7674f490fb28482827e1a6ebc
msgid "The code itself is straightforward: import a Fabric API function, `~fabric.operations.local`, and use it to run and interact with local shell commands. The rest of Fabric's API is similar -- it's all just Python."
msgstr ""

#: ../../tutorial.rst:168
# 2d8e2e52a68645689c6300b81445ba26
msgid ":doc:`api/core/operations`, :ref:`fabfile-discovery`"
msgstr ""

#: ../../tutorial.rst:172
# 7d371ac9bcb0474da597818087f3e45c
msgid "Organize it your way"
msgstr ""

#: ../../tutorial.rst:174
# d237dc4054fa486f916011d948bbc9af
msgid "Because Fabric is \"just Python\" you're free to organize your fabfile any way you want. For example, it's often useful to start splitting things up into subtasks::"
msgstr ""

#: ../../tutorial.rst:194
# 901f17ebe56a4ee79f94d95f5a0019d3
msgid "The ``prepare_deploy`` task can be called just as before, but now you can make a more granular call to one of the sub-tasks, if desired."
msgstr ""

#: ../../tutorial.rst:199
# ab234fa340724a13a5d8546caf0a572c
msgid "Failure"
msgstr ""

#: ../../tutorial.rst:201
# c8e139cd20af4512910f1a0bb82c200f
msgid "Our base case works fine now, but what happens if our tests fail?  Chances are we want to put on the brakes and fix them before deploying."
msgstr ""

#: ../../tutorial.rst:204
# 4fad678045ba4f9687c0cd403eca4cf7
msgid "Fabric checks the return value of programs called via operations and will abort if they didn't exit cleanly. Let's see what happens if one of our tests encounters an error::"
msgstr ""

#: ../../tutorial.rst:230
# 98c174cf1cf14c49a49313c4bd7e3e41
msgid "Great! We didn't have to do anything ourselves: Fabric detected the failure and aborted, never running the ``commit`` task."
msgstr ""

#: ../../tutorial.rst:233
# a007fd5521b24907a9dd435a0e7b26f5
msgid ":ref:`Failure handling (usage documentation) <failures>`"
msgstr ""

#: ../../tutorial.rst:236
# af4ba87a9b1246dc907b5162a09f70ba
msgid "Failure handling"
msgstr ""

#: ../../tutorial.rst:238
# 505667ddc03d4b53a1d8b56efecd6545
msgid "But what if we wanted to be flexible and give the user a choice? A setting (or **environment variable**, usually shortened to **env var**) called :ref:`warn_only` lets you turn aborts into warnings, allowing flexible error handling to occur."
msgstr ""

#: ../../tutorial.rst:243
# 77658125f4644ae183d7cd4556de186f
msgid "Let's flip this setting on for our ``test`` function, and then inspect the result of the `~fabric.operations.local` call ourselves::"
msgstr ""

#: ../../tutorial.rst:258
# bb75c35574ea420ebf6e4cdcb7cdee49
msgid "In adding this new feature we've introduced a number of new things:"
msgstr ""

#: ../../tutorial.rst:260
# b473aba7ce6f4498b4d3adb79764a7e0
msgid "The ``__future__`` import required to use ``with:`` in Python 2.5;"
msgstr ""

#: ../../tutorial.rst:261
# e334a11600f64340a327cf9efb70cbfb
msgid "Fabric's `contrib.console <fabric.contrib.console>` submodule, containing the `~fabric.contrib.console.confirm` function, used for simple yes/no prompts;"
msgstr ""

#: ../../tutorial.rst:263
# 4f8c72b8ce4147dbb4cb19d15bd60d68
msgid "The `~fabric.context_managers.settings` context manager, used to apply settings to a specific block of code;"
msgstr ""

#: ../../tutorial.rst:265
# d2ab17d187d0480c9fa2e7cb94b62eea
msgid "Command-running operations like `~fabric.operations.local` can return objects containing info about their result (such as ``.failed``, or ``.return_code``);"
msgstr ""

#: ../../tutorial.rst:268
# 537b61d7ea7e47da9d9c55436cb66a80
msgid "And the `~fabric.utils.abort` function, used to manually abort execution."
msgstr ""

#: ../../tutorial.rst:270
# b6c12308a5ee4956be10704b1c8cf33f
msgid "However, despite the additional complexity, it's still pretty easy to follow, and is now much more flexible."
msgstr ""

#: ../../tutorial.rst:273
# dca4de4744ae4ff8b5a36db6918fd545
msgid ":doc:`api/core/context_managers`, :ref:`env-vars`"
msgstr ""

#: ../../tutorial.rst:277
# 90a07f97b9bf4b2287f46bdcc86c74e5
msgid "Making connections"
msgstr ""

#: ../../tutorial.rst:279
# 315f24c36a184ec0abb02763f550ff6f
msgid "Let's start wrapping up our fabfile by putting in the keystone: a ``deploy`` task that is destined to run on one or more remote server(s), and ensures the code is up to date::"
msgstr ""

#: ../../tutorial.rst:289
# 030cb841521142f1b95ab72d1357439a
msgid "Here again, we introduce a handful of new concepts:"
msgstr ""

#: ../../tutorial.rst:291
# ff3141803f4a4add9e442a79f6e68e27
msgid "Fabric is just Python -- so we can make liberal use of regular Python code constructs such as variables and string interpolation;"
msgstr ""

#: ../../tutorial.rst:293
# f699bf00c77249a38e7b29a6a4ebcadd
msgid "`~fabric.context_managers.cd`, an easy way of prefixing commands with a ``cd /to/some/directory`` call. This is similar to  `~fabric.context_managers.lcd` which does the same locally."
msgstr ""

#: ../../tutorial.rst:296
# dc025e732f274f4b9eefde38b9caceeb
msgid "`~fabric.operations.run`, which is similar to `~fabric.operations.local` but runs **remotely** instead of locally."
msgstr ""

#: ../../tutorial.rst:299
# 690f7032c74e4e9287c469e45b0deb5e
msgid "We also need to make sure we import the new functions at the top of our file::"
msgstr ""

#: ../../tutorial.rst:305
# 550117ec5fd649c09d3696fd251e0daf
msgid "With these changes in place, let's deploy::"
msgstr ""

#: ../../tutorial.rst:316
# fbe85f7316a946d8a4edb327e408529e
msgid "We never specified any connection info in our fabfile, so Fabric doesn't know on which host(s) the remote command should be executed. When this happens, Fabric prompts us at runtime. Connection definitions use SSH-like \"host strings\" (e.g. ``user@host:port``) and will use your local username as a default -- so in this example, we just had to specify the hostname, ``my_server``."
msgstr ""

#: ../../tutorial.rst:325
# e2259b0ee17845a8ac895acefabfbb51
msgid "Remote interactivity"
msgstr ""

#: ../../tutorial.rst:327
# 16478b72e6d84b38b2dbea5c3bac2b60
msgid "``git pull`` works fine if you've already got a checkout of your source code -- but what if this is the first deploy? It'd be nice to handle that case too and do the initial ``git clone``::"
msgstr ""

#: ../../tutorial.rst:340
# 408235d29c704a2ab6d8557f43b1a858
msgid "As with our calls to `~fabric.operations.local` above, `~fabric.operations.run` also lets us construct clean Python-level logic based on executed shell commands. However, the interesting part here is the ``git clone`` call: since we're using Git's SSH method of accessing the repository on our Git server, this means our remote `~fabric.operations.run` call will need to authenticate itself."
msgstr ""

#: ../../tutorial.rst:347
# c35c2f32ed444593a208243cef6f9c43
msgid "Older versions of Fabric (and similar high level SSH libraries) run remote programs in limbo, unable to be touched from the local end. This is problematic when you have a serious need to enter passwords or otherwise interact with the remote program."
msgstr ""

#: ../../tutorial.rst:352
# 2bf34307e5f04f92b058ab16bab5fc6d
msgid "Fabric 1.0 and later breaks down this wall and ensures you can always talk to the other side. Let's see what happens when we run our updated ``deploy`` task on a new server with no Git checkout::"
msgstr ""

#: ../../tutorial.rst:378
# 340b8569db3c4ac797125f1dc9f48a45
msgid "Notice the ``Password:`` prompt -- that was our remote ``git`` call on our Web server, asking for the password to the Git server. We were able to type it in and the clone continued normally."
msgstr ""

#: ../../tutorial.rst:380
# eab2251e9a5f440e9a0c432f7ffb4b2c
msgid ":doc:`/usage/interactivity`"
msgstr ""

#: ../../tutorial.rst:386
# d1da4fdc1e8448249d774db6c66bfa94
msgid "Defining connections beforehand"
msgstr ""

#: ../../tutorial.rst:388
# 738b67e0d0994b7e8f1107f6ce7bb532
msgid "Specifying connection info at runtime gets old real fast, so Fabric provides a handful of ways to do it in your fabfile or on the command line. We won't cover all of them here, but we will show you the most common one: setting the global host list, :ref:`env.hosts <hosts>`."
msgstr ""

#: ../../tutorial.rst:393
# 348c108c2016406885d9ce260d158058
msgid ":doc:`env <usage/env>` is a global dictionary-like object driving many of Fabric's settings, and can be written to with attributes as well (in fact, `~fabric.context_managers.settings`, seen above, is simply a wrapper for this.) Thus, we can modify it at module level near the top of our fabfile like so::"
msgstr ""

#: ../../tutorial.rst:407
# 582aa75ddac442a5977809629b7bb640
msgid "When ``fab`` loads up our fabfile, our modification of ``env`` will execute, storing our settings change. The end result is exactly as above: our ``deploy`` task will run against the ``my_server`` server."
msgstr ""

#: ../../tutorial.rst:411
# 7160636f5b78480ab0a34d213ce387ec
msgid "This is also how you can tell Fabric to run on multiple remote systems at once: because ``env.hosts`` is a list, ``fab`` iterates over it, calling the given task once for each connection."
msgstr ""

#: ../../tutorial.rst:415
# cc0b7b11eeb946058639587edd689a84
msgid ":doc:`usage/env`, :ref:`host-lists`"
msgstr ""

#: ../../tutorial.rst:419
# e4ddea093db64e66ad28b6bb5a4d8f32
msgid "Conclusion"
msgstr ""

#: ../../tutorial.rst:421
# 5574e67fc4c6433082b06ed1bbd68ab1
msgid "Our completed fabfile is still pretty short, as such things go. Here it is in its entirety::"
msgstr ""

#: ../../tutorial.rst:456
# 400c9eedfafd495ba047ce4036fc6f8f
msgid "This fabfile makes use of a large portion of Fabric's feature set:"
msgstr ""

#: ../../tutorial.rst:458
# 829f7a93bffe4698ae7d3a126dc6ae29
msgid "defining fabfile tasks and running them with :doc:`fab <usage/fab>`;"
msgstr ""

#: ../../tutorial.rst:459
# db6112bad5bf437098ec7960c4eec76f
msgid "calling local shell commands with `~fabric.operations.local`;"
msgstr ""

#: ../../tutorial.rst:460
# 75b18a4c7ff04c6ea276d2f6545affa6
msgid "modifying env vars with `~fabric.context_managers.settings`;"
msgstr ""

#: ../../tutorial.rst:461
# 57991f98b6ad4805a33d44f0beeb1fd7
msgid "handling command failures, prompting the user, and manually aborting;"
msgstr ""

#: ../../tutorial.rst:462
# e72062cfb4b84361898acbb94a10b98a
msgid "and defining host lists and `~fabric.operations.run`-ning remote commands."
msgstr ""

#: ../../tutorial.rst:464
# c4ae2a88e29b4b93a04a3036a29ea8a0
msgid "However, there's still a lot more we haven't covered here! Please make sure you follow the various \"see also\" links, and check out the documentation table of contents on :doc:`the main index page <index>`."
msgstr ""

#: ../../tutorial.rst:468
# 6019f6abbc8043a0b28f3e3277831859
msgid "Thanks for reading!"
msgstr ""

