#
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-29 17:11+0900\n"
"PO-Revision-Date: 2014-01-24 17:09+0900\n"
"Last-Translator: JOTAKI, Taisuke <tekapo@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"X-Generator: Poedit 1.6.3\n"

#: ../../tutorial.rst:3
msgid "Overview and Tutorial"
msgstr "概要とチュートリアル"

#: ../../tutorial.rst:5
msgid "Welcome to Fabric!"
msgstr "Fabric へようこそ !"

#: ../../tutorial.rst:7
msgid ""
"This document is a whirlwind tour of Fabric's features and a quick guide to "
"its use. Additional documentation (which is linked to throughout) can be "
"found in the :ref:`usage documentation <usage-docs>` -- please make sure to "
"check it out."
msgstr ""
"このドキュメントは Fabric の機能を紹介する駆け足のツアーであり、使い方のク"
"イックガイドでもあります。さらに詳しいドキュメント(全体にリンクされています)"
"は :ref:`使用方法 <usage-docs>` にあります。ぜひご覧になってください。"

#: ../../tutorial.rst:13
msgid "What is Fabric?"
msgstr "Fabricとは ?"

#: ../../tutorial.rst:15
msgid "As the ``README`` says:"
msgstr "``README`` によると:"

#: ../../../README.rst:4
msgid ""
"Fabric is a Python (2.5 or higher) library and command-line tool for "
"streamlining the use of SSH for application deployment or systems "
"administration tasks."
msgstr ""
"Fabricは、アプリケーションのデプロイやシステム管理のタスクのためにSSHの利用を"
"簡素化するためのPython(2.5以上)のライブラリとコマンドラインツールです。"

#: ../../tutorial.rst:20
msgid "More specifically, Fabric is:"
msgstr "もっと具体的に言うと、Fabricとは:"

#: ../../tutorial.rst:22
msgid ""
"A tool that lets you execute **arbitrary Python functions** via the "
"**command line**;"
msgstr ""
"**コマンドライン** 経由で **任意の Python 関数** を実行するツールです。"

#: ../../tutorial.rst:24
msgid ""
"A library of subroutines (built on top of a lower-level library) to make "
"executing shell commands over SSH **easy** and **Pythonic**."
msgstr ""
"(低レベルライブラリの上に構築された)サブルーチンのライブラリで、SSH経由で **"
"簡単に** かつ **Python風に** シェルコマンドを実行します。"

#: ../../tutorial.rst:27
msgid ""
"Naturally, most users combine these two things, using Fabric to write and "
"execute Python functions, or **tasks**, to automate interactions with remote "
"servers. Let's take a look."
msgstr ""
"当然、たいていのユーザーはこの2つを組み合わせます。Fabricを使ってPythonの関数"
"もしくは **タスク** を作成し、実行し、リモートサーバとのやりとりを自動化しま"
"す。ではちょっと見てみましょう。"

#: ../../tutorial.rst:33
msgid "Hello, ``fab``"
msgstr "Hello, ``fab``"

#: ../../tutorial.rst:35
msgid "This wouldn't be a proper tutorial without \"the usual\"::"
msgstr "\"いつもの\"がないと正しいチュートリアルではないですよね::"

#: ../../tutorial.rst:40
msgid ""
"Placed in a Python module file named ``fabfile.py`` in your current working "
"directory, that ``hello`` function can be executed with the ``fab`` tool "
"(installed as part of Fabric) and does just what you'd expect::"
msgstr ""
"上のコードを ``fabfile.py`` という名前のPythonモジュールファイルとしてカレン"
"トのワーキングディレクトリに置くと、 ``fab`` ツール(Fabricのパーツとしてイン"
"ストールされています)で ``hello`` 関数を実行することができ、期待した通りに動"
"きます::"

#: ../../tutorial.rst:49
msgid ""
"That's all there is to it. This functionality allows Fabric to be used as a "
"(very) basic build tool even without importing any of its API."
msgstr ""
"どうってことはありませんね。この機能性により、自身のAPIを何もインポートしなく"
"ても(とても)ベーシックなビルドツールとしてFabricを利用することができます。"

#: ../../tutorial.rst:54
msgid ""
"The ``fab`` tool simply imports your fabfile and executes the function or "
"functions you instruct it to. There's nothing magic about it -- anything you "
"can do in a normal Python script can be done in a fabfile!"
msgstr ""
"``fab`` ツールは単にあなたのfabfileをインポートしてその指示にしたがい、ひとつ"
"もしくは複数の関数を実行します。何かマジックがあるわけではありません。通常の"
"Pythonスクリプトで可能なすべてのことがfabfile内でも可能なのです !"

#: ../../tutorial.rst:58
msgid ":ref:`execution-strategy`, :doc:`/usage/tasks`, :doc:`/usage/fab`"
msgstr ":ref:`execution-strategy`, :doc:`/usage/tasks`, :doc:`/usage/fab`"

#: ../../tutorial.rst:62
msgid "Task arguments"
msgstr "タスク引数"

#: ../../tutorial.rst:64
msgid ""
"It's often useful to pass runtime parameters into your tasks, just as you "
"might during regular Python programming. Fabric has basic support for this "
"using a shell-compatible notation: ``<task name>:<arg>,<kwarg>=<value>,..."
"``. It's contrived, but let's extend the above example to say hello to you "
"personally::"
msgstr ""
"Fabricでは実行時引数をタスクに渡せるので便利なことも多いです。ちょうと通常の"
"Pythonプログラミングのようなものです。Fabricはこの基本的なサポートを持ってい"
"て、シェル互換ノーテーションを使っています: ``<task name>:<arg>,"
"<kwarg>=<value>,...`` 不自然な感じがするかもしれませんが、上の例を拡張してあ"
"なたに say hello と言うようにしてみましょう::"

#: ../../tutorial.rst:72
msgid ""
"By default, calling ``fab hello`` will still behave as it did before; but "
"now we can personalize it::"
msgstr ""
"デフォルトでは、 ``fab hello`` を呼び出しても以前と同じ動きをします。今度はこ"
"れをパーソナライズしてみましょう::"

#: ../../tutorial.rst:80
msgid ""
"Those already used to programming in Python might have guessed that this "
"invocation behaves exactly the same way::"
msgstr ""
"Pythonプログラミングに慣れた方なら、この呼び出しでもまったく同じ挙動をするこ"
"とが想像できると思います::"

#: ../../tutorial.rst:88
msgid ""
"For the time being, your argument values will always show up in Python as "
"strings and may require a bit of string manipulation for complex types such "
"as lists. Future versions may add a typecasting system to make this easier."
msgstr ""
"差し当たりは、引数の値は常に文字列としてPythonに現れ、リストなどの複雑な型で"
"は少し文字列操作が必要になります。将来のバージョンではこれをより簡単にするた"
"め、型キャストシステムが追加されるかもしれません。"

#: ../../tutorial.rst:92
msgid ":ref:`task-arguments`"
msgstr ":ref:`task-arguments`"

#: ../../tutorial.rst:95
msgid "Local commands"
msgstr "ローカルコマンド"

#: ../../tutorial.rst:97
msgid ""
"As used above, ``fab`` only really saves a couple lines of ``if __name__ == "
"\"__main__\"`` boilerplate. It's mostly designed for use with Fabric's API, "
"which contains functions (or **operations**) for executing shell commands, "
"transferring files, and so forth."
msgstr ""
"上の例では、 ``fab`` は ``if __name__ == \"__main__\"`` の定型文の何行かを省"
"略できるに過ぎません。たいていはFabricのAPIと利用するためにデザインされます。"
"APIにはシェルコマンドの実行、ファイルの転送などの関数(もしくは **操作**)が含"
"まれます。"

#: ../../tutorial.rst:102
msgid ""
"Let's build a hypothetical Web application fabfile. This example scenario is "
"as follows: The Web application is managed via Git on a remote host "
"``vcshost``. On ``localhost``, we have a local clone of said Web "
"application. When we push changes back to ``vcshost``, we want to be able to "
"immediately install these changes on a remote host ``my_server`` in an "
"automated fashion. We will do this by automating the local and remote Git "
"commands."
msgstr ""
"では、仮定のウェブアプリケーションのfabfileを作ってみましょう。この例のシナリ"
"オは次のようなものです: このウェブアプリケーションはリモートホスト "
"``vcshost`` 上にGit経由で管理されています。 ``localhost`` 上ではこのウェブア"
"プリケーションのローカルクローンがあります。 ``vcshost`` に変更をプッシュする"
"と、すぐに、そして自動的にリモートホスト ``my_server`` に変更を反映させたいと"
"思います。これを、ローカルとリモートのGitコマンドを自動化することによって実施"
"させてみましょう。"

#: ../../tutorial.rst:109
msgid "Fabfiles usually work best at the root of a project::"
msgstr "通常は、fabfileはプロジェクトのルートに置くといいでしょう::"

#: ../../tutorial.rst:127
msgid ""
"We're using a Django application here, but only as an example -- Fabric is "
"not tied to any external codebase, save for its SSH library."
msgstr ""
"ここではDjangoアプリケーションを使用していますが、単に例として用いているだけ"
"です。Fabricは、SSHライブラリは別として、どんな外部のコードベースにもひも付け"
"られていません。"

#: ../../tutorial.rst:130
msgid ""
"For starters, perhaps we want to run our tests and commit to our VCS so "
"we're ready for a deploy::"
msgstr ""
"まず第一にこのテストを実行し、VCSにコミットしてみましょう。そしてデプロイを準"
"備をします::"

#: ../../tutorial.rst:140
msgid "The output of which might look a bit like this::"
msgstr "出力はだいたい次のようになるでしょう::"

#: ../../tutorial.rst:164
msgid ""
"The code itself is straightforward: import a Fabric API function, `~fabric."
"operations.local`, and use it to run and interact with local shell commands. "
"The rest of Fabric's API is similar -- it's all just Python."
msgstr ""
"このコード自身は単純です。FabricのAPI関数 `~fabric.operations.local` をイン"
"ポートし、それを利用してローカルのシェルコマンドを実行し、やりとりを行いま"
"す。他のFabricのAPIも似ていて、すべてただのPythonです。"

#: ../../tutorial.rst:168
msgid ":doc:`api/core/operations`, :ref:`fabfile-discovery`"
msgstr ":doc:`api/core/operations`, :ref:`fabfile-discovery`"

#: ../../tutorial.rst:172
msgid "Organize it your way"
msgstr "好きなように構造化する"

#: ../../tutorial.rst:174
msgid ""
"Because Fabric is \"just Python\" you're free to organize your fabfile any "
"way you want. For example, it's often useful to start splitting things up "
"into subtasks::"
msgstr ""
"Fabricは\"ただのPython\"なので、fabfileは好きなように自由に構造化できます。例"
"えば、サブタスクに分けることから始めると便利でしょう::"

#: ../../tutorial.rst:194
msgid ""
"The ``prepare_deploy`` task can be called just as before, but now you can "
"make a more granular call to one of the sub-tasks, if desired."
msgstr ""
"``prepare_deploy`` タスクは以前と同じように呼び出すことができますが、今回は必"
"要であればサブタスクの一つとしてより粒度を細かくして呼び出しをすることができ"
"ます。"

#: ../../tutorial.rst:199
msgid "Failure"
msgstr "失敗"

#: ../../tutorial.rst:201
msgid ""
"Our base case works fine now, but what happens if our tests fail?  Chances "
"are we want to put on the brakes and fix them before deploying."
msgstr ""
"基本的な動きは問題ないですが、もしテストに失敗したらどうなるでしょうか? デプ"
"ロイの前にブレーキをかけて修正する機会があります。"

#: ../../tutorial.rst:204
msgid ""
"Fabric checks the return value of programs called via operations and will "
"abort if they didn't exit cleanly. Let's see what happens if one of our "
"tests encounters an error::"
msgstr ""
"Fabricは操作経由で呼び出されたプログラムの返り値をチェックして、正常に終了し"
"なかった場合には停止します。テストのひとつがエラーに出くわしたときにどうなる"
"か見てみましょう::"

#: ../../tutorial.rst:230
msgid ""
"Great! We didn't have to do anything ourselves: Fabric detected the failure "
"and aborted, never running the ``commit`` task."
msgstr ""
"素晴らしい! 私たち自身では何もする必要がありませんでした。Fabricが失敗を検知"
"して停止し、``commit`` タスクは決して実行されることはありません。"

#: ../../tutorial.rst:233
msgid ":ref:`Failure handling (usage documentation) <failures>`"
msgstr ":ref:`Failure handling (usage documentation) <failures>`"

#: ../../tutorial.rst:236
msgid "Failure handling"
msgstr "失敗の扱い"

#: ../../tutorial.rst:238
msgid ""
"But what if we wanted to be flexible and give the user a choice? A setting "
"(or **environment variable**, usually shortened to **env var**) called :ref:"
"`warn_only` lets you turn aborts into warnings, allowing flexible error "
"handling to occur."
msgstr ""
"さて、これを柔軟にしてユーザーに選択をさせるにはどうすれいいでしょう? :ref:"
"`warn_only` と呼ばれる設定(もしくは **environment variable**、通常は短く "
"**env var**)が停止を警告に変え、柔軟なエラーの扱いを可能にします。"

#: ../../tutorial.rst:243
msgid ""
"Let's flip this setting on for our ``test`` function, and then inspect the "
"result of the `~fabric.operations.local` call ourselves::"
msgstr ""
"``test`` 関数でこの設定を有効にして、`~fabric.operations.local` 呼び出しの結"
"果を調べて見ましょう::"

#: ../../tutorial.rst:258
msgid "In adding this new feature we've introduced a number of new things:"
msgstr "この新しい機能を追加するにあたり、新しいことをたくさん導入しました:"

#: ../../tutorial.rst:260
msgid "The ``__future__`` import required to use ``with:`` in Python 2.5;"
msgstr ""
"Python 2.5 では ``with:`` を使うために ``__future__`` のインポートが必要で"
"す。"

#: ../../tutorial.rst:261
msgid ""
"Fabric's `contrib.console <fabric.contrib.console>` submodule, containing "
"the `~fabric.contrib.console.confirm` function, used for simple yes/no "
"prompts;"
msgstr ""
"Fabricの `contrib.console <fabric.contrib.console>` サブモジュールは "
"`~fabric.contrib.console.confirm` 関数を含んでいて、簡単なイエス/ノープロンプ"
"トに使われます。"

#: ../../tutorial.rst:263
msgid ""
"The `~fabric.context_managers.settings` context manager, used to apply "
"settings to a specific block of code;"
msgstr ""
"`~fabric.context_managers.settings` コンテキストマネージャーはコードの特定の"
"ブロックに設定を適用するのに使われます。"

#: ../../tutorial.rst:265
msgid ""
"Command-running operations like `~fabric.operations.local` can return "
"objects containing info about their result (such as ``.failed``, or ``."
"return_code``);"
msgstr ""
"`~fabric.operations.local` のようなコマンドランニング操作は、その結果(``."
"failed`` や ``.return_code`` など) に関する情報を含むオブジェクトを返すことが"
"できます。"

#: ../../tutorial.rst:268
msgid ""
"And the `~fabric.utils.abort` function, used to manually abort execution."
msgstr ""
"そして `~fabric.utils.abort` 関数は手動で停止を実行するために使われます。"

#: ../../tutorial.rst:270
msgid ""
"However, despite the additional complexity, it's still pretty easy to "
"follow, and is now much more flexible."
msgstr ""
"とは言え、この追加的な複雑性を別にすれば、理解するのは依然としてとても簡単"
"で、さらに柔軟になりました。"

#: ../../tutorial.rst:273
msgid ":doc:`api/core/context_managers`, :ref:`env-vars`"
msgstr ":doc:`api/core/context_managers`, :ref:`env-vars`"

#: ../../tutorial.rst:277
msgid "Making connections"
msgstr "接続する"

#: ../../tutorial.rst:279
msgid ""
"Let's start wrapping up our fabfile by putting in the keystone: a ``deploy`` "
"task that is destined to run on one or more remote server(s), and ensures "
"the code is up to date::"
msgstr ""
"では今度は、肝心な部分を入れてfabfileを仕上げましょう。 ``deploy`` タスクは一"
"つもしくは複数のリモートサーバーで実行され、コードが確実に最新になるにように"
"します::"

#: ../../tutorial.rst:289
msgid "Here again, we introduce a handful of new concepts:"
msgstr "今回もまた、たくさんの新しいコンセプトが導入されています:"

#: ../../tutorial.rst:291
msgid ""
"Fabric is just Python -- so we can make liberal use of regular Python code "
"constructs such as variables and string interpolation;"
msgstr ""
"FabricはただのPythonです。したがって、変数や文字列の操作などの通常のPython"
"コードの概念を自由に利用することができます。"

#: ../../tutorial.rst:293
msgid ""
"`~fabric.context_managers.cd`, an easy way of prefixing commands with a "
"``cd /to/some/directory`` call. This is similar to  `~fabric."
"context_managers.lcd` which does the same locally."
msgstr ""
"`~fabric.context_managers.cd` はコマンドに``cd /どこ/かの/ディレクトリ`` 呼び"
"出しを追加する簡単な方法です。これは同じことをローカルで実行する `~fabric."
"context_managers.lcd` と似ています。"

#: ../../tutorial.rst:296
msgid ""
"`~fabric.operations.run`, which is similar to `~fabric.operations.local` but "
"runs **remotely** instead of locally."
msgstr ""
"`~fabric.operations.run` は `~fabric.operations.local` に似ていますが、ローカ"
"ルではなく **リモートで** 動作します。"

#: ../../tutorial.rst:299
msgid ""
"We also need to make sure we import the new functions at the top of our "
"file::"
msgstr "また、ファイルの一番上で新しい関数を確実にインポートするようにします::"

#: ../../tutorial.rst:305
msgid "With these changes in place, let's deploy::"
msgstr "これらを変更したら、デプロイしてみましょう::"

#: ../../tutorial.rst:316
msgid ""
"We never specified any connection info in our fabfile, so Fabric doesn't "
"know on which host(s) the remote command should be executed. When this "
"happens, Fabric prompts us at runtime. Connection definitions use SSH-like "
"\"host strings\" (e.g. ``user@host:port``) and will use your local username "
"as a default -- so in this example, we just had to specify the hostname, "
"``my_server``."
msgstr ""
"このfabfileでは接続情報は指定していません。したがって、Fabricはどのホスト(複"
"数可)でこのリモートコマンドが実行されるべきなのかが分かりません。このようなと"
"き、Fabricは起動時に入力を促します。接続定義はSSHのような \"ホスト文字列"
"\" (例えば ``user@host:port``)を使い、デフォルトではローカルのユーザー名が使"
"われます。そのため、この例では単にホスト名 ``my_server`` だけを指定していま"
"す。"

#: ../../tutorial.rst:325
msgid "Remote interactivity"
msgstr "リモートとの双方向性"

#: ../../tutorial.rst:327
msgid ""
"``git pull`` works fine if you've already got a checkout of your source code "
"-- but what if this is the first deploy? It'd be nice to handle that case "
"too and do the initial ``git clone``::"
msgstr ""
"チェックアウトしたソースコードがすでにあるのなら ``git pull`` で問題ないで"
"しょう。しかし最初のデプロイだったらどうでしょう? そうしたケースも扱えて、最"
"初の ``git clone`` も実行するようにするといいでしょう::"

#: ../../tutorial.rst:340
msgid ""
"As with our calls to `~fabric.operations.local` above, `~fabric.operations."
"run` also lets us construct clean Python-level logic based on executed shell "
"commands. However, the interesting part here is the ``git clone`` call: "
"since we're using Git's SSH method of accessing the repository on our Git "
"server, this means our remote `~fabric.operations.run` call will need to "
"authenticate itself."
msgstr ""
"上の `~fabric.operations.local` との場合と同じように `~fabric.operations."
"run` もまた、シェルコマンドの実行をベースにきれいなPythonレベルのロジックを組"
"み立てることができます。しかし、ここでの興味深い部分は ``git clone`` 呼び出し"
"で、Gitサーバ上のリポジトリへのアクセスにGitのSSHメソッドを利用します。つまり"
"リモートの `~fabric.operations.run` 呼び出しは、自身の認証を必要とするので"
"す。"

#: ../../tutorial.rst:347
msgid ""
"Older versions of Fabric (and similar high level SSH libraries) run remote "
"programs in limbo, unable to be touched from the local end. This is "
"problematic when you have a serious need to enter passwords or otherwise "
"interact with the remote program."
msgstr ""
"Fabricの以前のバージョン(と、同じようなハイレベルなSSHライブラリ)では、リモー"
"トプログラムのの実行は中途半端な状態で、ローカル側からは触れませんでした。こ"
"れはパスワードの入力が本当に必要な場合やリモートプログラムとの情報のやりとり"
"が必要な場合に解決が難しい問題でした。"

#: ../../tutorial.rst:352
msgid ""
"Fabric 1.0 and later breaks down this wall and ensures you can always talk "
"to the other side. Let's see what happens when we run our updated ``deploy`` "
"task on a new server with no Git checkout::"
msgstr ""
"Fabric 1.0以降ではこの問題を解決し、リモート側と常にやりとりできることを確保"
"しています。では、Gitチェックアウトがないときに新しいサーバー上でアップデート"
"した ``deploy`` タスクを実行したときに何が起こるか見てみましょう::"

#: ../../tutorial.rst:378
msgid ""
"Notice the ``Password:`` prompt -- that was our remote ``git`` call on our "
"Web server, asking for the password to the Git server. We were able to type "
"it in and the clone continued normally."
msgstr ""
"``Password:`` プロンプトは、ウェブサーバ上のリモートの ``git`` 呼び出しで、"
"Gitサーバーへのパスワードへの問い合わせであることに留意してください。パスワー"
"ドをここで入力することができ、クローンは通常のように継続されます。"

#: ../../tutorial.rst:380
msgid ":doc:`/usage/interactivity`"
msgstr ":doc:`/usage/interactivity`"

#: ../../tutorial.rst:386
msgid "Defining connections beforehand"
msgstr "予め接続を定義する"

#: ../../tutorial.rst:388
msgid ""
"Specifying connection info at runtime gets old real fast, so Fabric provides "
"a handful of ways to do it in your fabfile or on the command line. We won't "
"cover all of them here, but we will show you the most common one: setting "
"the global host list, :ref:`env.hosts <hosts>`."
msgstr ""
"起動時に接続情報を指定するのはすぐにうんざりしてくると思います。そのため"
"Fabricでは、fabfile内やコマンドライン上でこれを行うためのたくさんの手段を提供"
"しています。ここではすべてをカバーしませんが、もっともよくある手段、グローバ"
"ルなホストリストの設定 :ref:`env.hosts <hosts>` をお見せしましょう。"

#: ../../tutorial.rst:393
msgid ""
":doc:`env <usage/env>` is a global dictionary-like object driving many of "
"Fabric's settings, and can be written to with attributes as well (in fact, "
"`~fabric.context_managers.settings`, seen above, is simply a wrapper for "
"this.) Thus, we can modify it at module level near the top of our fabfile "
"like so::"
msgstr ""
":doc:`env <usage/env>` はFabricのたくさんの設定を操作するグローバルな辞書のよ"
"うなオブジェクトで、さらに属性とともに書くことも可能です。(実際のところ、上に"
"みられるように `~fabric.context_managers.settings` はこれの単なるラッパーで"
"す)したがって、モジュールレベルで、自分のfabfileの一番上に近いところで次のよ"
"うに変更が可能です::"

#: ../../tutorial.rst:407
msgid ""
"When ``fab`` loads up our fabfile, our modification of ``env`` will execute, "
"storing our settings change. The end result is exactly as above: our "
"``deploy`` task will run against the ``my_server`` server."
msgstr ""
"``fab`` がfabfileを読み込むとき、今回変更した ``env`` が実行され、設定の変更"
"を格納します。その結果は上の通りになり、``deploy`` タスクが ``my_server`` に"
"対して実行されます。"

#: ../../tutorial.rst:411
msgid ""
"This is also how you can tell Fabric to run on multiple remote systems at "
"once: because ``env.hosts`` is a list, ``fab`` iterates over it, calling the "
"given task once for each connection."
msgstr ""
"また、このようにして、Fabricに対して一度に複数のリモートシステム上で実行させ"
"ることもできます。``env.hosts`` はリストなので ``fab`` はこのリストを順に処理"
"し、各接続に対して与えられたタスクを呼び出します。"

#: ../../tutorial.rst:415
msgid ":doc:`usage/env`, :ref:`host-lists`"
msgstr ":doc:`usage/env`, :ref:`host-lists`"

#: ../../tutorial.rst:419
msgid "Conclusion"
msgstr "まとめ"

#: ../../tutorial.rst:421
msgid ""
"Our completed fabfile is still pretty short, as such things go. Here it is "
"in its entirety::"
msgstr ""
"完成したfabfileは、それでもかなり短いものです。全体では以下になります::"

#: ../../tutorial.rst:456
msgid "This fabfile makes use of a large portion of Fabric's feature set:"
msgstr "このfabfileはFabricの機能セットのうちのかなりの部分を利用しています:"

#: ../../tutorial.rst:458
msgid "defining fabfile tasks and running them with :doc:`fab <usage/fab>`;"
msgstr "fabfileのタスクを定義し、それを :doc:`fab <usage/fab>` で実行"

#: ../../tutorial.rst:459
msgid "calling local shell commands with `~fabric.operations.local`;"
msgstr "`~fabric.operations.local` でローカルのシェルコマンドを呼び出し"

#: ../../tutorial.rst:460
msgid "modifying env vars with `~fabric.context_managers.settings`;"
msgstr "`~fabric.context_managers.settings` で env 変数を変更"

#: ../../tutorial.rst:461
msgid "handling command failures, prompting the user, and manually aborting;"
msgstr "コマンド失敗の扱い、ユーザーにプロンプト表示、手動アボート"

#: ../../tutorial.rst:462
msgid ""
"and defining host lists and `~fabric.operations.run`-ning remote commands."
msgstr "ホストリストの定義と `~fabric.operations.run` のリモートコマンド実行"

#: ../../tutorial.rst:464
msgid ""
"However, there's still a lot more we haven't covered here! Please make sure "
"you follow the various \"see also\" links, and check out the documentation "
"table of contents on :ref:`the main index page <documentation-index>`."
msgstr ""
"とは言え、ここではカバーしていないこともまだたくさんあります ! ぜひさまざま"
"な \"see also\" リンクをたどってみてください。また、 :ref:`the main index "
"page <documentation-index>` のドキュメンテーションの目次もチェックしてみてく"
"ださい。"

#: ../../tutorial.rst:468
msgid "Thanks for reading!"
msgstr "読んでくれて、ありがとうございます !"
