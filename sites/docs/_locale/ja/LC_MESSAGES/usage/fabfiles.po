#
msgid ""
msgstr ""
"Project-Id-Version: Fabric 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-31 11:06+0900\n"
"PO-Revision-Date: 2015-01-04 09:13+0900\n"
"Last-Translator: JOTAKI, Taisuke <tekapo@gmail.com>\n"
"Language-Team: Fabric ja <tekapo@gmail.com>\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.7.1\n"

#: ../../usage/fabfiles.rst:3
msgid "Fabfile construction and use"
msgstr "fabfileの構成と使い方"

#: ../../usage/fabfiles.rst:5
msgid ""
"This document contains miscellaneous sections about fabfiles, both how to "
"best write them, and how to use them once written."
msgstr ""
"このドキュメントはfabfileに関する雑多なセクションを含んでいます。優れた"
"fabfileの作成方法と作成後の利用の仕方の両方も含みます。"

#: ../../usage/fabfiles.rst:11
msgid "Fabfile discovery"
msgstr "fabfileの探索"

#: ../../usage/fabfiles.rst:13
msgid ""
"Fabric is capable of loading Python modules (e.g. ``fabfile.py``) or "
"packages (e.g. a ``fabfile/`` directory containing an ``__init__.py``). By "
"default, it looks for something named (to Python's import machinery) "
"``fabfile`` - so either ``fabfile/`` or ``fabfile.py``."
msgstr ""
"FabricはPythonのモジュール(例えば ``fabfile.py``)やパッケージ(例えば  "
"``__init__.py`` を含んでいる ``fabfile/`` ディレクトリ)を読み込むことができま"
"す。デフォルトでは、(Pythonのインポート機構にしたがって) ``fabfile`` と名付け"
"られた ``fabfile/`` もしくは ``fabfile.py`` を探します。"

#: ../../usage/fabfiles.rst:18
msgid ""
"The fabfile discovery algorithm searches in the invoking user's current "
"working directory or any parent directories. Thus, it is oriented around "
"\"project\" use, where one keeps e.g. a ``fabfile.py`` at the root of a "
"source code tree. Such a fabfile will then be discovered no matter where in "
"the tree the user invokes ``fab``."
msgstr ""
"fabfileの探索アルゴリズムは、起動しているユーザーのカレントワーキングディレク"
"トリやその親ディレクトリを探します。したがって、\"プロジェクト\" ユース周り指"
"向で、例えばコードツリーのルートに ``fabfile.py`` を保持しておきます。こうし"
"たfabfileは、ユーザーが ``fab`` を呼び出すツリー内であればどこであれ見つけら"
"れます。"

#: ../../usage/fabfiles.rst:24
msgid ""
"The specific name to be searched for may be overridden on the command-line "
"with the :option:`-f` option, or by adding a :ref:`fabricrc <fabricrc>` line "
"which sets the value of ``fabfile``. For example, if you wanted to name your "
"fabfile ``fab_tasks.py``, you could create such a file and then call ``fab -"
"f fab_tasks.py <task name>``, or add ``fabfile = fab_tasks.py`` to ``~/."
"fabricrc``."
msgstr ""
"探索される特定の名称は :option:`-f` オプション付きのコマンドラインや "
"``fabfile`` の値をセットする :ref:`fabricrc <fabricrc>` 行を追加することで"
"オーバーライドできます。例えば、fabfileを ``fab_tasks.py`` と名づけたい場合、"
"そのファイル名でファイルを作成し、 ``fab -f fab_tasks.py <task name>`` という"
"具合に呼び出すか、``~/.fabricrc`` に ``fabfile = fab_tasks.py`` を追加しま"
"す。"

#: ../../usage/fabfiles.rst:31
msgid ""
"If the given fabfile name contains path elements other than a filename (e.g. "
"``../fabfile.py`` or ``/dir1/dir2/custom_fabfile``) it will be treated as a "
"file path and directly checked for existence without any sort of searching. "
"When in this mode, tilde-expansion will be applied, so one may refer to e.g. "
"``~/personal_fabfile.py``."
msgstr ""
"与えられたfabfile名にファイル名ではなくパス要素が含まれる場合(例えば、``../"
"fabfile.py`` や ``/dir1/dir2/custom_fabfile``)、それはファイルパスとして扱わ"
"れ、その存在の確認がどのような種類の探索もなしに直に行われます。このモード"
"時、チルダは展開されて適用されますので、例えば、``~/personal_fabfile.py`` な"
"ども参照可能です。"

#: ../../usage/fabfiles.rst:39
msgid ""
"Fabric does a normal ``import`` (actually an ``__import__``) of your fabfile "
"in order to access its contents -- it does not do any ``eval``-ing or "
"similar. In order for this to work, Fabric temporarily adds the found "
"fabfile's containing folder to the Python load path (and removes it "
"immediately afterwards.)"
msgstr ""
"Fabricはそのコンテンツにアクセスするためにfabfileの通常の ``import`` (実際は "
"``__import__``) を行います。 ``評価`` もしくはそれに類似する動作は行いませ"
"ん。そのため、Fabricは一時的に見つけたfabfileを含むフォルダーをPythonの読み込"
"みパスに追加します(そして後ですぐに取り除きます)。"

#: ../../usage/fabfiles.rst:45
msgid "The ability to load package fabfiles."
msgstr "fabfileのパッケージを読み込む機能。"

#: ../../usage/fabfiles.rst:52
msgid "Importing Fabric"
msgstr "Fabricのインポート"

#: ../../usage/fabfiles.rst:54
msgid ""
"Because Fabric is just Python, you *can* import its components any way you "
"want. However, for the purposes of encapsulation and convenience (and to "
"make life easier for Fabric's packaging script) Fabric's public API is "
"maintained in the ``fabric.api`` module."
msgstr ""
"FabricはただのPythonなので、そのコンポーネントを好きなようにインポート *可能"
"* です。とは言え、カプセル化と利便性のため(そしてFabricのパッケージスクリプト"
"の仕事をやりやすくするため)、 ``fabric.api`` モジュール内にFabricのパブリック"
"APIがメンテナンスされています。"

#: ../../usage/fabfiles.rst:59
msgid ""
"All of Fabric's :doc:`../api/core/operations`, :doc:`../api/core/"
"context_managers`, :doc:`../api/core/decorators` and :doc:`../api/core/"
"utils` are included in this module as a single, flat namespace. This enables "
"a very simple and consistent interface to Fabric within your fabfiles::"
msgstr ""
"Fabricの :doc:`../api/core/operations`、 :doc:`../api/core/"
"context_managers`、 :doc:`../api/core/decorators`、 :doc:`../api/core/utils` "
"のすべてが、単一でフラットな名前空間としてこのモジュールに含まれています。こ"
"れによりfabfile内のFabricに対するとても単純で一貫性のあるインターフェイスが可"
"能になっています::"

#: ../../usage/fabfiles.rst:69
msgid ""
"This is not technically best practices (for `a number of reasons`_) and if "
"you're only using a couple of Fab API calls, it *is* probably a good idea to "
"explicitly ``from fabric.api import env, run`` or similar. However, in most "
"nontrivial fabfiles, you'll be using all or most of the API, and the star "
"import::"
msgstr ""
"これは(`多くの理由により`_)技術的なベストプラクティスではありませんし、Fab "
"APIの呼び出しを2,3利用するだけならおそらく ``from fabric.api import env, "
"run`` などのように明示したほうが *いい* でしょう。とは言え、たいていの単純で"
"はないfabfileではすべてもしくはほとんどのAPIを利用するでしょうから、スター(ア"
"スタリスク)のインポートを使うといいでしょう::"

#: ../../usage/fabfiles.rst:77
msgid "will be a lot easier to write and read than::"
msgstr "上記は、以下を読み書きするよりははるかに容易でしょう::"

#: ../../usage/fabfiles.rst:82
msgid "so in this case we feel pragmatism overrides best practices."
msgstr ""
"なので、このケースではベストプラクティスよりも実用主義の方がより優位に感じま"
"す。"

#: ../../usage/fabfiles.rst:88
msgid "Defining tasks and importing callables"
msgstr "タスクの定義とコールバックのインポート"

#: ../../usage/fabfiles.rst:90
msgid ""
"For important information on what exactly Fabric will consider as a task "
"when it loads your fabfile, as well as notes on how best to import other "
"code, please see :doc:`/usage/tasks` in the :doc:`execution` documentation."
msgstr ""
"fabfileを読み込んだ時にFabricが正確には何をタスクとみなすのかについて、そして"
"他のコードをインポートする良い方法についての重要な情報が :doc:`execution` ド"
"キュメンテーションの :doc:`/usage/tasks` にありますので、参考にしてください。"
